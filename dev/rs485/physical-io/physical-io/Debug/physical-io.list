
physical-io.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd8  08004bd8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd8  08004bd8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e0  20000084  08004c64  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a64  08004c64  00021a64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123fa  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af6  00000000  00000000  000324a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00034fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00035d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017513  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed9f  00000000  00000000  0004df0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b19f  00000000  00000000  0005ccaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  000e7e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ad0 	.word	0x08004ad0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08004ad0 	.word	0x08004ad0

08000150 <btn_matrix_init>:
uint8_t debounce_buffer_2[ROW_LEN][COL_LEN];
uint8_t valid_buffer[ROW_LEN][COL_LEN];
uint8_t valid_buffer_prev[ROW_LEN][COL_LEN];


void btn_matrix_init(void) {
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
	for (int i = 0; i < ROW_LEN; i++) {
 8000156:	2300      	movs	r3, #0
 8000158:	607b      	str	r3, [r7, #4]
 800015a:	e02b      	b.n	80001b4 <btn_matrix_init+0x64>
		for (int j = 0; j < COL_LEN; j++) {
 800015c:	2300      	movs	r3, #0
 800015e:	603b      	str	r3, [r7, #0]
 8000160:	e022      	b.n	80001a8 <btn_matrix_init+0x58>
			debounce_buffer_1[i][j] = BUTTON_RELEASED;
 8000162:	4a19      	ldr	r2, [pc, #100]	; (80001c8 <btn_matrix_init+0x78>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	441a      	add	r2, r3
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	4413      	add	r3, r2
 800016e:	2200      	movs	r2, #0
 8000170:	701a      	strb	r2, [r3, #0]
			debounce_buffer_2[i][j] = BUTTON_RELEASED;
 8000172:	4a16      	ldr	r2, [pc, #88]	; (80001cc <btn_matrix_init+0x7c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	009b      	lsls	r3, r3, #2
 8000178:	441a      	add	r2, r3
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	4413      	add	r3, r2
 800017e:	2200      	movs	r2, #0
 8000180:	701a      	strb	r2, [r3, #0]
			valid_buffer[i][j] = BUTTON_RELEASED;
 8000182:	4a13      	ldr	r2, [pc, #76]	; (80001d0 <btn_matrix_init+0x80>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	441a      	add	r2, r3
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	4413      	add	r3, r2
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
			valid_buffer_prev[i][j] = BUTTON_RELEASED;
 8000192:	4a10      	ldr	r2, [pc, #64]	; (80001d4 <btn_matrix_init+0x84>)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	441a      	add	r2, r3
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	4413      	add	r3, r2
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < COL_LEN; j++) {
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	3301      	adds	r3, #1
 80001a6:	603b      	str	r3, [r7, #0]
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	2b03      	cmp	r3, #3
 80001ac:	ddd9      	ble.n	8000162 <btn_matrix_init+0x12>
	for (int i = 0; i < ROW_LEN; i++) {
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	3301      	adds	r3, #1
 80001b2:	607b      	str	r3, [r7, #4]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	ddd0      	ble.n	800015c <btn_matrix_init+0xc>
		}
	}
}
 80001ba:	bf00      	nop
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200019bc 	.word	0x200019bc
 80001cc:	200019c4 	.word	0x200019c4
 80001d0:	200019ac 	.word	0x200019ac
 80001d4:	200019b4 	.word	0x200019b4

080001d8 <btn_matrix_read>:

cmd_t *btn_matrix_read(int row, int col) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < COL_LEN; i++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	73fb      	strb	r3, [r7, #15]
 80001e6:	e00b      	b.n	8000200 <btn_matrix_read+0x28>
		HAL_GPIO_WritePin(COL_PORT, out_pin_mapper[i], GPIO_PIN_RESET);
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	4a45      	ldr	r2, [pc, #276]	; (8000300 <btn_matrix_read+0x128>)
 80001ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001f0:	2200      	movs	r2, #0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4843      	ldr	r0, [pc, #268]	; (8000304 <btn_matrix_read+0x12c>)
 80001f6:	f000 fe66 	bl	8000ec6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < COL_LEN; i++) {
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	3301      	adds	r3, #1
 80001fe:	73fb      	strb	r3, [r7, #15]
 8000200:	7bfb      	ldrb	r3, [r7, #15]
 8000202:	2b03      	cmp	r3, #3
 8000204:	d9f0      	bls.n	80001e8 <btn_matrix_read+0x10>
	}
	HAL_GPIO_WritePin(COL_PORT, out_pin_mapper[col], GPIO_PIN_SET);
 8000206:	4a3e      	ldr	r2, [pc, #248]	; (8000300 <btn_matrix_read+0x128>)
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800020e:	2201      	movs	r2, #1
 8000210:	4619      	mov	r1, r3
 8000212:	483c      	ldr	r0, [pc, #240]	; (8000304 <btn_matrix_read+0x12c>)
 8000214:	f000 fe57 	bl	8000ec6 <HAL_GPIO_WritePin>

	debounce_buffer_2[row][col] = debounce_buffer_1[row][col];
 8000218:	4a3b      	ldr	r2, [pc, #236]	; (8000308 <btn_matrix_read+0x130>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	441a      	add	r2, r3
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	4413      	add	r3, r2
 8000224:	7819      	ldrb	r1, [r3, #0]
 8000226:	4a39      	ldr	r2, [pc, #228]	; (800030c <btn_matrix_read+0x134>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	441a      	add	r2, r3
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	4413      	add	r3, r2
 8000232:	460a      	mov	r2, r1
 8000234:	701a      	strb	r2, [r3, #0]
	debounce_buffer_1[row][col] = HAL_GPIO_ReadPin(ROW_PORT, in_pin_mapper[row]);
 8000236:	4a36      	ldr	r2, [pc, #216]	; (8000310 <btn_matrix_read+0x138>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	4619      	mov	r1, r3
 8000240:	4834      	ldr	r0, [pc, #208]	; (8000314 <btn_matrix_read+0x13c>)
 8000242:	f000 fe29 	bl	8000e98 <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	4619      	mov	r1, r3
 800024a:	4a2f      	ldr	r2, [pc, #188]	; (8000308 <btn_matrix_read+0x130>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	441a      	add	r2, r3
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	4413      	add	r3, r2
 8000256:	460a      	mov	r2, r1
 8000258:	701a      	strb	r2, [r3, #0]
	if (debounce_buffer_1[row][col] == debounce_buffer_2[row][col]) { //valid
 800025a:	4a2b      	ldr	r2, [pc, #172]	; (8000308 <btn_matrix_read+0x130>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	441a      	add	r2, r3
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	4413      	add	r3, r2
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	4928      	ldr	r1, [pc, #160]	; (800030c <btn_matrix_read+0x134>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	4419      	add	r1, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	440b      	add	r3, r1
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d13d      	bne.n	80002f6 <btn_matrix_read+0x11e>
		valid_buffer_prev[row][col] = valid_buffer[row][col];
 800027a:	4a27      	ldr	r2, [pc, #156]	; (8000318 <btn_matrix_read+0x140>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	441a      	add	r2, r3
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	4413      	add	r3, r2
 8000286:	7819      	ldrb	r1, [r3, #0]
 8000288:	4a24      	ldr	r2, [pc, #144]	; (800031c <btn_matrix_read+0x144>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	441a      	add	r2, r3
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4413      	add	r3, r2
 8000294:	460a      	mov	r2, r1
 8000296:	701a      	strb	r2, [r3, #0]
		valid_buffer[row][col] = debounce_buffer_1[row][col];
 8000298:	4a1b      	ldr	r2, [pc, #108]	; (8000308 <btn_matrix_read+0x130>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	441a      	add	r2, r3
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	4413      	add	r3, r2
 80002a4:	7819      	ldrb	r1, [r3, #0]
 80002a6:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <btn_matrix_read+0x140>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	441a      	add	r2, r3
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	4413      	add	r3, r2
 80002b2:	460a      	mov	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]

		if (valid_buffer[row][col] == BUTTON_RELEASED && valid_buffer_prev[row][col] == BUTTON_PRESSED) {
 80002b6:	4a18      	ldr	r2, [pc, #96]	; (8000318 <btn_matrix_read+0x140>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	441a      	add	r2, r3
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	4413      	add	r3, r2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d116      	bne.n	80002f6 <btn_matrix_read+0x11e>
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <btn_matrix_read+0x144>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	441a      	add	r2, r3
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d10d      	bne.n	80002f6 <btn_matrix_read+0x11e>
			return &cmd_mapper[row][col];
 80002da:	683a      	ldr	r2, [r7, #0]
 80002dc:	4613      	mov	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	2134      	movs	r1, #52	; 0x34
 80002ea:	fb01 f202 	mul.w	r2, r1, r2
 80002ee:	4413      	add	r3, r2
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <btn_matrix_read+0x148>)
 80002f2:	4413      	add	r3, r2
 80002f4:	e000      	b.n	80002f8 <btn_matrix_read+0x120>
		}
 	}

	return NULL;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000068 	.word	0x20000068
 8000304:	40010c00 	.word	0x40010c00
 8000308:	200019bc 	.word	0x200019bc
 800030c:	200019c4 	.word	0x200019c4
 8000310:	20000070 	.word	0x20000070
 8000314:	40010800 	.word	0x40010800
 8000318:	200019ac 	.word	0x200019ac
 800031c:	200019b4 	.word	0x200019b4
 8000320:	20000000 	.word	0x20000000

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 faec 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f846 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f000 f8aa 	bl	8000488 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000334:	f000 f87e 	bl	8000434 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  btn_matrix_init();
 8000338:	f7ff ff0a 	bl	8000150 <btn_matrix_init>
  rs485_init(&huart2);
 800033c:	4813      	ldr	r0, [pc, #76]	; (800038c <main+0x68>)
 800033e:	f000 f969 	bl	8000614 <rs485_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000342:	f001 fbab 	bl	8001a9c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cmd_q */
  cmd_qHandle = osMessageQueueNew (10, sizeof(cmd_t), &cmd_q_attributes);
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <main+0x6c>)
 8000348:	210d      	movs	r1, #13
 800034a:	200a      	movs	r0, #10
 800034c:	f001 fd20 	bl	8001d90 <osMessageQueueNew>
 8000350:	4603      	mov	r3, r0
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <main+0x70>)
 8000354:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000356:	4a10      	ldr	r2, [pc, #64]	; (8000398 <main+0x74>)
 8000358:	2100      	movs	r1, #0
 800035a:	4810      	ldr	r0, [pc, #64]	; (800039c <main+0x78>)
 800035c:	f001 fc04 	bl	8001b68 <osThreadNew>
 8000360:	4603      	mov	r3, r0
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <main+0x7c>)
 8000364:	6013      	str	r3, [r2, #0]

  /* creation of rs485_task */
  rs485_taskHandle = osThreadNew(rs485_handler, NULL, &rs485_task_attributes);
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <main+0x80>)
 8000368:	2100      	movs	r1, #0
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <main+0x84>)
 800036c:	f001 fbfc 	bl	8001b68 <osThreadNew>
 8000370:	4603      	mov	r3, r0
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <main+0x88>)
 8000374:	6013      	str	r3, [r2, #0]

  /* creation of btn_task */
  btn_taskHandle = osThreadNew(btn_handler, NULL, &btn_task_attributes);
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <main+0x8c>)
 8000378:	2100      	movs	r1, #0
 800037a:	480e      	ldr	r0, [pc, #56]	; (80003b4 <main+0x90>)
 800037c:	f001 fbf4 	bl	8001b68 <osThreadNew>
 8000380:	4603      	mov	r3, r0
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <main+0x94>)
 8000384:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000386:	f001 fbbb 	bl	8001b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038a:	e7fe      	b.n	800038a <main+0x66>
 800038c:	200019dc 	.word	0x200019dc
 8000390:	08004ba8 	.word	0x08004ba8
 8000394:	200019d8 	.word	0x200019d8
 8000398:	08004b3c 	.word	0x08004b3c
 800039c:	0800053d 	.word	0x0800053d
 80003a0:	200019cc 	.word	0x200019cc
 80003a4:	08004b60 	.word	0x08004b60
 80003a8:	0800054d 	.word	0x0800054d
 80003ac:	200019d4 	.word	0x200019d4
 80003b0:	08004b84 	.word	0x08004b84
 80003b4:	080005ad 	.word	0x080005ad
 80003b8:	200019d0 	.word	0x200019d0

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b090      	sub	sp, #64	; 0x40
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0318 	add.w	r3, r7, #24
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f004 fb78 	bl	8004ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003de:	2302      	movs	r3, #2
 80003e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e2:	2301      	movs	r3, #1
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e6:	2310      	movs	r3, #16
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fd80 	bl	8000ef8 <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003fe:	f000 f903 	bl	8000608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f000 ffec 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000426:	f000 f8ef 	bl	8000608 <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3740      	adds	r7, #64	; 0x40
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_USART2_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 8000440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_USART2_UART_Init+0x4c>)
 800046c:	f001 f95e 	bl	800172c <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000476:	f000 f8c7 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200019dc 	.word	0x200019dc
 8000484:	40004400 	.word	0x40004400

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_GPIO_Init+0xa8>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b21      	ldr	r3, [pc, #132]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0320 	and.w	r3, r3, #32
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_GPIO_Init+0xa8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0308 	and.w	r3, r3, #8
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <MX_GPIO_Init+0xac>)
 80004ec:	f000 fceb 	bl	8000ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80004f0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2302      	movs	r3, #2
 8000500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4619      	mov	r1, r3
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <MX_GPIO_Init+0xac>)
 800050a:	f000 fb41 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800050e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000518:	2302      	movs	r3, #2
 800051a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_GPIO_Init+0xb0>)
 8000524:	f000 fb34 	bl	8000b90 <HAL_GPIO_Init>

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40010800 	.word	0x40010800

0800053c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f001 fbf5 	bl	8001d34 <osDelay>
 800054a:	e7fb      	b.n	8000544 <StartDefaultTask+0x8>

0800054c <rs485_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rs485_handler */
void rs485_handler(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	; 0x30
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rs485_handler */
  /* Infinite loop */
  for(;;)
  {
	  cmd_t cmd;
	  if (osMessageQueueGet(cmd_qHandle, &cmd, NULL, 0) == osOK) {
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <rs485_handler+0x58>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	f107 0120 	add.w	r1, r7, #32
 800055c:	2300      	movs	r3, #0
 800055e:	2200      	movs	r2, #0
 8000560:	f001 fd10 	bl	8001f84 <osMessageQueueGet>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d118      	bne.n	800059c <rs485_handler+0x50>
		  cmd_byte_t buffer = rs485_compose(&cmd);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	f107 0220 	add.w	r2, r7, #32
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f887 	bl	8000688 <rs485_compose>
		  osThreadSetPriority(rs485_taskHandle, osPriorityRealtime2);
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <rs485_handler+0x5c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2132      	movs	r1, #50	; 0x32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fb9b 	bl	8001cbc <osThreadSetPriority>
		  rs485_send(&buffer);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f8d6 	bl	800073c <rs485_send>
		  osThreadSetPriority(rs485_taskHandle, osPriorityRealtime1);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <rs485_handler+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2131      	movs	r1, #49	; 0x31
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fb90 	bl	8001cbc <osThreadSetPriority>
	  }
	  osDelay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f001 fbc9 	bl	8001d34 <osDelay>
  {
 80005a2:	e7d7      	b.n	8000554 <rs485_handler+0x8>
 80005a4:	200019d8 	.word	0x200019d8
 80005a8:	200019d4 	.word	0x200019d4

080005ac <btn_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_btn_handler */
void btn_handler(void *argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN btn_handler */
  /* Infinite loop */
  for(;;)
  {
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e01c      	b.n	80005f4 <btn_handler+0x48>
		  for (uint8_t col = 0; col < COL_LEN; col++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	73bb      	strb	r3, [r7, #14]
 80005be:	e013      	b.n	80005e8 <btn_handler+0x3c>
			  cmd_t *curr_cmd = btn_matrix_read(row, col);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	7bba      	ldrb	r2, [r7, #14]
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe06 	bl	80001d8 <btn_matrix_read>
 80005cc:	60b8      	str	r0, [r7, #8]
			  if (curr_cmd != NULL) {
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d006      	beq.n	80005e2 <btn_handler+0x36>
				  osMessageQueuePut(cmd_qHandle, (void *)curr_cmd, 1, 0);
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <btn_handler+0x58>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2201      	movs	r2, #1
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	f001 fc5d 	bl	8001e9c <osMessageQueuePut>
		  for (uint8_t col = 0; col < COL_LEN; col++) {
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	3301      	adds	r3, #1
 80005e6:	73bb      	strb	r3, [r7, #14]
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d9e8      	bls.n	80005c0 <btn_handler+0x14>
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	3301      	adds	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d9df      	bls.n	80005ba <btn_handler+0xe>
			  }
		  }
	  }

	  osDelay(DEBOUNCE_INTERVAL);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 fb9a 	bl	8001d34 <osDelay>
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 8000600:	e7d8      	b.n	80005b4 <btn_handler+0x8>
 8000602:	bf00      	nop
 8000604:	200019d8 	.word	0x200019d8

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <rs485_init>:
#include "crc.h"
#include "cmd.h"

static UART_HandleTypeDef *huart;

void rs485_init(UART_HandleTypeDef *huart_ptr) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	huart = huart_ptr;
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <rs485_init+0x6c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
	huart->Instance = USART2;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <rs485_init+0x6c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <rs485_init+0x70>)
 8000628:	601a      	str	r2, [r3, #0]
	huart->Init.BaudRate = 9600;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <rs485_init+0x6c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000632:	605a      	str	r2, [r3, #4]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <rs485_init+0x6c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
	huart->Init.StopBits = UART_STOPBITS_1;
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <rs485_init+0x6c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
	huart->Init.Parity = UART_PARITY_NONE;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <rs485_init+0x6c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
	huart->Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <rs485_init+0x6c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	220c      	movs	r2, #12
 8000652:	615a      	str	r2, [r3, #20]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <rs485_init+0x6c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <rs485_init+0x6c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(huart) != HAL_OK)
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <rs485_init+0x6c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f85f 	bl	800172c <HAL_UART_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <rs485_init+0x64>
	{
		Error_Handler();
 8000674:	f7ff ffc8 	bl	8000608 <Error_Handler>
	}
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000a0 	.word	0x200000a0
 8000684:	40004400 	.word	0x40004400

08000688 <rs485_compose>:

cmd_byte_t rs485_compose(cmd_t *cmd) {
 8000688:	b4b0      	push	{r4, r5, r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	cmd_byte_t buffer;
	buffer.size = 4 + cmd->data.size;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	7a9b      	ldrb	r3, [r3, #10]
 8000696:	3304      	adds	r3, #4
 8000698:	b2db      	uxtb	r3, r3
 800069a:	763b      	strb	r3, [r7, #24]
	int i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
	buffer.data[i++] = cmd->addr;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	61fa      	str	r2, [r7, #28]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	f107 0120 	add.w	r1, r7, #32
 80006ae:	440b      	add	r3, r1
 80006b0:	f803 2c18 	strb.w	r2, [r3, #-24]
	buffer.data[i++] = cmd->func;
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	61fa      	str	r2, [r7, #28]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	7852      	ldrb	r2, [r2, #1]
 80006be:	f107 0120 	add.w	r1, r7, #32
 80006c2:	440b      	add	r3, r1
 80006c4:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t k = 0; k < cmd->data.size; k++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	76fb      	strb	r3, [r7, #27]
 80006cc:	e00e      	b.n	80006ec <rs485_compose+0x64>
		buffer.data[i++] = cmd->data.data[k];
 80006ce:	7efa      	ldrb	r2, [r7, #27]
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	1c59      	adds	r1, r3, #1
 80006d4:	61f9      	str	r1, [r7, #28]
 80006d6:	6839      	ldr	r1, [r7, #0]
 80006d8:	440a      	add	r2, r1
 80006da:	7892      	ldrb	r2, [r2, #2]
 80006dc:	f107 0120 	add.w	r1, r7, #32
 80006e0:	440b      	add	r3, r1
 80006e2:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t k = 0; k < cmd->data.size; k++) {
 80006e6:	7efb      	ldrb	r3, [r7, #27]
 80006e8:	3301      	adds	r3, #1
 80006ea:	76fb      	strb	r3, [r7, #27]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	7a9b      	ldrb	r3, [r3, #10]
 80006f0:	7efa      	ldrb	r2, [r7, #27]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3eb      	bcc.n	80006ce <rs485_compose+0x46>
	}
	buffer.data[i++] = cmd->crc[0];
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	61fa      	str	r2, [r7, #28]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	7ad2      	ldrb	r2, [r2, #11]
 8000700:	f107 0120 	add.w	r1, r7, #32
 8000704:	440b      	add	r3, r1
 8000706:	f803 2c18 	strb.w	r2, [r3, #-24]
	buffer.data[i] = cmd->crc[1];
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	7b19      	ldrb	r1, [r3, #12]
 800070e:	f107 0208 	add.w	r2, r7, #8
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	4413      	add	r3, r2
 8000716:	460a      	mov	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]

	return buffer;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	461d      	mov	r5, r3
 800071e:	f107 0408 	add.w	r4, r7, #8
 8000722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000724:	6028      	str	r0, [r5, #0]
 8000726:	6069      	str	r1, [r5, #4]
 8000728:	60aa      	str	r2, [r5, #8]
 800072a:	60eb      	str	r3, [r5, #12]
 800072c:	7823      	ldrb	r3, [r4, #0]
 800072e:	742b      	strb	r3, [r5, #16]
}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	3724      	adds	r7, #36	; 0x24
 8000734:	46bd      	mov	sp, r7
 8000736:	bcb0      	pop	{r4, r5, r7}
 8000738:	4770      	bx	lr
	...

0800073c <rs485_send>:

void rs485_send(cmd_byte_t *buffer) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, buffer->data, buffer->size, 10);
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <rs485_send+0x24>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7c1b      	ldrb	r3, [r3, #16]
 800074e:	b29a      	uxth	r2, r3
 8000750:	230a      	movs	r3, #10
 8000752:	f001 f838 	bl	80017c6 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000a0 	.word	0x200000a0

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_MspInit+0x68>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <HAL_MspInit+0x68>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_MspInit+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_MspInit+0x68>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <HAL_MspInit+0x68>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x68>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	f06f 0001 	mvn.w	r0, #1
 80007a2:	f000 f9cc 	bl	8000b3e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x6c>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_MspInit+0x6c>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010000 	.word	0x40010000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <HAL_UART_MspInit+0x88>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d12f      	bne.n	8000854 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_UART_MspInit+0x8c>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_UART_MspInit+0x8c>)
 80007fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fe:	61d3      	str	r3, [r2, #28]
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x8c>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_UART_MspInit+0x8c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a13      	ldr	r2, [pc, #76]	; (8000860 <HAL_UART_MspInit+0x8c>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x8c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000824:	2304      	movs	r3, #4
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_UART_MspInit+0x90>)
 8000838:	f000 f9aa 	bl	8000b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800083c:	2308      	movs	r3, #8
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_UART_MspInit+0x90>)
 8000850:	f000 f99e 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000896:	f000 f87b 	bl	8000990 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800089a:	f003 f923 	bl	8003ae4 <xTaskGetSchedulerState>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d001      	beq.n	80008a8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008a4:	f003 fe80 	bl	80045a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008de:	f7ff ffe5 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f004 f8bb 	bl	8004a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fd1d 	bl	8000324 <main>
  bx lr
 80008ea:	4770      	bx	lr
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80008f4:	08004be0 	.word	0x08004be0
  ldr r2, =_sbss
 80008f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80008fc:	20001a64 	.word	0x20001a64

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f907 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff ff20 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f911 	bl	8000b76 <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f8e7 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000074 	.word	0x20000074
 8000988:	2000007c 	.word	0x2000007c
 800098c:	20000078 	.word	0x20000078

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x1c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x20>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	20001a20 	.word	0x20001a20

080009b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20001a20 	.word	0x20001a20

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff49 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e169      	b.n	8000e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8158 	bne.w	8000e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a9a      	ldr	r2, [pc, #616]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d05e      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d875      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bd2:	4a98      	ldr	r2, [pc, #608]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d058      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bd8:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d86f      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bde:	4a96      	ldr	r2, [pc, #600]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d052      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000be4:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d869      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bea:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d04c      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d863      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bf6:	4a92      	ldr	r2, [pc, #584]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d046      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d85d      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d82a      	bhi.n	8000c5c <HAL_GPIO_Init+0xcc>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d859      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_Init+0x80>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cbf 	.word	0x08000cbf
 8000c24:	08000cbf 	.word	0x08000cbf
 8000c28:	08000cbf 	.word	0x08000cbf
 8000c2c:	08000cbf 	.word	0x08000cbf
 8000c30:	08000cbf 	.word	0x08000cbf
 8000c34:	08000cbf 	.word	0x08000cbf
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000cbf 	.word	0x08000cbf
 8000c40:	08000cbf 	.word	0x08000cbf
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000cbf 	.word	0x08000cbf
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	4a79      	ldr	r2, [pc, #484]	; (8000e44 <HAL_GPIO_Init+0x2b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e02c      	b.n	8000cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e029      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e024      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e01f      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e01a      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e013      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	611a      	str	r2, [r3, #16]
          break;
 8000caa:	e009      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	615a      	str	r2, [r3, #20]
          break;
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          break;
 8000cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d801      	bhi.n	8000cca <HAL_GPIO_Init+0x13a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e001      	b.n	8000cce <HAL_GPIO_Init+0x13e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d802      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	210f      	movs	r1, #15
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	6a39      	ldr	r1, [r7, #32]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_GPIO_Init+0x2c0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_GPIO_Init+0x2c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e004      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491e      	ldr	r1, [pc, #120]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d021      	beq.n	8000e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	490e      	ldr	r1, [pc, #56]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x2e2>
 8000e2e:	bf00      	nop
 8000e30:	10320000 	.word	0x10320000
 8000e34:	10310000 	.word	0x10310000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae8e 	bne.w	8000ba4 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	372c      	adds	r7, #44	; 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e001      	b.n	8000eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	807b      	strh	r3, [r7, #2]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed6:	787b      	ldrb	r3, [r7, #1]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	041a      	lsls	r2, r3, #16
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e26c      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f24:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d112      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
 8000f30:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d06c      	beq.n	8001024 <HAL_RCC_OscConfig+0x12c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d168      	bne.n	8001024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e246      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x76>
 8000f60:	4b80      	ldr	r3, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e02e      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x98>
 8000f76:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7a      	ldr	r2, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b78      	ldr	r3, [pc, #480]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xbc>
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a6e      	ldr	r2, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b68      	ldr	r3, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a67      	ldr	r2, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcee 	bl	80009b4 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fcea 	bl	80009b4 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1fa      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe4>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fcda 	bl	80009b4 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fcd6 	bl	80009b4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e1e6      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x10c>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d063      	beq.n	80010fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d11c      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d116      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e1ba      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4939      	ldr	r1, [pc, #228]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e03a      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc8f 	bl	80009b4 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fc8b 	bl	80009b4 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e19b      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4927      	ldr	r1, [pc, #156]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]
 80010cc:	e015      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc6e 	bl	80009b4 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc6a 	bl	80009b4 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e17a      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d03a      	beq.n	800117c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d019      	beq.n	8001142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001114:	f7ff fc4e 	bl	80009b4 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fc4a 	bl	80009b4 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e15a      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fad8 	bl	80016f0 <RCC_Delay>
 8001140:	e01c      	b.n	800117c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fc34 	bl	80009b4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114e:	e00f      	b.n	8001170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fc30 	bl	80009b4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d908      	bls.n	8001170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e140      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	42420000 	.word	0x42420000
 800116c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e9      	bne.n	8001150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a6 	beq.w	80012d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b97      	ldr	r3, [pc, #604]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b94      	ldr	r3, [pc, #592]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a93      	ldr	r2, [pc, #588]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b8e      	ldr	r3, [pc, #568]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a8a      	ldr	r2, [pc, #552]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fbf1 	bl	80009b4 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fbed 	bl	80009b4 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0fd      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b81      	ldr	r3, [pc, #516]	; (80013f0 <HAL_RCC_OscConfig+0x4f8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x312>
 80011fc:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e02d      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x334>
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4b73      	ldr	r3, [pc, #460]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a72      	ldr	r2, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x356>
 8001234:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a6c      	ldr	r2, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a69      	ldr	r2, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a63      	ldr	r2, [pc, #396]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fba1 	bl	80009b4 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fb9d 	bl	80009b4 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0ab      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x37e>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb8b 	bl	80009b4 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fb87 	bl	80009b4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e095      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8081 	beq.w	80013e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d061      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d146      	bne.n	8001382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_RCC_OscConfig+0x4fc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb5b 	bl	80009b4 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb57 	bl	80009b4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e067      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d108      	bne.n	800133c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	492d      	ldr	r1, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a19      	ldr	r1, [r3, #32]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	430b      	orrs	r3, r1
 800134e:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x4fc>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb2b 	bl	80009b4 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb27 	bl	80009b4 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e037      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x46a>
 8001380:	e02f      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_RCC_OscConfig+0x4fc>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fb14 	bl	80009b4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fb10 	bl	80009b4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e020      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x498>
 80013ae:	e018      	b.n	80013e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e013      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x4f4>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40007000 	.word	0x40007000
 80013f4:	42420060 	.word	0x42420060

080013f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d0      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d910      	bls.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4965      	ldr	r1, [pc, #404]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0b8      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a58      	ldr	r2, [pc, #352]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	494d      	ldr	r1, [pc, #308]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d040      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e07f      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e073      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06b      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4936      	ldr	r1, [pc, #216]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fa64 	bl	80009b4 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fa60 	bl	80009b4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e053      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d210      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4922      	ldr	r1, [pc, #136]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e032      	b.n	80015ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4916      	ldr	r1, [pc, #88]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001586:	f000 f821 	bl	80015cc <HAL_RCC_GetSysClockFreq>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001598:	5ccb      	ldrb	r3, [r1, r3]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1cc>)
 80015a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1d0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f9c2 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08004bc0 	.word	0x08004bc0
 80015c4:	20000074 	.word	0x20000074
 80015c8:	20000078 	.word	0x20000078

080015cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015cc:	b490      	push	{r4, r7}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d4:	1d3c      	adds	r4, r7, #4
 80015d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015dc:	f240 2301 	movw	r3, #513	; 0x201
 80015e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b04      	cmp	r3, #4
 8001604:	d002      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x40>
 8001606:	2b08      	cmp	r3, #8
 8001608:	d003      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x46>
 800160a:	e02d      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800160e:	623b      	str	r3, [r7, #32]
      break;
 8001610:	e02d      	b.n	800166e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800161e:	4413      	add	r3, r2
 8001620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	0c5b      	lsrs	r3, r3, #17
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163e:	4413      	add	r3, r2
 8001640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e004      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	623b      	str	r3, [r7, #32]
      break;
 8001666:	e002      	b.n	800166e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800166a:	623b      	str	r3, [r7, #32]
      break;
 800166c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166e:	6a3b      	ldr	r3, [r7, #32]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bc90      	pop	{r4, r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	08004b14 	.word	0x08004b14
 8001680:	40021000 	.word	0x40021000
 8001684:	007a1200 	.word	0x007a1200
 8001688:	003d0900 	.word	0x003d0900

0800168c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_RCC_GetHCLKFreq+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000074 	.word	0x20000074

080016a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a4:	f7ff fff2 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4903      	ldr	r1, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	08004bd0 	.word	0x08004bd0

080016c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016cc:	f7ff ffde 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0adb      	lsrs	r3, r3, #11
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4903      	ldr	r1, [pc, #12]	; (80016ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08004bd0 	.word	0x08004bd0

080016f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <RCC_Delay+0x34>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <RCC_Delay+0x38>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0a5b      	lsrs	r3, r3, #9
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800170c:	bf00      	nop
  }
  while (Delay --);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	60fa      	str	r2, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f9      	bne.n	800170c <RCC_Delay+0x1c>
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	20000074 	.word	0x20000074
 8001728:	10624dd3 	.word	0x10624dd3

0800172c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e03f      	b.n	80017be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f83e 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2224      	movs	r2, #36	; 0x24
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800176e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f905 	bl	8001980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b08a      	sub	sp, #40	; 0x28
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d17c      	bne.n	80018e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_UART_Transmit+0x2c>
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e075      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_UART_Transmit+0x3e>
 8001800:	2302      	movs	r3, #2
 8001802:	e06e      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2221      	movs	r2, #33	; 0x21
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800181a:	f7ff f8cb 	bl	80009b4 <HAL_GetTick>
 800181e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	88fa      	ldrh	r2, [r7, #6]
 8001824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	88fa      	ldrh	r2, [r7, #6]
 800182a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001834:	d108      	bne.n	8001848 <HAL_UART_Transmit+0x82>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	e003      	b.n	8001850 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001858:	e02a      	b.n	80018b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f840 	bl	80018ea <UART_WaitOnFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e036      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10b      	bne.n	8001892 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	3302      	adds	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e007      	b.n	80018a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	3301      	adds	r3, #1
 80018a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1cf      	bne.n	800185a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2200      	movs	r2, #0
 80018c2:	2140      	movs	r1, #64	; 0x40
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f810 	bl	80018ea <UART_WaitOnFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e006      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018e0:	2302      	movs	r3, #2
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018fa:	e02c      	b.n	8001956 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001902:	d028      	beq.n	8001956 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <UART_WaitOnFlagUntilTimeout+0x30>
 800190a:	f7ff f853 	bl	80009b4 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	429a      	cmp	r2, r3
 8001918:	d21d      	bcs.n	8001956 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001928:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e00f      	b.n	8001976 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4013      	ands	r3, r2
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	429a      	cmp	r2, r3
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	429a      	cmp	r2, r3
 8001972:	d0c3      	beq.n	80018fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019ba:	f023 030c 	bic.w	r3, r3, #12
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2c      	ldr	r2, [pc, #176]	; (8001a94 <UART_SetConfig+0x114>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d103      	bne.n	80019f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019e8:	f7ff fe6e 	bl	80016c8 <HAL_RCC_GetPCLK2Freq>
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	e002      	b.n	80019f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019f0:	f7ff fe56 	bl	80016a0 <HAL_RCC_GetPCLK1Freq>
 80019f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009a      	lsls	r2, r3, #2
 8001a00:	441a      	add	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <UART_SetConfig+0x118>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	0119      	lsls	r1, r3, #4
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009a      	lsls	r2, r3, #2
 8001a20:	441a      	add	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <UART_SetConfig+0x118>)
 8001a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2064      	movs	r0, #100	; 0x64
 8001a36:	fb00 f303 	mul.w	r3, r0, r3
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	3332      	adds	r3, #50	; 0x32
 8001a40:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <UART_SetConfig+0x118>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a4c:	4419      	add	r1, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009a      	lsls	r2, r3, #2
 8001a58:	441a      	add	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <UART_SetConfig+0x118>)
 8001a66:	fba3 0302 	umull	r0, r3, r3, r2
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2064      	movs	r0, #100	; 0x64
 8001a6e:	fb00 f303 	mul.w	r3, r0, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	3332      	adds	r3, #50	; 0x32
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <UART_SetConfig+0x118>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	440a      	add	r2, r1
 8001a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40013800 	.word	0x40013800
 8001a98:	51eb851f 	.word	0x51eb851f

08001a9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aa2:	f3ef 8305 	mrs	r3, IPSR
 8001aa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aae:	f3ef 8310 	mrs	r3, PRIMASK
 8001ab2:	607b      	str	r3, [r7, #4]
  return(result);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <osKernelInitialize+0x32>
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <osKernelInitialize+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d109      	bne.n	8001ad6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001ace:	f06f 0305 	mvn.w	r3, #5
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e00c      	b.n	8001af0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <osKernelInitialize+0x60>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <osKernelInitialize+0x60>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e002      	b.n	8001af0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	200000a4 	.word	0x200000a4

08001b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b06:	f3ef 8305 	mrs	r3, IPSR
 8001b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b12:	f3ef 8310 	mrs	r3, PRIMASK
 8001b16:	607b      	str	r3, [r7, #4]
  return(result);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <osKernelStart+0x32>
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <osKernelStart+0x64>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d109      	bne.n	8001b3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b26:	f3ef 8311 	mrs	r3, BASEPRI
 8001b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001b32:	f06f 0305 	mvn.w	r3, #5
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e00e      	b.n	8001b58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <osKernelStart+0x64>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <osKernelStart+0x64>)
 8001b44:	2202      	movs	r2, #2
 8001b46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001b48:	f001 fb80 	bl	800324c <vTaskStartScheduler>
      stat = osOK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e002      	b.n	8001b58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200000a4 	.word	0x200000a4

08001b68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b092      	sub	sp, #72	; 0x48
 8001b6c:	af04      	add	r7, sp, #16
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b78:	f3ef 8305 	mrs	r3, IPSR
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 8094 	bne.w	8001cae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b86:	f3ef 8310 	mrs	r3, PRIMASK
 8001b8a:	623b      	str	r3, [r7, #32]
  return(result);
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 808d 	bne.w	8001cae <osThreadNew+0x146>
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <osThreadNew+0x150>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d106      	bne.n	8001baa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8001ba0:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 8082 	bne.w	8001cae <osThreadNew+0x146>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d07e      	beq.n	8001cae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001bb4:	2318      	movs	r3, #24
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001bb8:	2300      	movs	r3, #0
 8001bba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001bbc:	f107 031b 	add.w	r3, r7, #27
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d045      	beq.n	8001c5a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <osThreadNew+0x74>
        name = attr->name;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <osThreadNew+0x9a>
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b38      	cmp	r3, #56	; 0x38
 8001bf4:	d805      	bhi.n	8001c02 <osThreadNew+0x9a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <osThreadNew+0x9e>
        return (NULL);
 8001c02:	2300      	movs	r3, #0
 8001c04:	e054      	b.n	8001cb0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00e      	beq.n	8001c3c <osThreadNew+0xd4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b5b      	cmp	r3, #91	; 0x5b
 8001c24:	d90a      	bls.n	8001c3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <osThreadNew+0xd4>
        mem = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3a:	e010      	b.n	8001c5e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10c      	bne.n	8001c5e <osThreadNew+0xf6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d108      	bne.n	8001c5e <osThreadNew+0xf6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <osThreadNew+0xf6>
          mem = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c58:	e001      	b.n	8001c5e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d110      	bne.n	8001c86 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c6c:	9202      	str	r2, [sp, #8]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f001 f878 	bl	8002d70 <xTaskCreateStatic>
 8001c80:	4603      	mov	r3, r0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e013      	b.n	8001cae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d110      	bne.n	8001cae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f001 f8c2 	bl	8002e28 <xTaskCreate>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <osThreadNew+0x146>
          hTask = NULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001cae:	697b      	ldr	r3, [r7, #20]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3738      	adds	r7, #56	; 0x38
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200000a4 	.word	0x200000a4

08001cbc <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cca:	f3ef 8305 	mrs	r3, IPSR
 8001cce:	617b      	str	r3, [r7, #20]
  return(result);
 8001cd0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10f      	bne.n	8001cf6 <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8001cda:	613b      	str	r3, [r7, #16]
  return(result);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <osThreadSetPriority+0x3a>
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <osThreadSetPriority+0x74>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d109      	bne.n	8001cfe <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cea:	f3ef 8311 	mrs	r3, BASEPRI
 8001cee:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8001cf6:	f06f 0305 	mvn.w	r3, #5
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	e013      	b.n	8001d26 <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <osThreadSetPriority+0x54>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dd02      	ble.n	8001d10 <osThreadSetPriority+0x54>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b38      	cmp	r3, #56	; 0x38
 8001d0e:	dd03      	ble.n	8001d18 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8001d10:	f06f 0303 	mvn.w	r3, #3
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e006      	b.n	8001d26 <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	69b8      	ldr	r0, [r7, #24]
 8001d22:	f001 f9f1 	bl	8003108 <vTaskPrioritySet>
  }

  return (stat);
 8001d26:	69fb      	ldr	r3, [r7, #28]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200000a4 	.word	0x200000a4

08001d34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d3c:	f3ef 8305 	mrs	r3, IPSR
 8001d40:	613b      	str	r3, [r7, #16]
  return(result);
 8001d42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d48:	f3ef 8310 	mrs	r3, PRIMASK
 8001d4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <osDelay+0x34>
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <osDelay+0x58>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d109      	bne.n	8001d70 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8001d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <osDelay+0x3c>
    stat = osErrorISR;
 8001d68:	f06f 0305 	mvn.w	r3, #5
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e007      	b.n	8001d80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f001 f990 	bl	80030a0 <vTaskDelay>
    }
  }

  return (stat);
 8001d80:	697b      	ldr	r3, [r7, #20]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200000a4 	.word	0x200000a4

08001d90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001da0:	f3ef 8305 	mrs	r3, IPSR
 8001da4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001da6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d16f      	bne.n	8001e8c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dac:	f3ef 8310 	mrs	r3, PRIMASK
 8001db0:	617b      	str	r3, [r7, #20]
  return(result);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d169      	bne.n	8001e8c <osMessageQueueNew+0xfc>
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <osMessageQueueNew+0x108>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d105      	bne.n	8001dcc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8001dc4:	613b      	str	r3, [r7, #16]
  return(result);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d15f      	bne.n	8001e8c <osMessageQueueNew+0xfc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d05c      	beq.n	8001e8c <osMessageQueueNew+0xfc>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d059      	beq.n	8001e8c <osMessageQueueNew+0xfc>
    mem = -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d029      	beq.n	8001e38 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d012      	beq.n	8001e12 <osMessageQueueNew+0x82>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b4f      	cmp	r3, #79	; 0x4f
 8001df2:	d90e      	bls.n	8001e12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d302      	bcc.n	8001e12 <osMessageQueueNew+0x82>
        mem = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	e014      	b.n	8001e3c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d110      	bne.n	8001e3c <osMessageQueueNew+0xac>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d108      	bne.n	8001e3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d104      	bne.n	8001e3c <osMessageQueueNew+0xac>
          mem = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	e001      	b.n	8001e3c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10b      	bne.n	8001e5a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	9100      	str	r1, [sp, #0]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fa53 	bl	80022fc <xQueueGenericCreateStatic>
 8001e56:	6278      	str	r0, [r7, #36]	; 0x24
 8001e58:	e008      	b.n	8001e6c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001e60:	2200      	movs	r2, #0
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fac0 	bl	80023ea <xQueueGenericCreate>
 8001e6a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e001      	b.n	8001e84 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001e84:	69f9      	ldr	r1, [r7, #28]
 8001e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e88:	f000 ff16 	bl	8002cb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200000a4 	.word	0x200000a4

08001e9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eb4:	f3ef 8305 	mrs	r3, IPSR
 8001eb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001eba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ec4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <osMessageQueuePut+0x44>
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <osMessageQueuePut+0xe0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d12e      	bne.n	8001f32 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8001ed8:	617b      	str	r3, [r7, #20]
  return(result);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d028      	beq.n	8001f32 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <osMessageQueuePut+0x56>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <osMessageQueuePut+0x56>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8001ef2:	f06f 0303 	mvn.w	r3, #3
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ef8:	e039      	b.n	8001f6e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001efe:	f107 0210 	add.w	r2, r7, #16
 8001f02:	2300      	movs	r3, #0
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6a38      	ldr	r0, [r7, #32]
 8001f08:	f000 fbce 	bl	80026a8 <xQueueGenericSendFromISR>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d003      	beq.n	8001f1a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8001f12:	f06f 0302 	mvn.w	r3, #2
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f18:	e029      	b.n	8001f6e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d026      	beq.n	8001f6e <osMessageQueuePut+0xd2>
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <osMessageQueuePut+0xe4>)
 8001f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f30:	e01d      	b.n	8001f6e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <osMessageQueuePut+0xa2>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8001f3e:	f06f 0303 	mvn.w	r3, #3
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e014      	b.n	8001f70 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	6a38      	ldr	r0, [r7, #32]
 8001f4e:	f000 faad 	bl	80024ac <xQueueGenericSend>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d00b      	beq.n	8001f70 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8001f5e:	f06f 0301 	mvn.w	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e004      	b.n	8001f70 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8001f66:	f06f 0302 	mvn.w	r3, #2
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e000      	b.n	8001f70 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001f6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200000a4 	.word	0x200000a4
 8001f80:	e000ed04 	.word	0xe000ed04

08001f84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f9a:	f3ef 8305 	mrs	r3, IPSR
 8001f9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fa0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001faa:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <osMessageQueueGet+0x42>
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <osMessageQueueGet+0xdc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d12e      	bne.n	8002018 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fba:	f3ef 8311 	mrs	r3, BASEPRI
 8001fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d028      	beq.n	8002018 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <osMessageQueueGet+0x54>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <osMessageQueueGet+0x54>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8001fd8:	f06f 0303 	mvn.w	r3, #3
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001fde:	e038      	b.n	8002052 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	6a38      	ldr	r0, [r7, #32]
 8001fee:	f000 fcd3 	bl	8002998 <xQueueReceiveFromISR>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d003      	beq.n	8002000 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8001ff8:	f06f 0302 	mvn.w	r3, #2
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ffe:	e028      	b.n	8002052 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d025      	beq.n	8002052 <osMessageQueueGet+0xce>
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <osMessageQueueGet+0xe0>)
 8002008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002016:	e01c      	b.n	8002052 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <osMessageQueueGet+0xa0>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002024:	f06f 0303 	mvn.w	r3, #3
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	e013      	b.n	8002054 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	6a38      	ldr	r0, [r7, #32]
 8002032:	f000 fbd1 	bl	80027d8 <xQueueReceive>
 8002036:	4603      	mov	r3, r0
 8002038:	2b01      	cmp	r3, #1
 800203a:	d00b      	beq.n	8002054 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002042:	f06f 0301 	mvn.w	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	e004      	b.n	8002054 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800204a:	f06f 0302 	mvn.w	r3, #2
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e000      	b.n	8002054 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002052:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002056:	4618      	mov	r0, r3
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200000a4 	.word	0x200000a4
 8002064:	e000ed04 	.word	0xe000ed04

08002068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a06      	ldr	r2, [pc, #24]	; (8002090 <vApplicationGetIdleTaskMemory+0x28>)
 8002078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4a05      	ldr	r2, [pc, #20]	; (8002094 <vApplicationGetIdleTaskMemory+0x2c>)
 800207e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	200000a8 	.word	0x200000a8
 8002094:	20000104 	.word	0x20000104

08002098 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80020a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <vApplicationGetTimerTaskMemory+0x30>)
 80020ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b6:	601a      	str	r2, [r3, #0]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000304 	.word	0x20000304
 80020c8:	20000360 	.word	0x20000360

080020cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 0208 	add.w	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f103 0208 	add.w	r2, r3, #8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d103      	bne.n	8002188 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e00c      	b.n	80021a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3308      	adds	r3, #8
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e002      	b.n	8002196 <vListInsert+0x2e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d2f6      	bcs.n	8002190 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6892      	ldr	r2, [r2, #8]
 80021ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6852      	ldr	r2, [r2, #4]
 80021f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d103      	bne.n	800220c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
	...

0800222c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002252:	bf00      	nop
 8002254:	e7fe      	b.n	8002254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002256:	f002 f929 	bl	80044ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	441a      	add	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	3b01      	subs	r3, #1
 8002288:	68f9      	ldr	r1, [r7, #12]
 800228a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	441a      	add	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	22ff      	movs	r2, #255	; 0xff
 800229a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d114      	bne.n	80022d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01a      	beq.n	80022ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3310      	adds	r3, #16
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 fa51 	bl	8003760 <xTaskRemoveFromEventList>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d012      	beq.n	80022ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <xQueueGenericReset+0xcc>)
 80022c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	e009      	b.n	80022ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3310      	adds	r3, #16
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fef6 	bl	80020cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3324      	adds	r3, #36	; 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fef1 	bl	80020cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022ea:	f002 f90f 	bl	800450c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	; 0x38
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002322:	bf00      	nop
 8002324:	e7fe      	b.n	8002324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <xQueueGenericCreateStatic+0x52>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <xQueueGenericCreateStatic+0x56>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <xQueueGenericCreateStatic+0x58>
 8002352:	2300      	movs	r3, #0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	623b      	str	r3, [r7, #32]
}
 800236a:	bf00      	nop
 800236c:	e7fe      	b.n	800236c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <xQueueGenericCreateStatic+0x7e>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <xQueueGenericCreateStatic+0x82>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <xQueueGenericCreateStatic+0x84>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	61fb      	str	r3, [r7, #28]
}
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800239a:	2350      	movs	r3, #80	; 0x50
 800239c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d00a      	beq.n	80023ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	61bb      	str	r3, [r7, #24]
}
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f843 	bl	8002466 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08a      	sub	sp, #40	; 0x28
 80023ee:	af02      	add	r7, sp, #8
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <xQueueGenericCreate+0x2a>
	__asm volatile
 80023fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002402:	f383 8811 	msr	BASEPRI, r3
 8002406:	f3bf 8f6f 	isb	sy
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	613b      	str	r3, [r7, #16]
}
 8002410:	bf00      	nop
 8002412:	e7fe      	b.n	8002412 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e004      	b.n	800242a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3350      	adds	r3, #80	; 0x50
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f93c 	bl	80046ac <pvPortMalloc>
 8002434:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00f      	beq.n	800245c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	3350      	adds	r3, #80	; 0x50
 8002440:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800244a:	79fa      	ldrb	r2, [r7, #7]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f805 	bl	8002466 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800245c:	69bb      	ldr	r3, [r7, #24]
	}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002494:	2101      	movs	r1, #1
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f7ff fec8 	bl	800222c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <xQueueGenericSend+0x32>
	__asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <xQueueGenericSend+0x40>
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <xQueueGenericSend+0x44>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <xQueueGenericSend+0x46>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <xQueueGenericSend+0x60>
	__asm volatile
 80024f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002508:	bf00      	nop
 800250a:	e7fe      	b.n	800250a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d103      	bne.n	800251a <xQueueGenericSend+0x6e>
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <xQueueGenericSend+0x72>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <xQueueGenericSend+0x74>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xQueueGenericSend+0x8e>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	623b      	str	r3, [r7, #32]
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800253a:	f001 fad3 	bl	8003ae4 <xTaskGetSchedulerState>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <xQueueGenericSend+0x9e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <xQueueGenericSend+0xa2>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <xQueueGenericSend+0xa4>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <xQueueGenericSend+0xbe>
	__asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	61fb      	str	r3, [r7, #28]
}
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800256a:	f001 ff9f 	bl	80044ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <xQueueGenericSend+0xd4>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d129      	bne.n	80025d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002586:	f000 fa87 	bl	8002a98 <prvCopyDataToQueue>
 800258a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d010      	beq.n	80025b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	3324      	adds	r3, #36	; 0x24
 8002598:	4618      	mov	r0, r3
 800259a:	f001 f8e1 	bl	8003760 <xTaskRemoveFromEventList>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <xQueueGenericSend+0x1f8>)
 80025a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	e00a      	b.n	80025cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <xQueueGenericSend+0x1f8>)
 80025be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025cc:	f001 ff9e 	bl	800450c <vPortExitCritical>
				return pdPASS;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e063      	b.n	800269c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025da:	f001 ff97 	bl	800450c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	e05c      	b.n	800269c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 f91b 	bl	8003828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025f6:	f001 ff89 	bl	800450c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025fa:	f000 fe8d 	bl	8003318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025fe:	f001 ff55 	bl	80044ac <vPortEnterCritical>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002608:	b25b      	sxtb	r3, r3
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d103      	bne.n	8002618 <xQueueGenericSend+0x16c>
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800261e:	b25b      	sxtb	r3, r3
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d103      	bne.n	800262e <xQueueGenericSend+0x182>
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800262e:	f001 ff6d 	bl	800450c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002632:	1d3a      	adds	r2, r7, #4
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f001 f90a 	bl	8003854 <xTaskCheckForTimeOut>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d124      	bne.n	8002690 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002648:	f000 fb1e 	bl	8002c88 <prvIsQueueFull>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d018      	beq.n	8002684 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	3310      	adds	r3, #16
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f830 	bl	80036c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002662:	f000 faa9 	bl	8002bb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002666:	f000 fe65 	bl	8003334 <xTaskResumeAll>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f af7c 	bne.w	800256a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <xQueueGenericSend+0x1f8>)
 8002674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	e772      	b.n	800256a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002686:	f000 fa97 	bl	8002bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800268a:	f000 fe53 	bl	8003334 <xTaskResumeAll>
 800268e:	e76c      	b.n	800256a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002692:	f000 fa91 	bl	8002bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002696:	f000 fe4d 	bl	8003334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800269a:	2300      	movs	r3, #0
		}
	}
}
 800269c:	4618      	mov	r0, r3
 800269e:	3738      	adds	r7, #56	; 0x38
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	e000ed04 	.word	0xe000ed04

080026a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	; 0x38
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <xQueueGenericSendFromISR+0x3c>
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <xQueueGenericSendFromISR+0x40>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <xQueueGenericSendFromISR+0x42>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	623b      	str	r3, [r7, #32]
}
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d103      	bne.n	8002712 <xQueueGenericSendFromISR+0x6a>
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <xQueueGenericSendFromISR+0x6e>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueGenericSendFromISR+0x70>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61fb      	str	r3, [r7, #28]
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002732:	f001 ff7d 	bl	8004630 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002736:	f3ef 8211 	mrs	r2, BASEPRI
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	61ba      	str	r2, [r7, #24]
 800274c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800274e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <xQueueGenericSendFromISR+0xbc>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d12c      	bne.n	80027be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002774:	f000 f990 	bl	8002a98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002778:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d112      	bne.n	80027a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	3324      	adds	r3, #36	; 0x24
 800278e:	4618      	mov	r0, r3
 8002790:	f000 ffe6 	bl	8003760 <xTaskRemoveFromEventList>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00e      	beq.n	80027b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e007      	b.n	80027b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	b25a      	sxtb	r2, r3
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027b8:	2301      	movs	r3, #1
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027bc:	e001      	b.n	80027c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3738      	adds	r7, #56	; 0x38
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <xQueueReceive+0x30>
	__asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	623b      	str	r3, [r7, #32]
}
 8002804:	bf00      	nop
 8002806:	e7fe      	b.n	8002806 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <xQueueReceive+0x3e>
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <xQueueReceive+0x42>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <xQueueReceive+0x44>
 800281a:	2300      	movs	r3, #0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <xQueueReceive+0x5e>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	61fb      	str	r3, [r7, #28]
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002836:	f001 f955 	bl	8003ae4 <xTaskGetSchedulerState>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xQueueReceive+0x6e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <xQueueReceive+0x72>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <xQueueReceive+0x74>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <xQueueReceive+0x8e>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	61bb      	str	r3, [r7, #24]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002866:	f001 fe21 	bl	80044ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01f      	beq.n	80028b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287a:	f000 f977 	bl	8002b6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00f      	beq.n	80028ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	3310      	adds	r3, #16
 8002892:	4618      	mov	r0, r3
 8002894:	f000 ff64 	bl	8003760 <xTaskRemoveFromEventList>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <xQueueReceive+0x1bc>)
 80028a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028ae:	f001 fe2d 	bl	800450c <vPortExitCritical>
				return pdPASS;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e069      	b.n	800298a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028bc:	f001 fe26 	bl	800450c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e062      	b.n	800298a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 ffaa 	bl	8003828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028d8:	f001 fe18 	bl	800450c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028dc:	f000 fd1c 	bl	8003318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e0:	f001 fde4 	bl	80044ac <vPortEnterCritical>
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d103      	bne.n	80028fa <xQueueReceive+0x122>
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002900:	b25b      	sxtb	r3, r3
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002906:	d103      	bne.n	8002910 <xQueueReceive+0x138>
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002910:	f001 fdfc 	bl	800450c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002914:	1d3a      	adds	r2, r7, #4
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f000 ff99 	bl	8003854 <xTaskCheckForTimeOut>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d123      	bne.n	8002970 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292a:	f000 f997 	bl	8002c5c <prvIsQueueEmpty>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	3324      	adds	r3, #36	; 0x24
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 febf 	bl	80036c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002944:	f000 f938 	bl	8002bb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002948:	f000 fcf4 	bl	8003334 <xTaskResumeAll>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d189      	bne.n	8002866 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <xQueueReceive+0x1bc>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	e780      	b.n	8002866 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002966:	f000 f927 	bl	8002bb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800296a:	f000 fce3 	bl	8003334 <xTaskResumeAll>
 800296e:	e77a      	b.n	8002866 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002972:	f000 f921 	bl	8002bb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002976:	f000 fcdd 	bl	8003334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297c:	f000 f96e 	bl	8002c5c <prvIsQueueEmpty>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	f43f af6f 	beq.w	8002866 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800298a:	4618      	mov	r0, r3
 800298c:	3730      	adds	r7, #48	; 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	623b      	str	r3, [r7, #32]
}
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <xQueueReceiveFromISR+0x3a>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <xQueueReceiveFromISR+0x3e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueReceiveFromISR+0x40>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	61fb      	str	r3, [r7, #28]
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029f2:	f001 fe1d 	bl	8004630 <vPortValidateInterruptPriority>
	__asm volatile
 80029f6:	f3ef 8211 	mrs	r2, BASEPRI
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61ba      	str	r2, [r7, #24]
 8002a0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d02f      	beq.n	8002a7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a2c:	f000 f89e 	bl	8002b6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d112      	bne.n	8002a68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	3310      	adds	r3, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fe86 	bl	8003760 <xTaskRemoveFromEventList>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b25a      	sxtb	r2, r3
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	e001      	b.n	8002a82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f383 8811 	msr	BASEPRI, r3
}
 8002a8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3738      	adds	r7, #56	; 0x38
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d14d      	bne.n	8002b5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f82c 	bl	8003b20 <xTaskPriorityDisinherit>
 8002ac8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	e043      	b.n	8002b5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d119      	bne.n	8002b0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6898      	ldr	r0, [r3, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	f001 ffde 	bl	8004aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	441a      	add	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d32b      	bcc.n	8002b5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	e026      	b.n	8002b5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68d8      	ldr	r0, [r3, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	461a      	mov	r2, r3
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	f001 ffc4 	bl	8004aa4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	425b      	negs	r3, r3
 8002b26:	441a      	add	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	425b      	negs	r3, r3
 8002b42:	441a      	add	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d105      	bne.n	8002b5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b62:	697b      	ldr	r3, [r7, #20]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d018      	beq.n	8002bb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	441a      	add	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d303      	bcc.n	8002ba0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6838      	ldr	r0, [r7, #0]
 8002bac:	f001 ff7a 	bl	8004aa4 <memcpy>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bc0:	f001 fc74 	bl	80044ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bcc:	e011      	b.n	8002bf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3324      	adds	r3, #36	; 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fdc0 	bl	8003760 <xTaskRemoveFromEventList>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002be6:	f000 fe97 	bl	8003918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	dce9      	bgt.n	8002bce <prvUnlockQueue+0x16>
 8002bfa:	e000      	b.n	8002bfe <prvUnlockQueue+0x46>
					break;
 8002bfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	22ff      	movs	r2, #255	; 0xff
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c06:	f001 fc81 	bl	800450c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c0a:	f001 fc4f 	bl	80044ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c16:	e011      	b.n	8002c3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3310      	adds	r3, #16
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fd9b 	bl	8003760 <xTaskRemoveFromEventList>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c30:	f000 fe72 	bl	8003918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	dce9      	bgt.n	8002c18 <prvUnlockQueue+0x60>
 8002c44:	e000      	b.n	8002c48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	22ff      	movs	r2, #255	; 0xff
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c50:	f001 fc5c 	bl	800450c <vPortExitCritical>
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c64:	f001 fc22 	bl	80044ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c70:	2301      	movs	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e001      	b.n	8002c7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c7a:	f001 fc47 	bl	800450c <vPortExitCritical>

	return xReturn;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c90:	f001 fc0c 	bl	80044ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d102      	bne.n	8002ca6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e001      	b.n	8002caa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002caa:	f001 fc2f 	bl	800450c <vPortExitCritical>

	return xReturn;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e014      	b.n	8002cf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <vQueueAddToRegistry+0x4c>)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cd4:	490b      	ldr	r1, [pc, #44]	; (8002d04 <vQueueAddToRegistry+0x4c>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <vQueueAddToRegistry+0x4c>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cea:	e006      	b.n	8002cfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b07      	cmp	r3, #7
 8002cf6:	d9e7      	bls.n	8002cc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	20001a24 	.word	0x20001a24

08002d08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d18:	f001 fbc8 	bl	80044ac <vPortEnterCritical>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d103      	bne.n	8002d32 <vQueueWaitForMessageRestricted+0x2a>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d103      	bne.n	8002d48 <vQueueWaitForMessageRestricted+0x40>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d48:	f001 fbe0 	bl	800450c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fcd3 	bl	8003708 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff28 	bl	8002bb8 <prvUnlockQueue>
	}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	623b      	str	r3, [r7, #32]
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61fb      	str	r3, [r7, #28]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002db6:	235c      	movs	r3, #92	; 0x5c
 8002db8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b5c      	cmp	r3, #92	; 0x5c
 8002dbe:	d00a      	beq.n	8002dd6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61bb      	str	r3, [r7, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01e      	beq.n	8002e1a <xTaskCreateStatic+0xaa>
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01b      	beq.n	8002e1a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002df4:	2300      	movs	r3, #0
 8002df6:	9303      	str	r3, [sp, #12]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f850 	bl	8002eb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e14:	f000 f8d4 	bl	8002fc0 <prvAddNewTaskToReadyList>
 8002e18:	e001      	b.n	8002e1e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e1e:	697b      	ldr	r3, [r7, #20]
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 fc35 	bl	80046ac <pvPortMalloc>
 8002e42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e4a:	205c      	movs	r0, #92	; 0x5c
 8002e4c:	f001 fc2e 	bl	80046ac <pvPortMalloc>
 8002e50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5e:	e005      	b.n	8002e6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e60:	6978      	ldr	r0, [r7, #20]
 8002e62:	f001 fce7 	bl	8004834 <vPortFree>
 8002e66:	e001      	b.n	8002e6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d017      	beq.n	8002ea2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9303      	str	r3, [sp, #12]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	9302      	str	r3, [sp, #8]
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f80e 	bl	8002eb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e96:	69f8      	ldr	r0, [r7, #28]
 8002e98:	f000 f892 	bl	8002fc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e002      	b.n	8002ea8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
	}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b088      	sub	sp, #32
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	21a5      	movs	r1, #165	; 0xa5
 8002ecc:	f001 fdf8 	bl	8004ac0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	3b01      	subs	r3, #1
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f023 0307 	bic.w	r3, r3, #7
 8002ee8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	617b      	str	r3, [r7, #20]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e012      	b.n	8002f36 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	7819      	ldrb	r1, [r3, #0]
 8002f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3334      	adds	r3, #52	; 0x34
 8002f20:	460a      	mov	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d9e9      	bls.n	8002f10 <prvInitialiseNewTask+0x5e>
 8002f3c:	e000      	b.n	8002f40 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002f3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	2b37      	cmp	r3, #55	; 0x37
 8002f4c:	d901      	bls.n	8002f52 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f4e:	2337      	movs	r3, #55	; 0x37
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	2200      	movs	r2, #0
 8002f62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	3304      	adds	r3, #4
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f8ce 	bl	800210a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	3318      	adds	r3, #24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f8c9 	bl	800210a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	69b8      	ldr	r0, [r7, #24]
 8002fa2:	f001 f991 	bl	80042c8 <pxPortInitialiseStack>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fc8:	f001 fa70 	bl	80044ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8002fd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fde:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <prvAddNewTaskToReadyList+0xc4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d110      	bne.n	800300e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fec:	f000 fcb8 	bl	8003960 <prvInitialiseTaskLists>
 8002ff0:	e00d      	b.n	800300e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <prvAddNewTaskToReadyList+0xcc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	429a      	cmp	r2, r3
 8003006:	d802      	bhi.n	800300e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 8003016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <prvAddNewTaskToReadyList+0xd0>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <prvAddNewTaskToReadyList+0xd4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d903      	bls.n	8003034 <prvAddNewTaskToReadyList+0x74>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <prvAddNewTaskToReadyList+0xd4>)
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <prvAddNewTaskToReadyList+0xd8>)
 8003042:	441a      	add	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7ff f869 	bl	8002122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003050:	f001 fa5c 	bl	800450c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <prvAddNewTaskToReadyList+0xcc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvAddNewTaskToReadyList+0xc8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	d207      	bcs.n	800307a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <prvAddNewTaskToReadyList+0xdc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000c34 	.word	0x20000c34
 8003088:	20000760 	.word	0x20000760
 800308c:	20000c40 	.word	0x20000c40
 8003090:	20000c50 	.word	0x20000c50
 8003094:	20000c3c 	.word	0x20000c3c
 8003098:	20000764 	.word	0x20000764
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d017      	beq.n	80030e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <vTaskDelay+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <vTaskDelay+0x30>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030d0:	f000 f922 	bl	8003318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030d4:	2100      	movs	r1, #0
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fd90 	bl	8003bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030dc:	f000 f92a 	bl	8003334 <xTaskResumeAll>
 80030e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <vTaskDelay+0x64>)
 80030ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000c5c 	.word	0x20000c5c
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b37      	cmp	r3, #55	; 0x37
 800311a:	d90a      	bls.n	8003132 <vTaskPrioritySet+0x2a>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b37      	cmp	r3, #55	; 0x37
 8003136:	d901      	bls.n	800313c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003138:	2337      	movs	r3, #55	; 0x37
 800313a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800313c:	f001 f9b6 	bl	80044ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <vTaskPrioritySet+0x44>
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <vTaskPrioritySet+0x134>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	e000      	b.n	800314e <vTaskPrioritySet+0x46>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d068      	beq.n	8003230 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	429a      	cmp	r2, r3
 8003164:	d90d      	bls.n	8003182 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003166:	4b35      	ldr	r3, [pc, #212]	; (800323c <vTaskPrioritySet+0x134>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d00f      	beq.n	8003190 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <vTaskPrioritySet+0x134>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d309      	bcc.n	8003190 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e006      	b.n	8003190 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003182:	4b2e      	ldr	r3, [pc, #184]	; (800323c <vTaskPrioritySet+0x134>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d101      	bne.n	8003190 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	429a      	cmp	r2, r3
 80031a0:	d102      	bne.n	80031a8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db04      	blt.n	80031c0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6959      	ldr	r1, [r3, #20]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <vTaskPrioritySet+0x138>)
 80031d0:	4413      	add	r3, r2
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d101      	bne.n	80031da <vTaskPrioritySet+0xd2>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <vTaskPrioritySet+0xd4>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01c      	beq.n	800321a <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fff7 	bl	80021d8 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <vTaskPrioritySet+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d903      	bls.n	80031fe <vTaskPrioritySet+0xf6>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <vTaskPrioritySet+0x13c>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <vTaskPrioritySet+0x138>)
 800320c:	441a      	add	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3304      	adds	r3, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7fe ff84 	bl	8002122 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <vTaskPrioritySet+0x140>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003230:	f001 f96c 	bl	800450c <vPortExitCritical>
	}
 8003234:	bf00      	nop
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000760 	.word	0x20000760
 8003240:	20000764 	.word	0x20000764
 8003244:	20000c3c 	.word	0x20000c3c
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800325a:	463a      	mov	r2, r7
 800325c:	1d39      	adds	r1, r7, #4
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ff00 	bl	8002068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003268:	6839      	ldr	r1, [r7, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	9202      	str	r2, [sp, #8]
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	460a      	mov	r2, r1
 800327a:	4921      	ldr	r1, [pc, #132]	; (8003300 <vTaskStartScheduler+0xb4>)
 800327c:	4821      	ldr	r0, [pc, #132]	; (8003304 <vTaskStartScheduler+0xb8>)
 800327e:	f7ff fd77 	bl	8002d70 <xTaskCreateStatic>
 8003282:	4603      	mov	r3, r0
 8003284:	4a20      	ldr	r2, [pc, #128]	; (8003308 <vTaskStartScheduler+0xbc>)
 8003286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003288:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <vTaskStartScheduler+0xbc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e001      	b.n	800329a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032a0:	f000 fd00 	bl	8003ca4 <xTimerCreateTimerTask>
 80032a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d116      	bne.n	80032da <vTaskStartScheduler+0x8e>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	613b      	str	r3, [r7, #16]
}
 80032be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <vTaskStartScheduler+0xc0>)
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295
 80032c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <vTaskStartScheduler+0xc4>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <vTaskStartScheduler+0xc8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032d4:	f001 f878 	bl	80043c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032d8:	e00e      	b.n	80032f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d10a      	bne.n	80032f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	60fb      	str	r3, [r7, #12]
}
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <vTaskStartScheduler+0xaa>
}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	08004b24 	.word	0x08004b24
 8003304:	08003931 	.word	0x08003931
 8003308:	20000c58 	.word	0x20000c58
 800330c:	20000c54 	.word	0x20000c54
 8003310:	20000c40 	.word	0x20000c40
 8003314:	20000c38 	.word	0x20000c38

08003318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <vTaskSuspendAll+0x18>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <vTaskSuspendAll+0x18>)
 8003324:	6013      	str	r3, [r2, #0]
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000c5c 	.word	0x20000c5c

08003334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003342:	4b42      	ldr	r3, [pc, #264]	; (800344c <xTaskResumeAll+0x118>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskResumeAll+0x2c>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	603b      	str	r3, [r7, #0]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003360:	f001 f8a4 	bl	80044ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <xTaskResumeAll+0x118>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a38      	ldr	r2, [pc, #224]	; (800344c <xTaskResumeAll+0x118>)
 800336c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <xTaskResumeAll+0x118>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d162      	bne.n	800343c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <xTaskResumeAll+0x11c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d05e      	beq.n	800343c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337e:	e02f      	b.n	80033e0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <xTaskResumeAll+0x120>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3318      	adds	r3, #24
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ff23 	bl	80021d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff1e 	bl	80021d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <xTaskResumeAll+0x124>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d903      	bls.n	80033b0 <xTaskResumeAll+0x7c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <xTaskResumeAll+0x124>)
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4a27      	ldr	r2, [pc, #156]	; (800345c <xTaskResumeAll+0x128>)
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7fe feab 	bl	8002122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4b23      	ldr	r3, [pc, #140]	; (8003460 <xTaskResumeAll+0x12c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <xTaskResumeAll+0x130>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <xTaskResumeAll+0x120>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1cb      	bne.n	8003380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033ee:	f000 fb55 	bl	8003a9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <xTaskResumeAll+0x134>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033fe:	f000 f845 	bl	800348c <xTaskIncrementTick>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <xTaskResumeAll+0x130>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3b01      	subs	r3, #1
 8003412:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f1      	bne.n	80033fe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <xTaskResumeAll+0x134>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <xTaskResumeAll+0x130>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <xTaskResumeAll+0x138>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800343c:	f001 f866 	bl	800450c <vPortExitCritical>

	return xAlreadyYielded;
 8003440:	68bb      	ldr	r3, [r7, #8]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000c5c 	.word	0x20000c5c
 8003450:	20000c34 	.word	0x20000c34
 8003454:	20000bf4 	.word	0x20000bf4
 8003458:	20000c3c 	.word	0x20000c3c
 800345c:	20000764 	.word	0x20000764
 8003460:	20000760 	.word	0x20000760
 8003464:	20000c48 	.word	0x20000c48
 8003468:	20000c44 	.word	0x20000c44
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <xTaskGetTickCount+0x18>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800347c:	687b      	ldr	r3, [r7, #4]
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	20000c38 	.word	0x20000c38

0800348c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003496:	4b51      	ldr	r3, [pc, #324]	; (80035dc <xTaskIncrementTick+0x150>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 808e 	bne.w	80035bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <xTaskIncrementTick+0x154>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <xTaskIncrementTick+0x154>)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d120      	bne.n	80034f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <xTaskIncrementTick+0x158>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	603b      	str	r3, [r7, #0]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xTaskIncrementTick+0x46>
 80034d4:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <xTaskIncrementTick+0x158>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <xTaskIncrementTick+0x15c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <xTaskIncrementTick+0x158>)
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4a41      	ldr	r2, [pc, #260]	; (80035e8 <xTaskIncrementTick+0x15c>)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b40      	ldr	r3, [pc, #256]	; (80035ec <xTaskIncrementTick+0x160>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <xTaskIncrementTick+0x160>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	f000 fad3 	bl	8003a9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034f6:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <xTaskIncrementTick+0x164>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d34e      	bcc.n	800359e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003500:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <xTaskIncrementTick+0x158>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <xTaskIncrementTick+0x82>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <xTaskIncrementTick+0x84>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <xTaskIncrementTick+0x164>)
 8003516:	f04f 32ff 	mov.w	r2, #4294967295
 800351a:	601a      	str	r2, [r3, #0]
					break;
 800351c:	e03f      	b.n	800359e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <xTaskIncrementTick+0x158>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d203      	bcs.n	800353e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003536:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <xTaskIncrementTick+0x164>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]
						break;
 800353c:	e02f      	b.n	800359e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fe48 	bl	80021d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3318      	adds	r3, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fe3f 	bl	80021d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <xTaskIncrementTick+0x168>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d903      	bls.n	800356e <xTaskIncrementTick+0xe2>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <xTaskIncrementTick+0x168>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <xTaskIncrementTick+0x16c>)
 800357c:	441a      	add	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f7fe fdcc 	bl	8002122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <xTaskIncrementTick+0x170>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b3      	bcc.n	8003500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800359c:	e7b0      	b.n	8003500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <xTaskIncrementTick+0x170>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4914      	ldr	r1, [pc, #80]	; (80035f8 <xTaskIncrementTick+0x16c>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d907      	bls.n	80035c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e004      	b.n	80035c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <xTaskIncrementTick+0x174>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <xTaskIncrementTick+0x174>)
 80035c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <xTaskIncrementTick+0x178>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035d2:	697b      	ldr	r3, [r7, #20]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000c5c 	.word	0x20000c5c
 80035e0:	20000c38 	.word	0x20000c38
 80035e4:	20000bec 	.word	0x20000bec
 80035e8:	20000bf0 	.word	0x20000bf0
 80035ec:	20000c4c 	.word	0x20000c4c
 80035f0:	20000c54 	.word	0x20000c54
 80035f4:	20000c3c 	.word	0x20000c3c
 80035f8:	20000764 	.word	0x20000764
 80035fc:	20000760 	.word	0x20000760
 8003600:	20000c44 	.word	0x20000c44
 8003604:	20000c48 	.word	0x20000c48

08003608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800360e:	4b27      	ldr	r3, [pc, #156]	; (80036ac <vTaskSwitchContext+0xa4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <vTaskSwitchContext+0xa8>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800361c:	e041      	b.n	80036a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <vTaskSwitchContext+0xa8>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <vTaskSwitchContext+0xac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e010      	b.n	800364e <vTaskSwitchContext+0x46>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <vTaskSwitchContext+0x40>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	607b      	str	r3, [r7, #4]
}
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <vTaskSwitchContext+0x3e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	491a      	ldr	r1, [pc, #104]	; (80036b8 <vTaskSwitchContext+0xb0>)
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0e4      	beq.n	800362c <vTaskSwitchContext+0x24>
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <vTaskSwitchContext+0xb0>)
 800366e:	4413      	add	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3308      	adds	r3, #8
 8003684:	429a      	cmp	r2, r3
 8003686:	d104      	bne.n	8003692 <vTaskSwitchContext+0x8a>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a08      	ldr	r2, [pc, #32]	; (80036bc <vTaskSwitchContext+0xb4>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <vTaskSwitchContext+0xac>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6013      	str	r3, [r2, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	20000c5c 	.word	0x20000c5c
 80036b0:	20000c48 	.word	0x20000c48
 80036b4:	20000c3c 	.word	0x20000c3c
 80036b8:	20000764 	.word	0x20000764
 80036bc:	20000760 	.word	0x20000760

080036c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	60fb      	str	r3, [r7, #12]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <vTaskPlaceOnEventList+0x44>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3318      	adds	r3, #24
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe fd3a 	bl	8002168 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036f4:	2101      	movs	r1, #1
 80036f6:	6838      	ldr	r0, [r7, #0]
 80036f8:	f000 fa80 	bl	8003bfc <prvAddCurrentTaskToDelayedList>
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000760 	.word	0x20000760

08003708 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	617b      	str	r3, [r7, #20]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <vTaskPlaceOnEventListRestricted+0x54>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3318      	adds	r3, #24
 8003736:	4619      	mov	r1, r3
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7fe fcf2 	bl	8002122 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f000 fa55 	bl	8003bfc <prvAddCurrentTaskToDelayedList>
	}
 8003752:	bf00      	nop
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000760 	.word	0x20000760

08003760 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	60fb      	str	r3, [r7, #12]
}
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3318      	adds	r3, #24
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fd21 	bl	80021d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <xTaskRemoveFromEventList+0xb0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11d      	bne.n	80037da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fd18 	bl	80021d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <xTaskRemoveFromEventList+0xb4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <xTaskRemoveFromEventList+0x5c>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <xTaskRemoveFromEventList+0xb4>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <xTaskRemoveFromEventList+0xb8>)
 80037ca:	441a      	add	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7fe fca5 	bl	8002122 <vListInsertEnd>
 80037d8:	e005      	b.n	80037e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	3318      	adds	r3, #24
 80037de:	4619      	mov	r1, r3
 80037e0:	480e      	ldr	r0, [pc, #56]	; (800381c <xTaskRemoveFromEventList+0xbc>)
 80037e2:	f7fe fc9e 	bl	8002122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <xTaskRemoveFromEventList+0xc0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d905      	bls.n	8003800 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <xTaskRemoveFromEventList+0xc4>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e001      	b.n	8003804 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003804:	697b      	ldr	r3, [r7, #20]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000c5c 	.word	0x20000c5c
 8003814:	20000c3c 	.word	0x20000c3c
 8003818:	20000764 	.word	0x20000764
 800381c:	20000bf4 	.word	0x20000bf4
 8003820:	20000760 	.word	0x20000760
 8003824:	20000c48 	.word	0x20000c48

08003828 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <vTaskInternalSetTimeOutState+0x24>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <vTaskInternalSetTimeOutState+0x28>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000c4c 	.word	0x20000c4c
 8003850:	20000c38 	.word	0x20000c38

08003854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	613b      	str	r3, [r7, #16]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	f383 8811 	msr	BASEPRI, r3
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	60fb      	str	r3, [r7, #12]
}
 8003892:	bf00      	nop
 8003894:	e7fe      	b.n	8003894 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003896:	f000 fe09 	bl	80044ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <xTaskCheckForTimeOut+0xbc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d102      	bne.n	80038ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e023      	b.n	8003902 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <xTaskCheckForTimeOut+0xc0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d007      	beq.n	80038d6 <xTaskCheckForTimeOut+0x82>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e015      	b.n	8003902 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d20b      	bcs.n	80038f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad2      	subs	r2, r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff9b 	bl	8003828 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e004      	b.n	8003902 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003902:	f000 fe03 	bl	800450c <vPortExitCritical>

	return xReturn;
 8003906:	69fb      	ldr	r3, [r7, #28]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000c38 	.word	0x20000c38
 8003914:	20000c4c 	.word	0x20000c4c

08003918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <vTaskMissedYield+0x14>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
}
 8003922:	bf00      	nop
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000c48 	.word	0x20000c48

08003930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003938:	f000 f852 	bl	80039e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <prvIdleTask+0x28>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d9f9      	bls.n	8003938 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <prvIdleTask+0x2c>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003954:	e7f0      	b.n	8003938 <prvIdleTask+0x8>
 8003956:	bf00      	nop
 8003958:	20000764 	.word	0x20000764
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	e00c      	b.n	8003986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <prvInitialiseTaskLists+0x60>)
 8003978:	4413      	add	r3, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fba6 	bl	80020cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3301      	adds	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b37      	cmp	r3, #55	; 0x37
 800398a:	d9ef      	bls.n	800396c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800398c:	480d      	ldr	r0, [pc, #52]	; (80039c4 <prvInitialiseTaskLists+0x64>)
 800398e:	f7fe fb9d 	bl	80020cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003992:	480d      	ldr	r0, [pc, #52]	; (80039c8 <prvInitialiseTaskLists+0x68>)
 8003994:	f7fe fb9a 	bl	80020cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003998:	480c      	ldr	r0, [pc, #48]	; (80039cc <prvInitialiseTaskLists+0x6c>)
 800399a:	f7fe fb97 	bl	80020cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800399e:	480c      	ldr	r0, [pc, #48]	; (80039d0 <prvInitialiseTaskLists+0x70>)
 80039a0:	f7fe fb94 	bl	80020cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039a4:	480b      	ldr	r0, [pc, #44]	; (80039d4 <prvInitialiseTaskLists+0x74>)
 80039a6:	f7fe fb91 	bl	80020cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <prvInitialiseTaskLists+0x78>)
 80039ac:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <prvInitialiseTaskLists+0x64>)
 80039ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <prvInitialiseTaskLists+0x7c>)
 80039b2:	4a05      	ldr	r2, [pc, #20]	; (80039c8 <prvInitialiseTaskLists+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000764 	.word	0x20000764
 80039c4:	20000bc4 	.word	0x20000bc4
 80039c8:	20000bd8 	.word	0x20000bd8
 80039cc:	20000bf4 	.word	0x20000bf4
 80039d0:	20000c08 	.word	0x20000c08
 80039d4:	20000c20 	.word	0x20000c20
 80039d8:	20000bec 	.word	0x20000bec
 80039dc:	20000bf0 	.word	0x20000bf0

080039e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039e6:	e019      	b.n	8003a1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039e8:	f000 fd60 	bl	80044ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <prvCheckTasksWaitingTermination+0x50>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fbed 	bl	80021d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <prvCheckTasksWaitingTermination+0x54>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <prvCheckTasksWaitingTermination+0x54>)
 8003a06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <prvCheckTasksWaitingTermination+0x58>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <prvCheckTasksWaitingTermination+0x58>)
 8003a10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a12:	f000 fd7b 	bl	800450c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f810 	bl	8003a3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <prvCheckTasksWaitingTermination+0x58>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e1      	bne.n	80039e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000c08 	.word	0x20000c08
 8003a34:	20000c34 	.word	0x20000c34
 8003a38:	20000c1c 	.word	0x20000c1c

08003a3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 feee 	bl	8004834 <vPortFree>
				vPortFree( pxTCB );
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 feeb 	bl	8004834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a5e:	e018      	b.n	8003a92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d103      	bne.n	8003a72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fee2 	bl	8004834 <vPortFree>
	}
 8003a70:	e00f      	b.n	8003a92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d00a      	beq.n	8003a92 <prvDeleteTCB+0x56>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	60fb      	str	r3, [r7, #12]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <prvDeleteTCB+0x54>
	}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <prvResetNextTaskUnblockTime+0x40>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <prvResetNextTaskUnblockTime+0x14>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <prvResetNextTaskUnblockTime+0x16>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <prvResetNextTaskUnblockTime+0x44>)
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003abe:	e008      	b.n	8003ad2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <prvResetNextTaskUnblockTime+0x40>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <prvResetNextTaskUnblockTime+0x44>)
 8003ad0:	6013      	str	r3, [r2, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	20000bec 	.word	0x20000bec
 8003ae0:	20000c54 	.word	0x20000c54

08003ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <xTaskGetSchedulerState+0x34>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003af2:	2301      	movs	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	e008      	b.n	8003b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <xTaskGetSchedulerState+0x38>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b00:	2302      	movs	r3, #2
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	e001      	b.n	8003b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b0a:	687b      	ldr	r3, [r7, #4]
	}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000c40 	.word	0x20000c40
 8003b1c:	20000c5c 	.word	0x20000c5c

08003b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d056      	beq.n	8003be4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b36:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <xTaskPriorityDisinherit+0xd0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d00a      	beq.n	8003b56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	60fb      	str	r3, [r7, #12]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	60bb      	str	r3, [r7, #8]
}
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d02c      	beq.n	8003be4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d128      	bne.n	8003be4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fb1e 	bl	80021d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <xTaskPriorityDisinherit+0xd4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d903      	bls.n	8003bc4 <xTaskPriorityDisinherit+0xa4>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <xTaskPriorityDisinherit+0xd4>)
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <xTaskPriorityDisinherit+0xd8>)
 8003bd2:	441a      	add	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f7fe faa1 	bl	8002122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003be4:	697b      	ldr	r3, [r7, #20]
	}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000760 	.word	0x20000760
 8003bf4:	20000c3c 	.word	0x20000c3c
 8003bf8:	20000764 	.word	0x20000764

08003bfc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <prvAddCurrentTaskToDelayedList+0x90>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fae0 	bl	80021d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d10a      	bne.n	8003c36 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4819      	ldr	r0, [pc, #100]	; (8003c94 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c30:	f7fe fa77 	bl	8002122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c34:	e026      	b.n	8003c84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d209      	bcs.n	8003c62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7fe fa84 	bl	8002168 <vListInsert>
}
 8003c60:	e010      	b.n	8003c84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f7fe fa7a 	bl	8002168 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d202      	bcs.n	8003c84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000c38 	.word	0x20000c38
 8003c90:	20000760 	.word	0x20000760
 8003c94:	20000c20 	.word	0x20000c20
 8003c98:	20000bf0 	.word	0x20000bf0
 8003c9c:	20000bec 	.word	0x20000bec
 8003ca0:	20000c54 	.word	0x20000c54

08003ca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cae:	f000 facb 	bl	8004248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <xTimerCreateTimerTask+0x80>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d021      	beq.n	8003cfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cc2:	1d3a      	adds	r2, r7, #4
 8003cc4:	f107 0108 	add.w	r1, r7, #8
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe f9e3 	bl	8002098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	9202      	str	r2, [sp, #8]
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	2302      	movs	r3, #2
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	4910      	ldr	r1, [pc, #64]	; (8003d28 <xTimerCreateTimerTask+0x84>)
 8003ce6:	4811      	ldr	r0, [pc, #68]	; (8003d2c <xTimerCreateTimerTask+0x88>)
 8003ce8:	f7ff f842 	bl	8002d70 <xTaskCreateStatic>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4a10      	ldr	r2, [pc, #64]	; (8003d30 <xTimerCreateTimerTask+0x8c>)
 8003cf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <xTimerCreateTimerTask+0x8c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	613b      	str	r3, [r7, #16]
}
 8003d16:	bf00      	nop
 8003d18:	e7fe      	b.n	8003d18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000c90 	.word	0x20000c90
 8003d28:	08004b2c 	.word	0x08004b2c
 8003d2c:	08003e51 	.word	0x08003e51
 8003d30:	20000c94 	.word	0x20000c94

08003d34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	623b      	str	r3, [r7, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <xTimerGenericCommand+0x98>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02a      	beq.n	8003dc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	dc18      	bgt.n	8003dae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d7c:	f7ff feb2 	bl	8003ae4 <xTaskGetSchedulerState>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d109      	bne.n	8003d9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <xTimerGenericCommand+0x98>)
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f107 0110 	add.w	r1, r7, #16
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	f7fe fb8b 	bl	80024ac <xQueueGenericSend>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24
 8003d98:	e012      	b.n	8003dc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <xTimerGenericCommand+0x98>)
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f107 0110 	add.w	r1, r7, #16
 8003da2:	2300      	movs	r3, #0
 8003da4:	2200      	movs	r2, #0
 8003da6:	f7fe fb81 	bl	80024ac <xQueueGenericSend>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24
 8003dac:	e008      	b.n	8003dc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <xTimerGenericCommand+0x98>)
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	f107 0110 	add.w	r1, r7, #16
 8003db6:	2300      	movs	r3, #0
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f7fe fc75 	bl	80026a8 <xQueueGenericSendFromISR>
 8003dbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000c90 	.word	0x20000c90

08003dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <prvProcessExpiredTimer+0x7c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe f9f5 	bl	80021d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d122      	bne.n	8003e3c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	18d1      	adds	r1, r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f000 f8c8 	bl	8003f98 <prvInsertTimerInActiveList>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	2100      	movs	r1, #0
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7ff ff8b 	bl	8003d34 <xTimerGenericCommand>
 8003e1e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	4798      	blx	r3
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000c88 	.word	0x20000c88

08003e50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f857 	bl	8003f10 <prvGetNextExpireTime>
 8003e62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4619      	mov	r1, r3
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f803 	bl	8003e74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e6e:	f000 f8d5 	bl	800401c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e72:	e7f1      	b.n	8003e58 <prvTimerTask+0x8>

08003e74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e7e:	f7ff fa4b 	bl	8003318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e82:	f107 0308 	add.w	r3, r7, #8
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f866 	bl	8003f58 <prvSampleTimeNow>
 8003e8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d130      	bne.n	8003ef6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <prvProcessTimerOrBlockTask+0x3c>
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d806      	bhi.n	8003eb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ea2:	f7ff fa47 	bl	8003334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff91 	bl	8003dd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003eae:	e024      	b.n	8003efa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003eb6:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <prvProcessTimerOrBlockTask+0x90>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvProcessTimerOrBlockTask+0x94>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7fe ff17 	bl	8002d08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003eda:	f7ff fa2b 	bl	8003334 <xTaskResumeAll>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <prvProcessTimerOrBlockTask+0x98>)
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	f3bf 8f6f 	isb	sy
}
 8003ef4:	e001      	b.n	8003efa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ef6:	f7ff fa1d 	bl	8003334 <xTaskResumeAll>
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000c8c 	.word	0x20000c8c
 8003f08:	20000c90 	.word	0x20000c90
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <prvGetNextExpireTime+0x44>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <prvGetNextExpireTime+0x44>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e001      	b.n	8003f46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000c88 	.word	0x20000c88

08003f58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f60:	f7ff fa86 	bl	8003470 <xTaskGetTickCount>
 8003f64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <prvSampleTimeNow+0x3c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d205      	bcs.n	8003f7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f70:	f000 f908 	bl	8004184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e002      	b.n	8003f82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f82:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <prvSampleTimeNow+0x3c>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000c98 	.word	0x20000c98

08003f98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d812      	bhi.n	8003fe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e01b      	b.n	800400a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <prvInsertTimerInActiveList+0x7c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7fe f8c3 	bl	8002168 <vListInsert>
 8003fe2:	e012      	b.n	800400a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d206      	bcs.n	8003ffa <prvInsertTimerInActiveList+0x62>
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e007      	b.n	800400a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <prvInsertTimerInActiveList+0x80>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3304      	adds	r3, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7fe f8af 	bl	8002168 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800400a:	697b      	ldr	r3, [r7, #20]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000c8c 	.word	0x20000c8c
 8004018:	20000c88 	.word	0x20000c88

0800401c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08e      	sub	sp, #56	; 0x38
 8004020:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004022:	e09d      	b.n	8004160 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da18      	bge.n	800405c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	3304      	adds	r3, #4
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61fb      	str	r3, [r7, #28]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004052:	6850      	ldr	r0, [r2, #4]
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	6892      	ldr	r2, [r2, #8]
 8004058:	4611      	mov	r1, r2
 800405a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	db7d      	blt.n	800415e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	3304      	adds	r3, #4
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe f8b0 	bl	80021d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004078:	463b      	mov	r3, r7
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff6c 	bl	8003f58 <prvSampleTimeNow>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b09      	cmp	r3, #9
 8004086:	d86b      	bhi.n	8004160 <prvProcessReceivedCommands+0x144>
 8004088:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <prvProcessReceivedCommands+0x74>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040b9 	.word	0x080040b9
 8004094:	080040b9 	.word	0x080040b9
 8004098:	080040b9 	.word	0x080040b9
 800409c:	08004161 	.word	0x08004161
 80040a0:	08004115 	.word	0x08004115
 80040a4:	0800414d 	.word	0x0800414d
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040b9 	.word	0x080040b9
 80040b0:	08004161 	.word	0x08004161
 80040b4:	08004115 	.word	0x08004115
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	18d1      	adds	r1, r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c6:	f7ff ff67 	bl	8003f98 <prvInsertTimerInActiveList>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d047      	beq.n	8004160 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d13f      	bne.n	8004160 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	441a      	add	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2300      	movs	r3, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f2:	f7ff fe1f 	bl	8003d34 <xTimerGenericCommand>
 80040f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d130      	bne.n	8004160 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	61bb      	str	r3, [r7, #24]
}
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	617b      	str	r3, [r7, #20]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	18d1      	adds	r1, r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004146:	f7ff ff27 	bl	8003f98 <prvInsertTimerInActiveList>
					break;
 800414a:	e009      	b.n	8004160 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004158:	f000 fb6c 	bl	8004834 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800415c:	e000      	b.n	8004160 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800415e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <prvProcessReceivedCommands+0x164>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1d39      	adds	r1, r7, #4
 8004166:	2200      	movs	r2, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe fb35 	bl	80027d8 <xQueueReceive>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	f47f af57 	bne.w	8004024 <prvProcessReceivedCommands+0x8>
	}
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	3730      	adds	r7, #48	; 0x30
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000c90 	.word	0x20000c90

08004184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800418a:	e045      	b.n	8004218 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800418c:	4b2c      	ldr	r3, [pc, #176]	; (8004240 <prvSwitchTimerLists+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <prvSwitchTimerLists+0xbc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe f817 	bl	80021d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d12e      	bne.n	8004218 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d90e      	bls.n	80041ea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <prvSwitchTimerLists+0xbc>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7fd ffc0 	bl	8002168 <vListInsert>
 80041e8:	e016      	b.n	8004218 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	2300      	movs	r3, #0
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	2100      	movs	r1, #0
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fd9d 	bl	8003d34 <xTimerGenericCommand>
 80041fa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	603b      	str	r3, [r7, #0]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvSwitchTimerLists+0xbc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1b4      	bne.n	800418c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <prvSwitchTimerLists+0xbc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <prvSwitchTimerLists+0xc0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <prvSwitchTimerLists+0xbc>)
 800422e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <prvSwitchTimerLists+0xc0>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6013      	str	r3, [r2, #0]
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000c88 	.word	0x20000c88
 8004244:	20000c8c 	.word	0x20000c8c

08004248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800424e:	f000 f92d 	bl	80044ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d120      	bne.n	800429c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800425a:	4814      	ldr	r0, [pc, #80]	; (80042ac <prvCheckForValidListAndQueue+0x64>)
 800425c:	f7fd ff36 	bl	80020cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004260:	4813      	ldr	r0, [pc, #76]	; (80042b0 <prvCheckForValidListAndQueue+0x68>)
 8004262:	f7fd ff33 	bl	80020cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <prvCheckForValidListAndQueue+0x6c>)
 8004268:	4a10      	ldr	r2, [pc, #64]	; (80042ac <prvCheckForValidListAndQueue+0x64>)
 800426a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <prvCheckForValidListAndQueue+0x70>)
 800426e:	4a10      	ldr	r2, [pc, #64]	; (80042b0 <prvCheckForValidListAndQueue+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004272:	2300      	movs	r3, #0
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <prvCheckForValidListAndQueue+0x74>)
 8004278:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <prvCheckForValidListAndQueue+0x78>)
 800427a:	2110      	movs	r1, #16
 800427c:	200a      	movs	r0, #10
 800427e:	f7fe f83d 	bl	80022fc <xQueueGenericCreateStatic>
 8004282:	4603      	mov	r3, r0
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <prvCheckForValidListAndQueue+0x60>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	490b      	ldr	r1, [pc, #44]	; (80042c4 <prvCheckForValidListAndQueue+0x7c>)
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fd0e 	bl	8002cb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800429c:	f000 f936 	bl	800450c <vPortExitCritical>
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000c90 	.word	0x20000c90
 80042ac:	20000c60 	.word	0x20000c60
 80042b0:	20000c74 	.word	0x20000c74
 80042b4:	20000c88 	.word	0x20000c88
 80042b8:	20000c8c 	.word	0x20000c8c
 80042bc:	20000d3c 	.word	0x20000d3c
 80042c0:	20000c9c 	.word	0x20000c9c
 80042c4:	08004b34 	.word	0x08004b34

080042c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b04      	subs	r3, #4
 80042d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3b04      	subs	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0201 	bic.w	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b04      	subs	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <pxPortInitialiseStack+0x54>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b14      	subs	r3, #20
 8004302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b20      	subs	r3, #32
 800430e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004310:	68fb      	ldr	r3, [r7, #12]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	08004321 	.word	0x08004321

08004320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <prvTaskExitError+0x54>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d00a      	beq.n	800434a <prvTaskExitError+0x2a>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60fb      	str	r3, [r7, #12]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <prvTaskExitError+0x28>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60bb      	str	r3, [r7, #8]
}
 800435c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800435e:	bf00      	nop
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0fc      	beq.n	8004360 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000080 	.word	0x20000080
	...

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	f04e 0e0d 	orr.w	lr, lr, #13
 800439e:	4770      	bx	lr

080043a0 <pxCurrentTCBConst2>:
 80043a0:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043a8:	4806      	ldr	r0, [pc, #24]	; (80043c4 <prvPortStartFirstTask+0x1c>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	b662      	cpsie	i
 80043b4:	b661      	cpsie	f
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	df00      	svc	0
 80043c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043c2:	bf00      	nop
 80043c4:	e000ed08 	.word	0xe000ed08

080043c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ce:	4b32      	ldr	r3, [pc, #200]	; (8004498 <xPortStartScheduler+0xd0>)
 80043d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4b2a      	ldr	r3, [pc, #168]	; (800449c <xPortStartScheduler+0xd4>)
 80043f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <xPortStartScheduler+0xd8>)
 80043f8:	2207      	movs	r2, #7
 80043fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043fc:	e009      	b.n	8004412 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <xPortStartScheduler+0xd8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <xPortStartScheduler+0xd8>)
 8004406:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d0ef      	beq.n	80043fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800441e:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <xPortStartScheduler+0xd8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	d00a      	beq.n	8004440 <xPortStartScheduler+0x78>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60bb      	str	r3, [r7, #8]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004440:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <xPortStartScheduler+0xd8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <xPortStartScheduler+0xd8>)
 8004448:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <xPortStartScheduler+0xd8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004452:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <xPortStartScheduler+0xd8>)
 8004454:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <xPortStartScheduler+0xdc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <xPortStartScheduler+0xdc>)
 8004464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <xPortStartScheduler+0xdc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a0d      	ldr	r2, [pc, #52]	; (80044a4 <xPortStartScheduler+0xdc>)
 8004470:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004474:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004476:	f000 f8b9 	bl	80045ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <xPortStartScheduler+0xe0>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004480:	f7ff ff92 	bl	80043a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004484:	f7ff f8c0 	bl	8003608 <vTaskSwitchContext>
	prvTaskExitError();
 8004488:	f7ff ff4a 	bl	8004320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000e400 	.word	0xe000e400
 800449c:	20000d8c 	.word	0x20000d8c
 80044a0:	20000d90 	.word	0x20000d90
 80044a4:	e000ed20 	.word	0xe000ed20
 80044a8:	20000080 	.word	0x20000080

080044ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	607b      	str	r3, [r7, #4]
}
 80044c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <vPortEnterCritical+0x58>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <vPortEnterCritical+0x58>)
 80044ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <vPortEnterCritical+0x58>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10f      	bne.n	80044f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <vPortEnterCritical+0x5c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	603b      	str	r3, [r7, #0]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <vPortEnterCritical+0x4a>
	}
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000080 	.word	0x20000080
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <vPortExitCritical+0x4c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <vPortExitCritical+0x24>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	607b      	str	r3, [r7, #4]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <vPortExitCritical+0x4c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <vPortExitCritical+0x4c>)
 8004538:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <vPortExitCritical+0x4c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <vPortExitCritical+0x42>
 8004542:	2300      	movs	r3, #0
 8004544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f383 8811 	msr	BASEPRI, r3
}
 800454c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	20000080 	.word	0x20000080
 800455c:	00000000 	.word	0x00000000

08004560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004560:	f3ef 8009 	mrs	r0, PSP
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <pxCurrentTCBConst>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004570:	6010      	str	r0, [r2, #0]
 8004572:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800457a:	f380 8811 	msr	BASEPRI, r0
 800457e:	f7ff f843 	bl	8003608 <vTaskSwitchContext>
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004596:	f380 8809 	msr	PSP, r0
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	4770      	bx	lr

080045a0 <pxCurrentTCBConst>:
 80045a0:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	607b      	str	r3, [r7, #4]
}
 80045c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045c2:	f7fe ff63 	bl	800348c <xTaskIncrementTick>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <xPortSysTickHandler+0x40>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f383 8811 	msr	BASEPRI, r3
}
 80045de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <vPortSetupTimerInterrupt+0x30>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <vPortSetupTimerInterrupt+0x34>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <vPortSetupTimerInterrupt+0x38>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <vPortSetupTimerInterrupt+0x3c>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <vPortSetupTimerInterrupt+0x40>)
 800460a:	3b01      	subs	r3, #1
 800460c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800460e:	4b03      	ldr	r3, [pc, #12]	; (800461c <vPortSetupTimerInterrupt+0x30>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	e000e010 	.word	0xe000e010
 8004620:	e000e018 	.word	0xe000e018
 8004624:	20000074 	.word	0x20000074
 8004628:	51eb851f 	.word	0x51eb851f
 800462c:	e000e014 	.word	0xe000e014

08004630 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004636:	f3ef 8305 	mrs	r3, IPSR
 800463a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d914      	bls.n	800466c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004642:	4a16      	ldr	r2, [pc, #88]	; (800469c <vPortValidateInterruptPriority+0x6c>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <vPortValidateInterruptPriority+0x70>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	7afa      	ldrb	r2, [r7, #11]
 8004652:	429a      	cmp	r2, r3
 8004654:	d20a      	bcs.n	800466c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	607b      	str	r3, [r7, #4]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <vPortValidateInterruptPriority+0x74>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <vPortValidateInterruptPriority+0x78>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d90a      	bls.n	8004692 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	603b      	str	r3, [r7, #0]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <vPortValidateInterruptPriority+0x60>
	}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	e000e3f0 	.word	0xe000e3f0
 80046a0:	20000d8c 	.word	0x20000d8c
 80046a4:	e000ed0c 	.word	0xe000ed0c
 80046a8:	20000d90 	.word	0x20000d90

080046ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046b8:	f7fe fe2e 	bl	8003318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046bc:	4b58      	ldr	r3, [pc, #352]	; (8004820 <pvPortMalloc+0x174>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046c4:	f000 f910 	bl	80048e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046c8:	4b56      	ldr	r3, [pc, #344]	; (8004824 <pvPortMalloc+0x178>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 808e 	bne.w	80047f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01d      	beq.n	8004718 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046dc:	2208      	movs	r2, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d014      	beq.n	8004718 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f023 0307 	bic.w	r3, r3, #7
 80046f4:	3308      	adds	r3, #8
 80046f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <pvPortMalloc+0x6c>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	617b      	str	r3, [r7, #20]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d069      	beq.n	80047f2 <pvPortMalloc+0x146>
 800471e:	4b42      	ldr	r3, [pc, #264]	; (8004828 <pvPortMalloc+0x17c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d864      	bhi.n	80047f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004728:	4b40      	ldr	r3, [pc, #256]	; (800482c <pvPortMalloc+0x180>)
 800472a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800472c:	4b3f      	ldr	r3, [pc, #252]	; (800482c <pvPortMalloc+0x180>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004732:	e004      	b.n	800473e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d903      	bls.n	8004750 <pvPortMalloc+0xa4>
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f1      	bne.n	8004734 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004750:	4b33      	ldr	r3, [pc, #204]	; (8004820 <pvPortMalloc+0x174>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	429a      	cmp	r2, r3
 8004758:	d04b      	beq.n	80047f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2208      	movs	r2, #8
 8004760:	4413      	add	r3, r2
 8004762:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	2308      	movs	r3, #8
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	429a      	cmp	r2, r3
 800477a:	d91f      	bls.n	80047bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800477c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <pvPortMalloc+0xf8>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	613b      	str	r3, [r7, #16]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047b6:	69b8      	ldr	r0, [r7, #24]
 80047b8:	f000 f8f8 	bl	80049ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <pvPortMalloc+0x17c>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <pvPortMalloc+0x17c>)
 80047c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <pvPortMalloc+0x17c>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <pvPortMalloc+0x184>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d203      	bcs.n	80047de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <pvPortMalloc+0x17c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <pvPortMalloc+0x184>)
 80047dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <pvPortMalloc+0x178>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047f2:	f7fe fd9f 	bl	8003334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <pvPortMalloc+0x16a>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <pvPortMalloc+0x168>
	return pvReturn;
 8004816:	69fb      	ldr	r3, [r7, #28]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	; 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2000199c 	.word	0x2000199c
 8004824:	200019a8 	.word	0x200019a8
 8004828:	200019a0 	.word	0x200019a0
 800482c:	20001994 	.word	0x20001994
 8004830:	200019a4 	.word	0x200019a4

08004834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d048      	beq.n	80048d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004846:	2308      	movs	r3, #8
 8004848:	425b      	negs	r3, r3
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4413      	add	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <vPortFree+0xac>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vPortFree+0x44>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60fb      	str	r3, [r7, #12]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <vPortFree+0x62>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60bb      	str	r3, [r7, #8]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <vPortFree+0xac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d019      	beq.n	80048d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d115      	bne.n	80048d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortFree+0xac>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	401a      	ands	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048bc:	f7fe fd2c 	bl	8003318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <vPortFree+0xb0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4413      	add	r3, r2
 80048ca:	4a06      	ldr	r2, [pc, #24]	; (80048e4 <vPortFree+0xb0>)
 80048cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ce:	6938      	ldr	r0, [r7, #16]
 80048d0:	f000 f86c 	bl	80049ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048d4:	f7fe fd2e 	bl	8003334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200019a8 	.word	0x200019a8
 80048e4:	200019a0 	.word	0x200019a0

080048e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <prvHeapInit+0xac>)
 80048f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3307      	adds	r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0307 	bic.w	r3, r3, #7
 800490e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <prvHeapInit+0xac>)
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004920:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <prvHeapInit+0xb0>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004926:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <prvHeapInit+0xb0>)
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004934:	2208      	movs	r2, #8
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0307 	bic.w	r3, r3, #7
 8004942:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <prvHeapInit+0xb4>)
 8004948:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <prvHeapInit+0xb4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <prvHeapInit+0xb4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <prvHeapInit+0xb4>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <prvHeapInit+0xb8>)
 8004976:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <prvHeapInit+0xbc>)
 800497e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <prvHeapInit+0xc0>)
 8004982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004986:	601a      	str	r2, [r3, #0]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000d94 	.word	0x20000d94
 8004998:	20001994 	.word	0x20001994
 800499c:	2000199c 	.word	0x2000199c
 80049a0:	200019a4 	.word	0x200019a4
 80049a4:	200019a0 	.word	0x200019a0
 80049a8:	200019a8 	.word	0x200019a8

080049ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049b4:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <prvInsertBlockIntoFreeList+0xa8>)
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e002      	b.n	80049c0 <prvInsertBlockIntoFreeList+0x14>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d8f7      	bhi.n	80049ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d108      	bne.n	80049ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	441a      	add	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	441a      	add	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d118      	bne.n	8004a34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <prvInsertBlockIntoFreeList+0xac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d00d      	beq.n	8004a2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e008      	b.n	8004a3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <prvInsertBlockIntoFreeList+0xac>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e003      	b.n	8004a3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d002      	beq.n	8004a4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	20001994 	.word	0x20001994
 8004a58:	2000199c 	.word	0x2000199c

08004a5c <__libc_init_array>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	2600      	movs	r6, #0
 8004a60:	4d0c      	ldr	r5, [pc, #48]	; (8004a94 <__libc_init_array+0x38>)
 8004a62:	4c0d      	ldr	r4, [pc, #52]	; (8004a98 <__libc_init_array+0x3c>)
 8004a64:	1b64      	subs	r4, r4, r5
 8004a66:	10a4      	asrs	r4, r4, #2
 8004a68:	42a6      	cmp	r6, r4
 8004a6a:	d109      	bne.n	8004a80 <__libc_init_array+0x24>
 8004a6c:	f000 f830 	bl	8004ad0 <_init>
 8004a70:	2600      	movs	r6, #0
 8004a72:	4d0a      	ldr	r5, [pc, #40]	; (8004a9c <__libc_init_array+0x40>)
 8004a74:	4c0a      	ldr	r4, [pc, #40]	; (8004aa0 <__libc_init_array+0x44>)
 8004a76:	1b64      	subs	r4, r4, r5
 8004a78:	10a4      	asrs	r4, r4, #2
 8004a7a:	42a6      	cmp	r6, r4
 8004a7c:	d105      	bne.n	8004a8a <__libc_init_array+0x2e>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a84:	4798      	blx	r3
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7ee      	b.n	8004a68 <__libc_init_array+0xc>
 8004a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8e:	4798      	blx	r3
 8004a90:	3601      	adds	r6, #1
 8004a92:	e7f2      	b.n	8004a7a <__libc_init_array+0x1e>
 8004a94:	08004bd8 	.word	0x08004bd8
 8004a98:	08004bd8 	.word	0x08004bd8
 8004a9c:	08004bd8 	.word	0x08004bd8
 8004aa0:	08004bdc 	.word	0x08004bdc

08004aa4 <memcpy>:
 8004aa4:	440a      	add	r2, r1
 8004aa6:	4291      	cmp	r1, r2
 8004aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aac:	d100      	bne.n	8004ab0 <memcpy+0xc>
 8004aae:	4770      	bx	lr
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004abc:	d1f9      	bne.n	8004ab2 <memcpy+0xe>
 8004abe:	bd10      	pop	{r4, pc}

08004ac0 <memset>:
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4402      	add	r2, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d100      	bne.n	8004aca <memset+0xa>
 8004ac8:	4770      	bx	lr
 8004aca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ace:	e7f9      	b.n	8004ac4 <memset+0x4>

08004ad0 <_init>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr

08004adc <_fini>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr
