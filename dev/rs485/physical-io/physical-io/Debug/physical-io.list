
physical-io.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ac  080054ac  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080054ac  080054ac  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054ac  080054ac  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080054b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  20000084  08005538  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b74  08005538  00021b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d52  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fa  00000000  00000000  00035dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00038f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00039d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001893e  00000000  00000000  0003ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010871  00000000  00000000  00053456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4aa  00000000  00000000  00063cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003acc  00000000  00000000  000f01c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	080053a0 	.word	0x080053a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	080053a0 	.word	0x080053a0

08000150 <gpio_write_pin>:
uint8_t debounce_buffer_1[ROW_LEN][COL_LEN];
uint8_t debounce_buffer_2[ROW_LEN][COL_LEN];
uint8_t valid_buffer[ROW_LEN][COL_LEN];
uint8_t valid_buffer_prev[ROW_LEN][COL_LEN];

static inline void gpio_write_pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	807b      	strh	r3, [r7, #2]
 800015c:	4613      	mov	r3, r2
 800015e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8000160:	787a      	ldrb	r2, [r7, #1]
 8000162:	887b      	ldrh	r3, [r7, #2]
 8000164:	4619      	mov	r1, r3
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f001 fa21 	bl	80015ae <HAL_GPIO_WritePin>
}
 800016c:	bf00      	nop
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <gpio_read_pin>:

static inline GPIO_PinState gpio_read_pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	460b      	mov	r3, r1
 800017e:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000180:	887b      	ldrh	r3, [r7, #2]
 8000182:	4619      	mov	r1, r3
 8000184:	6878      	ldr	r0, [r7, #4]
 8000186:	f001 f9fb 	bl	8001580 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
}
 800018c:	4618      	mov	r0, r3
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}

08000194 <btn_matrix_init>:

void btn_matrix_init(void) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
	for (int i = 0; i < ROW_LEN; i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	e02b      	b.n	80001f8 <btn_matrix_init+0x64>
		for (int j = 0; j < COL_LEN; j++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	603b      	str	r3, [r7, #0]
 80001a4:	e022      	b.n	80001ec <btn_matrix_init+0x58>
			debounce_buffer_1[i][j] = BUTTON_RELEASED;
 80001a6:	4a19      	ldr	r2, [pc, #100]	; (800020c <btn_matrix_init+0x78>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	441a      	add	r2, r3
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	4413      	add	r3, r2
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
			debounce_buffer_2[i][j] = BUTTON_RELEASED;
 80001b6:	4a16      	ldr	r2, [pc, #88]	; (8000210 <btn_matrix_init+0x7c>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	441a      	add	r2, r3
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	4413      	add	r3, r2
 80001c2:	2200      	movs	r2, #0
 80001c4:	701a      	strb	r2, [r3, #0]
			valid_buffer[i][j] = BUTTON_RELEASED;
 80001c6:	4a13      	ldr	r2, [pc, #76]	; (8000214 <btn_matrix_init+0x80>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	441a      	add	r2, r3
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	4413      	add	r3, r2
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
			valid_buffer_prev[i][j] = BUTTON_RELEASED;
 80001d6:	4a10      	ldr	r2, [pc, #64]	; (8000218 <btn_matrix_init+0x84>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	441a      	add	r2, r3
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	4413      	add	r3, r2
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < COL_LEN; j++) {
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	603b      	str	r3, [r7, #0]
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	ddd9      	ble.n	80001a6 <btn_matrix_init+0x12>
	for (int i = 0; i < ROW_LEN; i++) {
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	ddd0      	ble.n	80001a0 <btn_matrix_init+0xc>
		}
	}
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20001a44 	.word	0x20001a44
 8000210:	20001a4c 	.word	0x20001a4c
 8000214:	20001a34 	.word	0x20001a34
 8000218:	20001a3c 	.word	0x20001a3c

0800021c <btn_matrix_read>:

cmd_t *btn_matrix_read(int row, int col) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < COL_LEN; i++) {
 8000226:	2300      	movs	r3, #0
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	e00b      	b.n	8000244 <btn_matrix_read+0x28>
		gpio_write_pin(COL_PORT, out_pin_mapper[i], COL_RESET);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	4a45      	ldr	r2, [pc, #276]	; (8000344 <btn_matrix_read+0x128>)
 8000230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	4843      	ldr	r0, [pc, #268]	; (8000348 <btn_matrix_read+0x12c>)
 800023a:	f7ff ff89 	bl	8000150 <gpio_write_pin>
	for (uint8_t i = 0; i < COL_LEN; i++) {
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	3301      	adds	r3, #1
 8000242:	73fb      	strb	r3, [r7, #15]
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d9f0      	bls.n	800022c <btn_matrix_read+0x10>
	}
	gpio_write_pin(COL_PORT, out_pin_mapper[col], COL_SET);
 800024a:	4a3e      	ldr	r2, [pc, #248]	; (8000344 <btn_matrix_read+0x128>)
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000252:	2200      	movs	r2, #0
 8000254:	4619      	mov	r1, r3
 8000256:	483c      	ldr	r0, [pc, #240]	; (8000348 <btn_matrix_read+0x12c>)
 8000258:	f7ff ff7a 	bl	8000150 <gpio_write_pin>

	debounce_buffer_2[row][col] = debounce_buffer_1[row][col];
 800025c:	4a3b      	ldr	r2, [pc, #236]	; (800034c <btn_matrix_read+0x130>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	441a      	add	r2, r3
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	4413      	add	r3, r2
 8000268:	7819      	ldrb	r1, [r3, #0]
 800026a:	4a39      	ldr	r2, [pc, #228]	; (8000350 <btn_matrix_read+0x134>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	441a      	add	r2, r3
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	4413      	add	r3, r2
 8000276:	460a      	mov	r2, r1
 8000278:	701a      	strb	r2, [r3, #0]
	debounce_buffer_1[row][col] = gpio_read_pin(ROW_PORT, in_pin_mapper[row]);
 800027a:	4a36      	ldr	r2, [pc, #216]	; (8000354 <btn_matrix_read+0x138>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000282:	4619      	mov	r1, r3
 8000284:	4830      	ldr	r0, [pc, #192]	; (8000348 <btn_matrix_read+0x12c>)
 8000286:	f7ff ff75 	bl	8000174 <gpio_read_pin>
 800028a:	4603      	mov	r3, r0
 800028c:	4619      	mov	r1, r3
 800028e:	4a2f      	ldr	r2, [pc, #188]	; (800034c <btn_matrix_read+0x130>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	441a      	add	r2, r3
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	4413      	add	r3, r2
 800029a:	460a      	mov	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	if (debounce_buffer_1[row][col] == debounce_buffer_2[row][col]) { //valid
 800029e:	4a2b      	ldr	r2, [pc, #172]	; (800034c <btn_matrix_read+0x130>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	441a      	add	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	781a      	ldrb	r2, [r3, #0]
 80002ac:	4928      	ldr	r1, [pc, #160]	; (8000350 <btn_matrix_read+0x134>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4419      	add	r1, r3
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	440b      	add	r3, r1
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d13d      	bne.n	800033a <btn_matrix_read+0x11e>
		valid_buffer_prev[row][col] = valid_buffer[row][col];
 80002be:	4a26      	ldr	r2, [pc, #152]	; (8000358 <btn_matrix_read+0x13c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	441a      	add	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	7819      	ldrb	r1, [r3, #0]
 80002cc:	4a23      	ldr	r2, [pc, #140]	; (800035c <btn_matrix_read+0x140>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	441a      	add	r2, r3
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	4413      	add	r3, r2
 80002d8:	460a      	mov	r2, r1
 80002da:	701a      	strb	r2, [r3, #0]
		valid_buffer[row][col] = debounce_buffer_1[row][col];
 80002dc:	4a1b      	ldr	r2, [pc, #108]	; (800034c <btn_matrix_read+0x130>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	441a      	add	r2, r3
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	7819      	ldrb	r1, [r3, #0]
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <btn_matrix_read+0x13c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	441a      	add	r2, r3
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	4413      	add	r3, r2
 80002f6:	460a      	mov	r2, r1
 80002f8:	701a      	strb	r2, [r3, #0]

		if (valid_buffer[row][col] == BUTTON_RELEASED && valid_buffer_prev[row][col] == BUTTON_PRESSED) {
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <btn_matrix_read+0x13c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	441a      	add	r2, r3
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d116      	bne.n	800033a <btn_matrix_read+0x11e>
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <btn_matrix_read+0x140>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	441a      	add	r2, r3
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d10d      	bne.n	800033a <btn_matrix_read+0x11e>
			return &cmd_mapper[row][col];
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4413      	add	r3, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	2134      	movs	r1, #52	; 0x34
 800032e:	fb01 f202 	mul.w	r2, r1, r2
 8000332:	4413      	add	r3, r2
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <btn_matrix_read+0x144>)
 8000336:	4413      	add	r3, r2
 8000338:	e000      	b.n	800033c <btn_matrix_read+0x120>
		}
 	}

	return NULL;
 800033a:	2300      	movs	r3, #0
}
 800033c:	4618      	mov	r0, r3
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000068 	.word	0x20000068
 8000348:	40010800 	.word	0x40010800
 800034c:	20001a44 	.word	0x20001a44
 8000350:	20001a4c 	.word	0x20001a4c
 8000354:	20000070 	.word	0x20000070
 8000358:	20001a34 	.word	0x20001a34
 800035c:	20001a3c 	.word	0x20001a3c
 8000360:	20000000 	.word	0x20000000

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fc28 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f84a 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f8fa 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000374:	f000 f8da 	bl	800052c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000378:	f000 f884 	bl	8000484 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800037c:	f000 f8ac 	bl	80004d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  btn_matrix_init();
 8000380:	f7ff ff08 	bl	8000194 <btn_matrix_init>
  rs485_init(&huart3);
 8000384:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0x70>)
 8000386:	f000 fa13 	bl	80007b0 <rs485_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800038a:	f002 f8a7 	bl	80024dc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cmd_q */
  cmd_qHandle = osMessageQueueNew (10, sizeof(cmd_t), &cmd_q_attributes);
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <main+0x74>)
 8000390:	210d      	movs	r1, #13
 8000392:	200a      	movs	r0, #10
 8000394:	f002 fa0a 	bl	80027ac <osMessageQueueNew>
 8000398:	4603      	mov	r3, r0
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <main+0x78>)
 800039c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of triggerup_task */
  triggerup_taskHandle = osThreadNew(trigger_uplink_handler, NULL, &triggerup_task_attributes);
 800039e:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <main+0x7c>)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4810      	ldr	r0, [pc, #64]	; (80003e4 <main+0x80>)
 80003a4:	f002 f92a 	bl	80025fc <osThreadNew>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <main+0x84>)
 80003ac:	6013      	str	r3, [r2, #0]

  /* creation of rs485_task */
  rs485_taskHandle = osThreadNew(rs485_handler, NULL, &rs485_task_attributes);
 80003ae:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <main+0x88>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	480f      	ldr	r0, [pc, #60]	; (80003f0 <main+0x8c>)
 80003b4:	f002 f922 	bl	80025fc <osThreadNew>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <main+0x90>)
 80003bc:	6013      	str	r3, [r2, #0]

  /* creation of btn_task */
  btn_taskHandle = osThreadNew(btn_handler, NULL, &btn_task_attributes);
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <main+0x94>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	480e      	ldr	r0, [pc, #56]	; (80003fc <main+0x98>)
 80003c4:	f002 f91a 	bl	80025fc <osThreadNew>
 80003c8:	4603      	mov	r3, r0
 80003ca:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <main+0x9c>)
 80003cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003ce:	f002 f8b7 	bl	8002540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <main+0x6e>
 80003d4:	20001a9c 	.word	0x20001a9c
 80003d8:	0800547c 	.word	0x0800547c
 80003dc:	20001b2c 	.word	0x20001b2c
 80003e0:	08005410 	.word	0x08005410
 80003e4:	0800063d 	.word	0x0800063d
 80003e8:	20001a54 	.word	0x20001a54
 80003ec:	08005434 	.word	0x08005434
 80003f0:	08000679 	.word	0x08000679
 80003f4:	20001b28 	.word	0x20001b28
 80003f8:	08005458 	.word	0x08005458
 80003fc:	08000705 	.word	0x08000705
 8000400:	20001ae0 	.word	0x20001ae0

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b090      	sub	sp, #64	; 0x40
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	2228      	movs	r2, #40	; 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f004 ffbc 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	2301      	movs	r3, #1
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2310      	movs	r3, #16
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000432:	2302      	movs	r3, #2
 8000434:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000436:	2300      	movs	r3, #0
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800043a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800043e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f001 f8cb 	bl	80015e0 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000450:	f000 f986 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fb37 	bl	8001ae0 <HAL_RCC_ClockConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000478:	f000 f972 	bl	8000760 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3740      	adds	r7, #64	; 0x40
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_USART1_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 8000490:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004bc:	f001 fcaa 	bl	8001e14 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 f94b 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20001ae4 	.word	0x20001ae4
 80004d4:	40013800 	.word	0x40013800

080004d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <MX_USART3_UART_Init+0x50>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 8000510:	f001 fc80 	bl	8001e14 <HAL_UART_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800051a:	f000 f921 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20001a9c 	.word	0x20001a9c
 8000528:	40004800 	.word	0x40004800

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_DMA_Init+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <MX_DMA_Init+0x38>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_DMA_Init+0x38>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	200d      	movs	r0, #13
 8000550:	f000 fc6d 	bl	8000e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000554:	200d      	movs	r0, #13
 8000556:	f000 fc86 	bl	8000e66 <HAL_NVIC_EnableIRQ>

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_GPIO_Init+0xc8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <MX_GPIO_Init+0xc8>)
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_GPIO_Init+0xc8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_GPIO_Init+0xc8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a25      	ldr	r2, [pc, #148]	; (8000630 <MX_GPIO_Init+0xc8>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	210f      	movs	r1, #15
 80005c8:	481a      	ldr	r0, [pc, #104]	; (8000634 <MX_GPIO_Init+0xcc>)
 80005ca:	f000 fff0 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	4819      	ldr	r0, [pc, #100]	; (8000638 <MX_GPIO_Init+0xd0>)
 80005d4:	f000 ffeb 	bl	80015ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005d8:	230f      	movs	r3, #15
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0xcc>)
 80005f0:	f000 fe42 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005f4:	2330      	movs	r3, #48	; 0x30
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <MX_GPIO_Init+0xcc>)
 8000608:	f000 fe36 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000610:	2311      	movs	r3, #17
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_GPIO_Init+0xd0>)
 8000624:	f000 fe28 	bl	8001278 <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00

0800063c <trigger_uplink_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_trigger_uplink_handler */
void trigger_uplink_handler(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (trigger_uplink_flag == 1) {
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <trigger_uplink_handler+0x34>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d1fb      	bne.n	8000644 <trigger_uplink_handler+0x8>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <trigger_uplink_handler+0x38>)
 8000652:	f000 ffac 	bl	80015ae <HAL_GPIO_WritePin>
		  osDelay(pdMS_TO_TICKS(1100));
 8000656:	206e      	movs	r0, #110	; 0x6e
 8000658:	f002 f87a 	bl	8002750 <osDelay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <trigger_uplink_handler+0x38>)
 8000662:	f000 ffa4 	bl	80015ae <HAL_GPIO_WritePin>
		  trigger_uplink_flag = 0;
 8000666:	4b02      	ldr	r3, [pc, #8]	; (8000670 <trigger_uplink_handler+0x34>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	  if (trigger_uplink_flag == 1) {
 800066c:	e7ea      	b.n	8000644 <trigger_uplink_handler+0x8>
 800066e:	bf00      	nop
 8000670:	200000a0 	.word	0x200000a0
 8000674:	40010c00 	.word	0x40010c00

08000678 <rs485_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rs485_handler */
void rs485_handler(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0ca      	sub	sp, #296	; 0x128
 800067c:	af00      	add	r7, sp, #0
 800067e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	uint32_t curr_tick;

  for(;;)
  {
	  if (osMessageQueueGet(cmd_qHandle, &cmd, NULL, 0) == osOK) {
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <rs485_handler+0x84>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800068a:	2300      	movs	r3, #0
 800068c:	2200      	movs	r2, #0
 800068e:	f002 f987 	bl	80029a0 <osMessageQueueGet>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f4      	bne.n	8000682 <rs485_handler+0xa>
		  rs485_send(&buffer);
		  osDelay(pdMS_TO_TICKS(500));
		   */

		  //RS485
		  send_buffer = rs485_compose(&cmd);
 8000698:	463b      	mov	r3, r7
 800069a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f8ab 	bl	80007fc <rs485_compose>
 80006a6:	463a      	mov	r2, r7
 80006a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ac:	4611      	mov	r1, r2
 80006ae:	2281      	movs	r2, #129	; 0x81
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fe5f 	bl	8005374 <memcpy>
		  rs485_recv_buffer_clear();
 80006b6:	f000 f918 	bl	80008ea <rs485_recv_buffer_clear>
		  curr_tick = osKernelGetSysTimerCount();
 80006ba:	f001 ff75 	bl	80025a8 <osKernelGetSysTimerCount>
 80006be:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

		  while (osKernelGetSysTimerCount() - curr_tick < RS485_WAIT_PERIOD) {
 80006c2:	e00a      	b.n	80006da <rs485_handler+0x62>
			  if (!rs485_recv_buffer_compare()) {
 80006c4:	f000 f918 	bl	80008f8 <rs485_recv_buffer_compare>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d105      	bne.n	80006da <rs485_handler+0x62>
				  rs485_recv_buffer_clear();
 80006ce:	f000 f90c 	bl	80008ea <rs485_recv_buffer_clear>
				  curr_tick = osKernelGetSysTimerCount();
 80006d2:	f001 ff69 	bl	80025a8 <osKernelGetSysTimerCount>
 80006d6:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		  while (osKernelGetSysTimerCount() - curr_tick < RS485_WAIT_PERIOD) {
 80006da:	f001 ff65 	bl	80025a8 <osKernelGetSysTimerCount>
 80006de:	4602      	mov	r2, r0
 80006e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	2b13      	cmp	r3, #19
 80006e8:	d9ec      	bls.n	80006c4 <rs485_handler+0x4c>
			  }
		  }

		  rs485_send(&send_buffer);
 80006ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f8f0 	bl	80008d4 <rs485_send>
		  trigger_uplink_flag = 1;
 80006f4:	4b02      	ldr	r3, [pc, #8]	; (8000700 <rs485_handler+0x88>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	  if (osMessageQueueGet(cmd_qHandle, &cmd, NULL, 0) == osOK) {
 80006fa:	e7c2      	b.n	8000682 <rs485_handler+0xa>
 80006fc:	20001b2c 	.word	0x20001b2c
 8000700:	200000a0 	.word	0x200000a0

08000704 <btn_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_btn_handler */
void btn_handler(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN btn_handler */
  /* Infinite loop */
  for(;;)
  {
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e01c      	b.n	800074c <btn_handler+0x48>
		  for (uint8_t col = 0; col < COL_LEN; col++) {
 8000712:	2300      	movs	r3, #0
 8000714:	73bb      	strb	r3, [r7, #14]
 8000716:	e013      	b.n	8000740 <btn_handler+0x3c>
			  cmd_t *curr_cmd = btn_matrix_read(row, col);
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	7bba      	ldrb	r2, [r7, #14]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd7c 	bl	800021c <btn_matrix_read>
 8000724:	60b8      	str	r0, [r7, #8]
			  if (curr_cmd != NULL) {
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <btn_handler+0x36>
				  osMessageQueuePut(cmd_qHandle, (void *)curr_cmd, 1, 0);
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <btn_handler+0x58>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	2201      	movs	r2, #1
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	f002 f8bf 	bl	80028b8 <osMessageQueuePut>
		  for (uint8_t col = 0; col < COL_LEN; col++) {
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	3301      	adds	r3, #1
 800073e:	73bb      	strb	r3, [r7, #14]
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d9e8      	bls.n	8000718 <btn_handler+0x14>
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	3301      	adds	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d9df      	bls.n	8000712 <btn_handler+0xe>
			  }
		  }
	  }

	  osDelay(pdMS_TO_TICKS(DEBOUNCE_INTERVAL));
 8000752:	2001      	movs	r0, #1
 8000754:	f001 fffc 	bl	8002750 <osDelay>
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 8000758:	e7d8      	b.n	800070c <btn_handler+0x8>
 800075a:	bf00      	nop
 800075c:	20001b2c 	.word	0x20001b2c

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <uart_send>:
#include "cmd.h"

static UART_HandleTypeDef *huart;
static buffer_byte_t rx_buffer; //recv buffer for uart RX DMA

static inline void uart_send(buffer_byte_t *buffer) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, buffer->data, buffer->size, 10);
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <uart_send+0x24>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000780:	b29a      	uxth	r2, r3
 8000782:	230a      	movs	r3, #10
 8000784:	f001 fb93 	bl	8001eae <HAL_UART_Transmit>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000a4 	.word	0x200000a4

08000794 <uart_rx_buffer_clear>:

static inline buffer_byte_t uart_recv(void) {
	return rx_buffer;
}

static inline void uart_rx_buffer_clear(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	memset(rx_buffer.data, '\0', rx_buffer.size);
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <uart_rx_buffer_clear+0x18>)
 800079a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800079e:	461a      	mov	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	4802      	ldr	r0, [pc, #8]	; (80007ac <uart_rx_buffer_clear+0x18>)
 80007a4:	f004 fdf4 	bl	8005390 <memset>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000a8 	.word	0x200000a8

080007b0 <rs485_init>:

void rs485_init(UART_HandleTypeDef *huart_ptr) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	huart = huart_ptr;
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <rs485_init+0x44>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
	rx_buffer.size = 20;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <rs485_init+0x48>)
 80007c0:	2214      	movs	r2, #20
 80007c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	memset(rx_buffer.data, '\0', rx_buffer.size);
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <rs485_init+0x48>)
 80007c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80007cc:	461a      	mov	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <rs485_init+0x48>)
 80007d2:	f004 fddd 	bl	8005390 <memset>
	HAL_UART_Receive_DMA(huart, rx_buffer.data, rx_buffer.size);
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <rs485_init+0x44>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <rs485_init+0x48>)
 80007dc:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 80007e0:	b292      	uxth	r2, r2
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <rs485_init+0x48>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fbf4 	bl	8001fd2 <HAL_UART_Receive_DMA>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	200000a8 	.word	0x200000a8

080007fc <rs485_compose>:

buffer_byte_t rs485_compose(cmd_t *cmd) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a4      	sub	sp, #144	; 0x90
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	buffer_byte_t buffer;
	buffer.size = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	buffer.data[buffer.size++] = cmd->addr;
 800080c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 8000818:	4619      	mov	r1, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000822:	440b      	add	r3, r1
 8000824:	f803 2c84 	strb.w	r2, [r3, #-132]
	buffer.data[buffer.size++] = cmd->func;
 8000828:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 8000834:	4619      	mov	r1, r3
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	785a      	ldrb	r2, [r3, #1]
 800083a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800083e:	440b      	add	r3, r1
 8000840:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uint8_t k = 0; k < cmd->data.size; k++) {
 8000844:	2300      	movs	r3, #0
 8000846:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800084a:	e015      	b.n	8000878 <rs485_compose+0x7c>
		buffer.data[buffer.size++] = cmd->data.data[k];
 800084c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000850:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000854:	1c59      	adds	r1, r3, #1
 8000856:	b2c9      	uxtb	r1, r1
 8000858:	f887 108c 	strb.w	r1, [r7, #140]	; 0x8c
 800085c:	4619      	mov	r1, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	789a      	ldrb	r2, [r3, #2]
 8000864:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000868:	440b      	add	r3, r1
 800086a:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uint8_t k = 0; k < cmd->data.size; k++) {
 800086e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000872:	3301      	adds	r3, #1
 8000874:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	7a9b      	ldrb	r3, [r3, #10]
 800087c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000880:	429a      	cmp	r2, r3
 8000882:	d3e3      	bcc.n	800084c <rs485_compose+0x50>
	}
	buffer.data[buffer.size++] = cmd->crc[0];
 8000884:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 8000890:	4619      	mov	r1, r3
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	7ada      	ldrb	r2, [r3, #11]
 8000896:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800089a:	440b      	add	r3, r1
 800089c:	f803 2c84 	strb.w	r2, [r3, #-132]
	buffer.data[buffer.size++] = cmd->crc[1];
 80008a0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 80008ac:	4619      	mov	r1, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	7b1a      	ldrb	r2, [r3, #12]
 80008b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80008b6:	440b      	add	r3, r1
 80008b8:	f803 2c84 	strb.w	r2, [r3, #-132]

	return buffer;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4618      	mov	r0, r3
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2281      	movs	r2, #129	; 0x81
 80008c6:	4619      	mov	r1, r3
 80008c8:	f004 fd54 	bl	8005374 <memcpy>
}
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	3790      	adds	r7, #144	; 0x90
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <rs485_send>:
	buffer.data[buffer.size++] = '\n';

	return buffer;
}

void rs485_send(buffer_byte_t *buffer) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	uart_send(buffer);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff45 	bl	800076c <uart_send>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <rs485_recv_buffer_clear>:

buffer_byte_t rs485_recv(void) {
	return uart_recv();
}

void rs485_recv_buffer_clear(void) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
	uart_rx_buffer_clear();
 80008ee:	f7ff ff51 	bl	8000794 <uart_rx_buffer_clear>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <rs485_recv_buffer_compare>:

uint8_t rs485_recv_buffer_compare(void) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < rx_buffer.size; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	e009      	b.n	8000918 <rs485_recv_buffer_compare+0x20>
		if (rx_buffer.data[i] != '\0') {
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <rs485_recv_buffer_compare+0x38>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <rs485_recv_buffer_compare+0x1a>
			return 0;
 800090e:	2300      	movs	r3, #0
 8000910:	e009      	b.n	8000926 <rs485_recv_buffer_compare+0x2e>
	for (uint8_t i = 0; i < rx_buffer.size; i++) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	3301      	adds	r3, #1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <rs485_recv_buffer_compare+0x38>)
 800091a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	429a      	cmp	r2, r3
 8000922:	d3ef      	bcc.n	8000904 <rs485_recv_buffer_compare+0xc>
		}
	}
	return 1;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	200000a8 	.word	0x200000a8

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_MspInit+0x68>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_MspInit+0x68>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_MspInit+0x68>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x68>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <HAL_MspInit+0x68>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x68>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f06f 0001 	mvn.w	r0, #1
 8000972:	f000 fa5c 	bl	8000e2e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_MspInit+0x6c>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_MspInit+0x6c>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a4c      	ldr	r2, [pc, #304]	; (8000af0 <HAL_UART_MspInit+0x14c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d132      	bne.n	8000a2a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c4:	4b4b      	ldr	r3, [pc, #300]	; (8000af4 <HAL_UART_MspInit+0x150>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <HAL_UART_MspInit+0x150>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <HAL_UART_MspInit+0x150>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <HAL_UART_MspInit+0x150>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <HAL_UART_MspInit+0x150>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <HAL_UART_MspInit+0x150>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	4619      	mov	r1, r3
 8000a08:	483b      	ldr	r0, [pc, #236]	; (8000af8 <HAL_UART_MspInit+0x154>)
 8000a0a:	f000 fc35 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4835      	ldr	r0, [pc, #212]	; (8000af8 <HAL_UART_MspInit+0x154>)
 8000a24:	f000 fc28 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a28:	e05d      	b.n	8000ae6 <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART3)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a33      	ldr	r2, [pc, #204]	; (8000afc <HAL_UART_MspInit+0x158>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d158      	bne.n	8000ae6 <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a34:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <HAL_UART_MspInit+0x150>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a2e      	ldr	r2, [pc, #184]	; (8000af4 <HAL_UART_MspInit+0x150>)
 8000a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3e:	61d3      	str	r3, [r2, #28]
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <HAL_UART_MspInit+0x150>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_UART_MspInit+0x150>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <HAL_UART_MspInit+0x150>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_UART_MspInit+0x150>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4821      	ldr	r0, [pc, #132]	; (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a7a:	f000 fbfd 	bl	8001278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4619      	mov	r1, r3
 8000a92:	481b      	ldr	r0, [pc, #108]	; (8000b00 <HAL_UART_MspInit+0x15c>)
 8000a94:	f000 fbf0 	bl	8001278 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <HAL_UART_MspInit+0x164>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000abe:	2220      	movs	r2, #32
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000aca:	480e      	ldr	r0, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000acc:	f000 f9e6 	bl	8000e9c <HAL_DMA_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x136>
      Error_Handler();
 8000ad6:	f7ff fe43 	bl	8000760 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_UART_MspInit+0x160>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40013800 	.word	0x40013800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40004800 	.word	0x40004800
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	20001a58 	.word	0x20001a58
 8000b08:	40020030 	.word	0x40020030

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f885 	bl	8000c48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b3e:	f003 fc3d 	bl	80043bc <xTaskGetSchedulerState>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d001      	beq.n	8000b4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b48:	f004 f996 	bl	8004e78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <DMA1_Channel3_IRQHandler+0x10>)
 8000b56:	f000 fa5b 	bl	8001010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20001a58 	.word	0x20001a58

08000b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b96:	f7ff ffe5 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f004 fbc7 	bl	800532c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fbe1 	bl	8000364 <main>
  bx lr
 8000ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000bac:	080054b4 	.word	0x080054b4
  ldr r2, =_sbss
 8000bb0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000bb4:	20001b74 	.word	0x20001b74

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f923 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f808 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff feac 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f93b 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f903 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000074 	.word	0x20000074
 8000c40:	2000007c 	.word	0x2000007c
 8000c44:	20000078 	.word	0x20000078

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	2000007c 	.word	0x2000007c
 8000c68:	20001b30 	.word	0x20001b30

08000c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20001b30 	.word	0x20001b30

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4906      	ldr	r1, [pc, #24]	; (8000d18 <__NVIC_EnableIRQ+0x34>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff90 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff2d 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff42 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff35 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa2 	bl	8000dd4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e043      	b.n	8000f3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_DMA_Init+0xa8>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <HAL_DMA_Init+0xac>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	009a      	lsls	r2, r3, #2
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <HAL_DMA_Init+0xb0>)
 8000ece:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ee6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	bffdfff8 	.word	0xbffdfff8
 8000f48:	cccccccd 	.word	0xcccccccd
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d101      	bne.n	8000f70 <HAL_DMA_Start_IT+0x20>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e04a      	b.n	8001006 <HAL_DMA_Start_IT+0xb6>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d13a      	bne.n	8000ff8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2202      	movs	r2, #2
 8000f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0201 	bic.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f938 	bl	800121c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 020e 	orr.w	r2, r2, #14
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e00f      	b.n	8000fe6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0204 	bic.w	r2, r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 020a 	orr.w	r2, r2, #10
 8000fe4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e005      	b.n	8001004 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001000:	2302      	movs	r3, #2
 8001002:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001004:	7dfb      	ldrb	r3, [r7, #23]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2204      	movs	r2, #4
 800102e:	409a      	lsls	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d04f      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xc8>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	d04a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	2b00      	cmp	r3, #0
 800104e:	d107      	bne.n	8001060 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a66      	ldr	r2, [pc, #408]	; (8001200 <HAL_DMA_IRQHandler+0x1f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d029      	beq.n	80010be <HAL_DMA_IRQHandler+0xae>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_DMA_IRQHandler+0x1f4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d022      	beq.n	80010ba <HAL_DMA_IRQHandler+0xaa>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a63      	ldr	r2, [pc, #396]	; (8001208 <HAL_DMA_IRQHandler+0x1f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xa4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a62      	ldr	r2, [pc, #392]	; (800120c <HAL_DMA_IRQHandler+0x1fc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d012      	beq.n	80010ae <HAL_DMA_IRQHandler+0x9e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a60      	ldr	r2, [pc, #384]	; (8001210 <HAL_DMA_IRQHandler+0x200>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00a      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x98>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a5f      	ldr	r2, [pc, #380]	; (8001214 <HAL_DMA_IRQHandler+0x204>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <HAL_DMA_IRQHandler+0x92>
 800109c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a0:	e00e      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010a6:	e00b      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010ac:	e008      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b2:	e005      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	e002      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	e000      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010be:	2304      	movs	r3, #4
 80010c0:	4a55      	ldr	r2, [pc, #340]	; (8001218 <HAL_DMA_IRQHandler+0x208>)
 80010c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8094 	beq.w	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010d6:	e08e      	b.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2202      	movs	r2, #2
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d056      	beq.n	8001196 <HAL_DMA_IRQHandler+0x186>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d051      	beq.n	8001196 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020a 	bic.w	r2, r2, #10
 800110e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a38      	ldr	r2, [pc, #224]	; (8001200 <HAL_DMA_IRQHandler+0x1f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d029      	beq.n	8001176 <HAL_DMA_IRQHandler+0x166>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a37      	ldr	r2, [pc, #220]	; (8001204 <HAL_DMA_IRQHandler+0x1f4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d022      	beq.n	8001172 <HAL_DMA_IRQHandler+0x162>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a35      	ldr	r2, [pc, #212]	; (8001208 <HAL_DMA_IRQHandler+0x1f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01a      	beq.n	800116c <HAL_DMA_IRQHandler+0x15c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_DMA_IRQHandler+0x1fc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d012      	beq.n	8001166 <HAL_DMA_IRQHandler+0x156>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <HAL_DMA_IRQHandler+0x200>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00a      	beq.n	8001160 <HAL_DMA_IRQHandler+0x150>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a31      	ldr	r2, [pc, #196]	; (8001214 <HAL_DMA_IRQHandler+0x204>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d102      	bne.n	800115a <HAL_DMA_IRQHandler+0x14a>
 8001154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001158:	e00e      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 800115a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800115e:	e00b      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001164:	e008      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	e005      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 800116c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001170:	e002      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001172:	2320      	movs	r3, #32
 8001174:	e000      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001176:	2302      	movs	r3, #2
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_DMA_IRQHandler+0x208>)
 800117a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001194:	e02f      	b.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2208      	movs	r2, #8
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d028      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d023      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
    }
  }
  return;
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020008 	.word	0x40020008
 8001204:	4002001c 	.word	0x4002001c
 8001208:	40020030 	.word	0x40020030
 800120c:	40020044 	.word	0x40020044
 8001210:	40020058 	.word	0x40020058
 8001214:	4002006c 	.word	0x4002006c
 8001218:	40020000 	.word	0x40020000

0800121c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d108      	bne.n	800125c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800125a:	e007      	b.n	800126c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	; 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e169      	b.n	8001560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800128c:	2201      	movs	r2, #1
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8158 	bne.w	800155a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a9a      	ldr	r2, [pc, #616]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d05e      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012b4:	4a98      	ldr	r2, [pc, #608]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d875      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ba:	4a98      	ldr	r2, [pc, #608]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d058      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012c0:	4a96      	ldr	r2, [pc, #600]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d86f      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012c6:	4a96      	ldr	r2, [pc, #600]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d052      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012cc:	4a94      	ldr	r2, [pc, #592]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d869      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012d2:	4a94      	ldr	r2, [pc, #592]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d04c      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012d8:	4a92      	ldr	r2, [pc, #584]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d863      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012de:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d046      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d85d      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d82a      	bhi.n	8001344 <HAL_GPIO_Init+0xcc>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d859      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <HAL_GPIO_Init+0x80>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001373 	.word	0x08001373
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800135f 	.word	0x0800135f
 8001304:	080013a1 	.word	0x080013a1
 8001308:	080013a7 	.word	0x080013a7
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013a7 	.word	0x080013a7
 8001324:	080013a7 	.word	0x080013a7
 8001328:	080013a7 	.word	0x080013a7
 800132c:	080013a7 	.word	0x080013a7
 8001330:	080013a7 	.word	0x080013a7
 8001334:	080013a7 	.word	0x080013a7
 8001338:	080013a7 	.word	0x080013a7
 800133c:	08001355 	.word	0x08001355
 8001340:	08001369 	.word	0x08001369
 8001344:	4a79      	ldr	r2, [pc, #484]	; (800152c <HAL_GPIO_Init+0x2b4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134a:	e02c      	b.n	80013a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e029      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	3304      	adds	r3, #4
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e024      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	3308      	adds	r3, #8
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e01f      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	330c      	adds	r3, #12
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e01a      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137a:	2304      	movs	r3, #4
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e013      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	611a      	str	r2, [r3, #16]
          break;
 8001392:	e009      	b.n	80013a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	615a      	str	r2, [r3, #20]
          break;
 800139e:	e003      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          break;
 80013a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d801      	bhi.n	80013b2 <HAL_GPIO_Init+0x13a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_Init+0x13e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d802      	bhi.n	80013c4 <HAL_GPIO_Init+0x14c>
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x152>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3b08      	subs	r3, #8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	210f      	movs	r1, #15
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80b1 	beq.w	800155a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a40      	ldr	r2, [pc, #256]	; (8001538 <HAL_GPIO_Init+0x2c0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_GPIO_Init+0x2c4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00d      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_GPIO_Init+0x2c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001454:	2303      	movs	r3, #3
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001458:	2304      	movs	r3, #4
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001464:	2300      	movs	r3, #0
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001476:	492f      	ldr	r1, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	492c      	ldr	r1, [pc, #176]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4928      	ldr	r1, [pc, #160]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	491e      	ldr	r1, [pc, #120]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	4918      	ldr	r1, [pc, #96]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4914      	ldr	r1, [pc, #80]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	490e      	ldr	r1, [pc, #56]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e021      	b.n	800155a <HAL_GPIO_Init+0x2e2>
 8001516:	bf00      	nop
 8001518:	10320000 	.word	0x10320000
 800151c:	10310000 	.word	0x10310000
 8001520:	10220000 	.word	0x10220000
 8001524:	10210000 	.word	0x10210000
 8001528:	10120000 	.word	0x10120000
 800152c:	10110000 	.word	0x10110000
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000
 8001544:	40011400 	.word	0x40011400
 8001548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_GPIO_Init+0x304>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	43db      	mvns	r3, r3
 8001554:	4909      	ldr	r1, [pc, #36]	; (800157c <HAL_GPIO_Init+0x304>)
 8001556:	4013      	ands	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f47f ae8e 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	; 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015be:	787b      	ldrb	r3, [r7, #1]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	041a      	lsls	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e26c      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001600:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00c      	beq.n	8001626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800160c:	4b8f      	ldr	r3, [pc, #572]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d112      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
 8001618:	4b8c      	ldr	r3, [pc, #560]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b89      	ldr	r3, [pc, #548]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06c      	beq.n	800170c <HAL_RCC_OscConfig+0x12c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d168      	bne.n	800170c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e246      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x76>
 8001648:	4b80      	ldr	r3, [pc, #512]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a7f      	ldr	r2, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e02e      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7a      	ldr	r2, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a77      	ldr	r2, [pc, #476]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0xbc>
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a71      	ldr	r2, [pc, #452]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 800169c:	4b6b      	ldr	r3, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a67      	ldr	r2, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fad6 	bl	8000c6c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fad2 	bl	8000c6c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1fa      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe4>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fac2 	bl	8000c6c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fabe 	bl	8000c6c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1e6      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x10c>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001726:	4b49      	ldr	r3, [pc, #292]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x18c>
 8001732:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1ba      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4939      	ldr	r1, [pc, #228]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e03a      	b.n	80017e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fa77 	bl	8000c6c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fa73 	bl	8000c6c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e19b      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4927      	ldr	r1, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x270>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa56 	bl	8000c6c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c4:	f7ff fa52 	bl	8000c6c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e17a      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03a      	beq.n	8001864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d019      	beq.n	800182a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa36 	bl	8000c6c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fa32 	bl	8000c6c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e15a      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_RCC_OscConfig+0x26c>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f000 fad8 	bl	8001dd8 <RCC_Delay>
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fa1c 	bl	8000c6c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001836:	e00f      	b.n	8001858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fa18 	bl	8000c6c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d908      	bls.n	8001858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e140      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	42420000 	.word	0x42420000
 8001854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b9e      	ldr	r3, [pc, #632]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e9      	bne.n	8001838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a6 	beq.w	80019be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b97      	ldr	r3, [pc, #604]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10d      	bne.n	800189e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b94      	ldr	r3, [pc, #592]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a93      	ldr	r2, [pc, #588]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b91      	ldr	r3, [pc, #580]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189a:	2301      	movs	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a8a      	ldr	r2, [pc, #552]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b6:	f7ff f9d9 	bl	8000c6c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7ff f9d5 	bl	8000c6c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0fd      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x312>
 80018e4:	4b7b      	ldr	r3, [pc, #492]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e02d      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x334>
 80018fa:	4b76      	ldr	r3, [pc, #472]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a75      	ldr	r2, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a72      	ldr	r2, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6213      	str	r3, [r2, #32]
 8001912:	e01c      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x356>
 800191c:	4b6d      	ldr	r3, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a6c      	ldr	r2, [pc, #432]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a69      	ldr	r2, [pc, #420]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e00b      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 8001936:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a66      	ldr	r2, [pc, #408]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a63      	ldr	r2, [pc, #396]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff f989 	bl	8000c6c <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff f985 	bl	8000c6c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0ab      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ee      	beq.n	800195e <HAL_RCC_OscConfig+0x37e>
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f973 	bl	8000c6c <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f96f 	bl	8000c6c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e095      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ee      	bne.n	800198a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a47      	ldr	r2, [pc, #284]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8081 	beq.w	8001aca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d061      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d146      	bne.n	8001a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019dc:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <HAL_RCC_OscConfig+0x4fc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f943 	bl	8000c6c <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f93f 	bl	8000c6c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e067      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d108      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a19      	ldr	r1, [r3, #32]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	430b      	orrs	r3, r1
 8001a36:	4927      	ldr	r1, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x4fc>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff f913 	bl	8000c6c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f90f 	bl	8000c6c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e037      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46a>
 8001a68:	e02f      	b.n	8001aca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_RCC_OscConfig+0x4fc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f8fc 	bl	8000c6c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f8f8 	bl	8000c6c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e020      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x498>
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e013      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	42420060 	.word	0x42420060

08001ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d0      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4965      	ldr	r1, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d040      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e073      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e06b      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4936      	ldr	r1, [pc, #216]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f84c 	bl	8000c6c <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f848 	bl	8000c6c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e053      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d210      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4922      	ldr	r1, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f821 	bl	8001cb4 <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1cc>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ffaa 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08005494 	.word	0x08005494
 8001cac:	20000074 	.word	0x20000074
 8001cb0:	20000078 	.word	0x20000078

08001cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cbc:	1d3c      	adds	r4, r7, #4
 8001cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cc4:	f240 2301 	movw	r3, #513	; 0x201
 8001cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x46>
 8001cf2:	e02d      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf6:	623b      	str	r3, [r7, #32]
      break;
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	0c9b      	lsrs	r3, r3, #18
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d06:	4413      	add	r3, r2
 8001d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0c5b      	lsrs	r3, r3, #17
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d26:	4413      	add	r3, r2
 8001d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d32:	fb02 f203 	mul.w	r2, r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	e004      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	623b      	str	r3, [r7, #32]
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d52:	623b      	str	r3, [r7, #32]
      break;
 8001d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc90      	pop	{r4, r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	080053e8 	.word	0x080053e8
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	007a1200 	.word	0x007a1200
 8001d70:	003d0900 	.word	0x003d0900

08001d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000074 	.word	0x20000074

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d8c:	f7ff fff2 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080054a4 	.word	0x080054a4

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	0adb      	lsrs	r3, r3, #11
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	080054a4 	.word	0x080054a4

08001dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <RCC_Delay+0x34>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <RCC_Delay+0x38>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a5b      	lsrs	r3, r3, #9
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df4:	bf00      	nop
  }
  while (Delay --);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	60fa      	str	r2, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f9      	bne.n	8001df4 <RCC_Delay+0x1c>
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000074 	.word	0x20000074
 8001e10:	10624dd3 	.word	0x10624dd3

08001e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e03f      	b.n	8001ea6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fdb2 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2224      	movs	r2, #36	; 0x24
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fab1 	bl	80023c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b08a      	sub	sp, #40	; 0x28
 8001eb2:	af02      	add	r7, sp, #8
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d17c      	bne.n	8001fc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_UART_Transmit+0x2c>
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e075      	b.n	8001fca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_UART_Transmit+0x3e>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e06e      	b.n	8001fca <HAL_UART_Transmit+0x11c>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2221      	movs	r2, #33	; 0x21
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f02:	f7fe feb3 	bl	8000c6c <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1c:	d108      	bne.n	8001f30 <HAL_UART_Transmit+0x82>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d104      	bne.n	8001f30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	e003      	b.n	8001f38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f40:	e02a      	b.n	8001f98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f946 	bl	80021de <UART_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e036      	b.n	8001fca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10b      	bne.n	8001f7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	3302      	adds	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	e007      	b.n	8001f8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1cf      	bne.n	8001f42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2140      	movs	r1, #64	; 0x40
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f916 	bl	80021de <UART_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e006      	b.n	8001fca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d11d      	bne.n	8002028 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_UART_Receive_DMA+0x26>
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e016      	b.n	800202a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_UART_Receive_DMA+0x38>
 8002006:	2302      	movs	r3, #2
 8002008:	e00f      	b.n	800202a <HAL_UART_Receive_DMA+0x58>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	461a      	mov	r2, r3
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f928 	bl	8002274 <UART_Start_Receive_DMA>
 8002024:	4603      	mov	r3, r0
 8002026:	e000      	b.n	800202a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d12a      	bne.n	80020f0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ae:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ce:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0210 	bic.w	r2, r2, #16
 80020ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020fc:	4619      	mov	r1, r3
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff ffb2 	bl	8002068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002104:	e002      	b.n	800210c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ff93 	bl	8002032 <HAL_UART_RxCpltCallback>
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ff97 	bl	8002068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800213a:	e002      	b.n	8002142 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ff81 	bl	8002044 <HAL_UART_RxHalfCpltCallback>
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b21      	cmp	r3, #33	; 0x21
 800217c:	d108      	bne.n	8002190 <UART_DMAError+0x46>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800218a:	68b8      	ldr	r0, [r7, #8]
 800218c:	f000 f8d6 	bl	800233c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b22      	cmp	r3, #34	; 0x22
 80021b0:	d108      	bne.n	80021c4 <UART_DMAError+0x7a>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80021be:	68b8      	ldr	r0, [r7, #8]
 80021c0:	f000 f8d1 	bl	8002366 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f043 0210 	orr.w	r2, r3, #16
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021d0:	68b8      	ldr	r0, [r7, #8]
 80021d2:	f7ff ff40 	bl	8002056 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ee:	e02c      	b.n	800224a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f6:	d028      	beq.n	800224a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <UART_WaitOnFlagUntilTimeout+0x30>
 80021fe:	f7fe fd35 	bl	8000c6c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	429a      	cmp	r2, r3
 800220c:	d21d      	bcs.n	800224a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800221c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e00f      	b.n	800226a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4013      	ands	r3, r2
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	429a      	cmp	r2, r3
 8002266:	d0c3      	beq.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2222      	movs	r2, #34	; 0x22
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	4a23      	ldr	r2, [pc, #140]	; (8002330 <UART_Start_Receive_DMA+0xbc>)
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <UART_Start_Receive_DMA+0xc0>)
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <UART_Start_Receive_DMA+0xc4>)
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	2200      	movs	r2, #0
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	f7fe fe3c 	bl	8000f50 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002304:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002324:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	0800207f 	.word	0x0800207f
 8002334:	08002115 	.word	0x08002115
 8002338:	0800214b 	.word	0x0800214b

0800233c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002352:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800237c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0210 	bic.w	r2, r2, #16
 80023a4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023fa:	f023 030c 	bic.w	r3, r3, #12
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_SetConfig+0x114>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff fcc2 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	e002      	b.n	8002436 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002430:	f7ff fcaa 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	0119      	lsls	r1, r3, #4
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fbb2 f2f3 	udiv	r2, r2, r3
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <UART_SetConfig+0x118>)
 800246e:	fba3 0302 	umull	r0, r3, r3, r2
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <UART_SetConfig+0x118>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	4419      	add	r1, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <UART_SetConfig+0x118>)
 80024a6:	fba3 0302 	umull	r0, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <UART_SetConfig+0x118>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	440a      	add	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013800 	.word	0x40013800
 80024d8:	51eb851f 	.word	0x51eb851f

080024dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e2:	f3ef 8305 	mrs	r3, IPSR
 80024e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80024e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ee:	f3ef 8310 	mrs	r3, PRIMASK
 80024f2:	607b      	str	r3, [r7, #4]
  return(result);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <osKernelInitialize+0x32>
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <osKernelInitialize+0x60>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d109      	bne.n	8002516 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002502:	f3ef 8311 	mrs	r3, BASEPRI
 8002506:	603b      	str	r3, [r7, #0]
  return(result);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800250e:	f06f 0305 	mvn.w	r3, #5
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e00c      	b.n	8002530 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <osKernelInitialize+0x60>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <osKernelInitialize+0x60>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e002      	b.n	8002530 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	2000012c 	.word	0x2000012c

08002540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002546:	f3ef 8305 	mrs	r3, IPSR
 800254a:	60bb      	str	r3, [r7, #8]
  return(result);
 800254c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002552:	f3ef 8310 	mrs	r3, PRIMASK
 8002556:	607b      	str	r3, [r7, #4]
  return(result);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <osKernelStart+0x32>
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <osKernelStart+0x64>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d109      	bne.n	800257a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002566:	f3ef 8311 	mrs	r3, BASEPRI
 800256a:	603b      	str	r3, [r7, #0]
  return(result);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002572:	f06f 0305 	mvn.w	r3, #5
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e00e      	b.n	8002598 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <osKernelStart+0x64>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <osKernelStart+0x64>)
 8002584:	2202      	movs	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002588:	f001 facc 	bl	8003b24 <vTaskStartScheduler>
      stat = osOK;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e002      	b.n	8002598 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000012c 	.word	0x2000012c

080025a8 <osKernelGetSysTimerCount>:

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

uint32_t osKernelGetSysTimerCount (void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025c0:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  portDISABLE_INTERRUPTS();

  ticks = xTaskGetTickCount();
 80025c2:	f001 fbc1 	bl	8003d48 <xTaskGetTickCount>
 80025c6:	60f8      	str	r0, [r7, #12]

  val = ticks * ( configCPU_CLOCK_HZ / configTICK_RATE_HZ );
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <osKernelGetSysTimerCount+0x4c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <osKernelGetSysTimerCount+0x50>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	095a      	lsrs	r2, r3, #5
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	2300      	movs	r3, #0
 80025de:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025e6:	bf00      	nop
  portENABLE_INTERRUPTS();

  return (val);
 80025e8:	68bb      	ldr	r3, [r7, #8]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000074 	.word	0x20000074
 80025f8:	51eb851f 	.word	0x51eb851f

080025fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b092      	sub	sp, #72	; 0x48
 8002600:	af04      	add	r7, sp, #16
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800260c:	f3ef 8305 	mrs	r3, IPSR
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 8094 	bne.w	8002742 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261a:	f3ef 8310 	mrs	r3, PRIMASK
 800261e:	623b      	str	r3, [r7, #32]
  return(result);
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 808d 	bne.w	8002742 <osThreadNew+0x146>
 8002628:	4b48      	ldr	r3, [pc, #288]	; (800274c <osThreadNew+0x150>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d106      	bne.n	800263e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002630:	f3ef 8311 	mrs	r3, BASEPRI
 8002634:	61fb      	str	r3, [r7, #28]
  return(result);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8082 	bne.w	8002742 <osThreadNew+0x146>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d07e      	beq.n	8002742 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002648:	2318      	movs	r3, #24
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800264c:	2300      	movs	r3, #0
 800264e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002650:	f107 031b 	add.w	r3, r7, #27
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d045      	beq.n	80026ee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <osThreadNew+0x74>
        name = attr->name;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <osThreadNew+0x9a>
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2b38      	cmp	r3, #56	; 0x38
 8002688:	d805      	bhi.n	8002696 <osThreadNew+0x9a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <osThreadNew+0x9e>
        return (NULL);
 8002696:	2300      	movs	r3, #0
 8002698:	e054      	b.n	8002744 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00e      	beq.n	80026d0 <osThreadNew+0xd4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b5b      	cmp	r3, #91	; 0x5b
 80026b8:	d90a      	bls.n	80026d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <osThreadNew+0xd4>
        mem = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ce:	e010      	b.n	80026f2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <osThreadNew+0xf6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d108      	bne.n	80026f2 <osThreadNew+0xf6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <osThreadNew+0xf6>
          mem = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ec:	e001      	b.n	80026f2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d110      	bne.n	800271a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002700:	9202      	str	r2, [sp, #8]
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f001 f83c 	bl	800378c <xTaskCreateStatic>
 8002714:	4603      	mov	r3, r0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e013      	b.n	8002742 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d110      	bne.n	8002742 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	b29a      	uxth	r2, r3
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f001 f886 	bl	8003844 <xTaskCreate>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <osThreadNew+0x146>
          hTask = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002742:	697b      	ldr	r3, [r7, #20]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000012c 	.word	0x2000012c

08002750 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002758:	f3ef 8305 	mrs	r3, IPSR
 800275c:	613b      	str	r3, [r7, #16]
  return(result);
 800275e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
 8002768:	60fb      	str	r3, [r7, #12]
  return(result);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <osDelay+0x34>
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <osDelay+0x58>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d109      	bne.n	800278c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002778:	f3ef 8311 	mrs	r3, BASEPRI
 800277c:	60bb      	str	r3, [r7, #8]
  return(result);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <osDelay+0x3c>
    stat = osErrorISR;
 8002784:	f06f 0305 	mvn.w	r3, #5
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e007      	b.n	800279c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f001 f990 	bl	8003abc <vTaskDelay>
    }
  }

  return (stat);
 800279c:	697b      	ldr	r3, [r7, #20]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000012c 	.word	0x2000012c

080027ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027bc:	f3ef 8305 	mrs	r3, IPSR
 80027c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d16f      	bne.n	80028a8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8310 	mrs	r3, PRIMASK
 80027cc:	617b      	str	r3, [r7, #20]
  return(result);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d169      	bne.n	80028a8 <osMessageQueueNew+0xfc>
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <osMessageQueueNew+0x108>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d105      	bne.n	80027e8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027dc:	f3ef 8311 	mrs	r3, BASEPRI
 80027e0:	613b      	str	r3, [r7, #16]
  return(result);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d15f      	bne.n	80028a8 <osMessageQueueNew+0xfc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d05c      	beq.n	80028a8 <osMessageQueueNew+0xfc>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d059      	beq.n	80028a8 <osMessageQueueNew+0xfc>
    mem = -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d029      	beq.n	8002854 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <osMessageQueueNew+0x82>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b4f      	cmp	r3, #79	; 0x4f
 800280e:	d90e      	bls.n	800282e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <osMessageQueueNew+0x82>
        mem = 1;
 8002828:	2301      	movs	r3, #1
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	e014      	b.n	8002858 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d110      	bne.n	8002858 <osMessageQueueNew+0xac>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <osMessageQueueNew+0xac>
          mem = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	e001      	b.n	8002858 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10b      	bne.n	8002876 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2100      	movs	r1, #0
 8002868:	9100      	str	r1, [sp, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fa53 	bl	8002d18 <xQueueGenericCreateStatic>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24
 8002874:	e008      	b.n	8002888 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800287c:	2200      	movs	r2, #0
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fac0 	bl	8002e06 <xQueueGenericCreate>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e001      	b.n	80028a0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80028a0:	69f9      	ldr	r1, [r7, #28]
 80028a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028a4:	f000 ff16 	bl	80036d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000012c 	.word	0x2000012c

080028b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d0:	f3ef 8305 	mrs	r3, IPSR
 80028d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80028d6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028dc:	f3ef 8310 	mrs	r3, PRIMASK
 80028e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <osMessageQueuePut+0x44>
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <osMessageQueuePut+0xe0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d12e      	bne.n	800294e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028f0:	f3ef 8311 	mrs	r3, BASEPRI
 80028f4:	617b      	str	r3, [r7, #20]
  return(result);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d028      	beq.n	800294e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <osMessageQueuePut+0x56>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <osMessageQueuePut+0x56>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800290e:	f06f 0303 	mvn.w	r3, #3
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002914:	e039      	b.n	800298a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800291a:	f107 0210 	add.w	r2, r7, #16
 800291e:	2300      	movs	r3, #0
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6a38      	ldr	r0, [r7, #32]
 8002924:	f000 fbce 	bl	80030c4 <xQueueGenericSendFromISR>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d003      	beq.n	8002936 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800292e:	f06f 0302 	mvn.w	r3, #2
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002934:	e029      	b.n	800298a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d026      	beq.n	800298a <osMessageQueuePut+0xd2>
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <osMessageQueuePut+0xe4>)
 800293e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800294c:	e01d      	b.n	800298a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <osMessageQueuePut+0xa2>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800295a:	f06f 0303 	mvn.w	r3, #3
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
 8002960:	e014      	b.n	800298c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002962:	2300      	movs	r3, #0
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	6a38      	ldr	r0, [r7, #32]
 800296a:	f000 faad 	bl	8002ec8 <xQueueGenericSend>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	d00b      	beq.n	800298c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800297a:	f06f 0301 	mvn.w	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e004      	b.n	800298c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002982:	f06f 0302 	mvn.w	r3, #2
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e000      	b.n	800298c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800298a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800298e:	4618      	mov	r0, r3
 8002990:	3728      	adds	r7, #40	; 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000012c 	.word	0x2000012c
 800299c:	e000ed04 	.word	0xe000ed04

080029a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029b6:	f3ef 8305 	mrs	r3, IPSR
 80029ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80029bc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c2:	f3ef 8310 	mrs	r3, PRIMASK
 80029c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <osMessageQueueGet+0x42>
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <osMessageQueueGet+0xdc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d12e      	bne.n	8002a34 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029d6:	f3ef 8311 	mrs	r3, BASEPRI
 80029da:	617b      	str	r3, [r7, #20]
  return(result);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d028      	beq.n	8002a34 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <osMessageQueueGet+0x54>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <osMessageQueueGet+0x54>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80029f4:	f06f 0303 	mvn.w	r3, #3
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80029fa:	e038      	b.n	8002a6e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	461a      	mov	r2, r3
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	6a38      	ldr	r0, [r7, #32]
 8002a0a:	f000 fcd3 	bl	80033b4 <xQueueReceiveFromISR>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d003      	beq.n	8002a1c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002a14:	f06f 0302 	mvn.w	r3, #2
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a1a:	e028      	b.n	8002a6e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d025      	beq.n	8002a6e <osMessageQueueGet+0xce>
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <osMessageQueueGet+0xe0>)
 8002a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a32:	e01c      	b.n	8002a6e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <osMessageQueueGet+0xa0>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002a40:	f06f 0303 	mvn.w	r3, #3
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e013      	b.n	8002a70 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	6a38      	ldr	r0, [r7, #32]
 8002a4e:	f000 fbd1 	bl	80031f4 <xQueueReceive>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d00b      	beq.n	8002a70 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002a5e:	f06f 0301 	mvn.w	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	e004      	b.n	8002a70 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002a66:	f06f 0302 	mvn.w	r3, #2
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	e000      	b.n	8002a70 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000012c 	.word	0x2000012c
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a06      	ldr	r2, [pc, #24]	; (8002aac <vApplicationGetIdleTaskMemory+0x28>)
 8002a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000130 	.word	0x20000130
 8002ab0:	2000018c 	.word	0x2000018c

08002ab4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ac4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <vApplicationGetTimerTaskMemory+0x30>)
 8002aca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000038c 	.word	0x2000038c
 8002ae4:	200003e8 	.word	0x200003e8

08002ae8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0208 	add.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f103 0208 	add.w	r2, r3, #8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f103 0208 	add.w	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9a:	d103      	bne.n	8002ba4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e00c      	b.n	8002bbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e002      	b.n	8002bb2 <vListInsert+0x2e>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d2f6      	bcs.n	8002bac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6852      	ldr	r2, [r2, #4]
 8002c14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d103      	bne.n	8002c28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <xQueueGenericReset+0x2a>
	__asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	60bb      	str	r3, [r7, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	e7fe      	b.n	8002c70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c72:	f002 f883 	bl	8004d7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	441a      	add	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	68f9      	ldr	r1, [r7, #12]
 8002ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	441a      	add	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	22ff      	movs	r2, #255	; 0xff
 8002cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	22ff      	movs	r2, #255	; 0xff
 8002cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d114      	bne.n	8002cf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01a      	beq.n	8002d06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3310      	adds	r3, #16
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f9af 	bl	8004038 <xTaskRemoveFromEventList>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <xQueueGenericReset+0xcc>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	e009      	b.n	8002d06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fef6 	bl	8002ae8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3324      	adds	r3, #36	; 0x24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fef1 	bl	8002ae8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d06:	f002 f869 	bl	8004ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	; 0x38
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <xQueueGenericCreateStatic+0x52>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <xQueueGenericCreateStatic+0x56>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueGenericCreateStatic+0x58>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	623b      	str	r3, [r7, #32]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <xQueueGenericCreateStatic+0x7e>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <xQueueGenericCreateStatic+0x82>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <xQueueGenericCreateStatic+0x84>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	61fb      	str	r3, [r7, #28]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002db6:	2350      	movs	r3, #80	; 0x50
 8002db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b50      	cmp	r3, #80	; 0x50
 8002dbe:	d00a      	beq.n	8002dd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61bb      	str	r3, [r7, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002de8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f843 	bl	8002e82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3730      	adds	r7, #48	; 0x30
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08a      	sub	sp, #40	; 0x28
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	613b      	str	r3, [r7, #16]
}
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e004      	b.n	8002e46 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3350      	adds	r3, #80	; 0x50
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 f896 	bl	8004f7c <pvPortMalloc>
 8002e50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	3350      	adds	r3, #80	; 0x50
 8002e5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e66:	79fa      	ldrb	r2, [r7, #7]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f805 	bl	8002e82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e78:	69bb      	ldr	r3, [r7, #24]
	}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e002      	b.n	8002ea4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	69b8      	ldr	r0, [r7, #24]
 8002eb4:	f7ff fec8 	bl	8002c48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericSend+0x32>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <xQueueGenericSend+0x40>
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <xQueueGenericSend+0x44>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <xQueueGenericSend+0x46>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <xQueueGenericSend+0x60>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSend+0x6e>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <xQueueGenericSend+0x72>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueGenericSend+0x74>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	623b      	str	r3, [r7, #32]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f56:	f001 fa31 	bl	80043bc <xTaskGetSchedulerState>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <xQueueGenericSend+0x9e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <xQueueGenericSend+0xa2>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <xQueueGenericSend+0xa4>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	61fb      	str	r3, [r7, #28]
}
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f86:	f001 fef9 	bl	8004d7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <xQueueGenericSend+0xd4>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d129      	bne.n	8002ff0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa2:	f000 fa87 	bl	80034b4 <prvCopyDataToQueue>
 8002fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 f83f 	bl	8004038 <xTaskRemoveFromEventList>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fc0:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <xQueueGenericSend+0x1f8>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	e00a      	b.n	8002fe8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fd8:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <xQueueGenericSend+0x1f8>)
 8002fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fe8:	f001 fef8 	bl	8004ddc <vPortExitCritical>
				return pdPASS;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e063      	b.n	80030b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ff6:	f001 fef1 	bl	8004ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e05c      	b.n	80030b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4618      	mov	r0, r3
 800300a:	f001 f879 	bl	8004100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003012:	f001 fee3 	bl	8004ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003016:	f000 fdeb 	bl	8003bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800301a:	f001 feaf 	bl	8004d7c <vPortEnterCritical>
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003024:	b25b      	sxtb	r3, r3
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d103      	bne.n	8003034 <xQueueGenericSend+0x16c>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303a:	b25b      	sxtb	r3, r3
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d103      	bne.n	800304a <xQueueGenericSend+0x182>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800304a:	f001 fec7 	bl	8004ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800304e:	1d3a      	adds	r2, r7, #4
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f001 f868 	bl	800412c <xTaskCheckForTimeOut>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d124      	bne.n	80030ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003064:	f000 fb1e 	bl	80036a4 <prvIsQueueFull>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	3310      	adds	r3, #16
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ff8e 	bl	8003f98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800307c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307e:	f000 faa9 	bl	80035d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003082:	f000 fdc3 	bl	8003c0c <xTaskResumeAll>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f af7c 	bne.w	8002f86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <xQueueGenericSend+0x1f8>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	e772      	b.n	8002f86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a2:	f000 fa97 	bl	80035d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030a6:	f000 fdb1 	bl	8003c0c <xTaskResumeAll>
 80030aa:	e76c      	b.n	8002f86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ae:	f000 fa91 	bl	80035d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030b2:	f000 fdab 	bl	8003c0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030b6:	2300      	movs	r3, #0
		}
	}
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3738      	adds	r7, #56	; 0x38
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	e000ed04 	.word	0xe000ed04

080030c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08e      	sub	sp, #56	; 0x38
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <xQueueGenericSendFromISR+0x3c>
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <xQueueGenericSendFromISR+0x40>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <xQueueGenericSendFromISR+0x42>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	623b      	str	r3, [r7, #32]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d103      	bne.n	800312e <xQueueGenericSendFromISR+0x6a>
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <xQueueGenericSendFromISR+0x6e>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <xQueueGenericSendFromISR+0x70>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	61fb      	str	r3, [r7, #28]
}
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800314e:	f001 fed7 	bl	8004f00 <vPortValidateInterruptPriority>
	__asm volatile
 8003152:	f3ef 8211 	mrs	r2, BASEPRI
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	61ba      	str	r2, [r7, #24]
 8003168:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800316a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <xQueueGenericSendFromISR+0xbc>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d12c      	bne.n	80031da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003190:	f000 f990 	bl	80034b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003194:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d112      	bne.n	80031c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	3324      	adds	r3, #36	; 0x24
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 ff44 	bl	8004038 <xTaskRemoveFromEventList>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031c8:	3301      	adds	r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	b25a      	sxtb	r2, r3
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031d4:	2301      	movs	r3, #1
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80031d8:	e001      	b.n	80031de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f383 8811 	msr	BASEPRI, r3
}
 80031e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3738      	adds	r7, #56	; 0x38
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <xQueueReceive+0x30>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	623b      	str	r3, [r7, #32]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <xQueueReceive+0x3e>
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <xQueueReceive+0x42>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueReceive+0x44>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueReceive+0x5e>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	61fb      	str	r3, [r7, #28]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003252:	f001 f8b3 	bl	80043bc <xTaskGetSchedulerState>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xQueueReceive+0x6e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueReceive+0x72>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueReceive+0x74>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueReceive+0x8e>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61bb      	str	r3, [r7, #24]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003282:	f001 fd7b 	bl	8004d7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01f      	beq.n	80032d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003296:	f000 f977 	bl	8003588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00f      	beq.n	80032ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	3310      	adds	r3, #16
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fec2 	bl	8004038 <xTaskRemoveFromEventList>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <xQueueReceive+0x1bc>)
 80032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032ca:	f001 fd87 	bl	8004ddc <vPortExitCritical>
				return pdPASS;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e069      	b.n	80033a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d103      	bne.n	80032e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032d8:	f001 fd80 	bl	8004ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032dc:	2300      	movs	r3, #0
 80032de:	e062      	b.n	80033a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032e6:	f107 0310 	add.w	r3, r7, #16
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff08 	bl	8004100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032f0:	2301      	movs	r3, #1
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032f4:	f001 fd72 	bl	8004ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032f8:	f000 fc7a 	bl	8003bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032fc:	f001 fd3e 	bl	8004d7c <vPortEnterCritical>
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d103      	bne.n	8003316 <xQueueReceive+0x122>
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800331c:	b25b      	sxtb	r3, r3
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d103      	bne.n	800332c <xQueueReceive+0x138>
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800332c:	f001 fd56 	bl	8004ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003330:	1d3a      	adds	r2, r7, #4
 8003332:	f107 0310 	add.w	r3, r7, #16
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fef7 	bl	800412c <xTaskCheckForTimeOut>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d123      	bne.n	800338c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003346:	f000 f997 	bl	8003678 <prvIsQueueEmpty>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fe1d 	bl	8003f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800335e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003360:	f000 f938 	bl	80035d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003364:	f000 fc52 	bl	8003c0c <xTaskResumeAll>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d189      	bne.n	8003282 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <xQueueReceive+0x1bc>)
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	e780      	b.n	8003282 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003382:	f000 f927 	bl	80035d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003386:	f000 fc41 	bl	8003c0c <xTaskResumeAll>
 800338a:	e77a      	b.n	8003282 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800338c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338e:	f000 f921 	bl	80035d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003392:	f000 fc3b 	bl	8003c0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003398:	f000 f96e 	bl	8003678 <prvIsQueueEmpty>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f43f af6f 	beq.w	8003282 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3730      	adds	r7, #48	; 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	; 0x38
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	623b      	str	r3, [r7, #32]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <xQueueReceiveFromISR+0x3a>
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <xQueueReceiveFromISR+0x3e>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <xQueueReceiveFromISR+0x40>
 80033f2:	2300      	movs	r3, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61fb      	str	r3, [r7, #28]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800340e:	f001 fd77 	bl	8004f00 <vPortValidateInterruptPriority>
	__asm volatile
 8003412:	f3ef 8211 	mrs	r2, BASEPRI
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	61ba      	str	r2, [r7, #24]
 8003428:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800342a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02f      	beq.n	800349a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003448:	f000 f89e 	bl	8003588 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003454:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d112      	bne.n	8003484 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	3310      	adds	r3, #16
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fde4 	bl	8004038 <xTaskRemoveFromEventList>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e007      	b.n	8003494 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003488:	3301      	adds	r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	b25a      	sxtb	r2, r3
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003494:	2301      	movs	r3, #1
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
 8003498:	e001      	b.n	800349e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800349a:	2300      	movs	r3, #0
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f383 8811 	msr	BASEPRI, r3
}
 80034a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d14d      	bne.n	8003576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 ff8a 	bl	80043f8 <xTaskPriorityDisinherit>
 80034e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	e043      	b.n	8003576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d119      	bne.n	8003528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6898      	ldr	r0, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	461a      	mov	r2, r3
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	f001 ff38 	bl	8005374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	441a      	add	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d32b      	bcc.n	8003576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	e026      	b.n	8003576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68d8      	ldr	r0, [r3, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	461a      	mov	r2, r3
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	f001 ff1e 	bl	8005374 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	425b      	negs	r3, r3
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	425b      	negs	r3, r3
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d105      	bne.n	8003576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	3b01      	subs	r3, #1
 8003574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800357e:	697b      	ldr	r3, [r7, #20]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d018      	beq.n	80035cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d303      	bcc.n	80035bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	461a      	mov	r2, r3
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	f001 fed4 	bl	8005374 <memcpy>
	}
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035dc:	f001 fbce 	bl	8004d7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035e8:	e011      	b.n	800360e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d012      	beq.n	8003618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3324      	adds	r3, #36	; 0x24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fd1e 	bl	8004038 <xTaskRemoveFromEventList>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003602:	f000 fdf5 	bl	80041f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3b01      	subs	r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800360e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	dce9      	bgt.n	80035ea <prvUnlockQueue+0x16>
 8003616:	e000      	b.n	800361a <prvUnlockQueue+0x46>
					break;
 8003618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	22ff      	movs	r2, #255	; 0xff
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003622:	f001 fbdb 	bl	8004ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003626:	f001 fba9 	bl	8004d7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003632:	e011      	b.n	8003658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3310      	adds	r3, #16
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fcf9 	bl	8004038 <xTaskRemoveFromEventList>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800364c:	f000 fdd0 	bl	80041f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	3b01      	subs	r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800365c:	2b00      	cmp	r3, #0
 800365e:	dce9      	bgt.n	8003634 <prvUnlockQueue+0x60>
 8003660:	e000      	b.n	8003664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	22ff      	movs	r2, #255	; 0xff
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800366c:	f001 fbb6 	bl	8004ddc <vPortExitCritical>
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003680:	f001 fb7c 	bl	8004d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e001      	b.n	8003696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003696:	f001 fba1 	bl	8004ddc <vPortExitCritical>

	return xReturn;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036ac:	f001 fb66 	bl	8004d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d102      	bne.n	80036c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e001      	b.n	80036c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036c6:	f001 fb89 	bl	8004ddc <vPortExitCritical>

	return xReturn;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e014      	b.n	800370e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036e4:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <vQueueAddToRegistry+0x4c>)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036f0:	490b      	ldr	r1, [pc, #44]	; (8003720 <vQueueAddToRegistry+0x4c>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <vQueueAddToRegistry+0x4c>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003706:	e006      	b.n	8003716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3301      	adds	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b07      	cmp	r3, #7
 8003712:	d9e7      	bls.n	80036e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003714:	bf00      	nop
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	20001b34 	.word	0x20001b34

08003724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003734:	f001 fb22 	bl	8004d7c <vPortEnterCritical>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800373e:	b25b      	sxtb	r3, r3
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d103      	bne.n	800374e <vQueueWaitForMessageRestricted+0x2a>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003754:	b25b      	sxtb	r3, r3
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d103      	bne.n	8003764 <vQueueWaitForMessageRestricted+0x40>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003764:	f001 fb3a 	bl	8004ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3324      	adds	r3, #36	; 0x24
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fc31 	bl	8003fe0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f7ff ff28 	bl	80035d4 <prvUnlockQueue>
	}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08e      	sub	sp, #56	; 0x38
 8003790:	af04      	add	r7, sp, #16
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	623b      	str	r3, [r7, #32]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61fb      	str	r3, [r7, #28]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037d2:	235c      	movs	r3, #92	; 0x5c
 80037d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b5c      	cmp	r3, #92	; 0x5c
 80037da:	d00a      	beq.n	80037f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61bb      	str	r3, [r7, #24]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01e      	beq.n	8003836 <xTaskCreateStatic+0xaa>
 80037f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01b      	beq.n	8003836 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003806:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003810:	2300      	movs	r3, #0
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f850 	bl	80038ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800382e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003830:	f000 f8d4 	bl	80039dc <prvAddNewTaskToReadyList>
 8003834:	e001      	b.n	800383a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800383a:	697b      	ldr	r3, [r7, #20]
	}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08c      	sub	sp, #48	; 0x30
 8003848:	af04      	add	r7, sp, #16
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fb8f 	bl	8004f7c <pvPortMalloc>
 800385e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00e      	beq.n	8003884 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003866:	205c      	movs	r0, #92	; 0x5c
 8003868:	f001 fb88 	bl	8004f7c <pvPortMalloc>
 800386c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
 800387a:	e005      	b.n	8003888 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800387c:	6978      	ldr	r0, [r7, #20]
 800387e:	f001 fc41 	bl	8005104 <vPortFree>
 8003882:	e001      	b.n	8003888 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	2300      	movs	r3, #0
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f80e 	bl	80038ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038b2:	69f8      	ldr	r0, [r7, #28]
 80038b4:	f000 f892 	bl	80039dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e002      	b.n	80038c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038c4:	69bb      	ldr	r3, [r7, #24]
	}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b088      	sub	sp, #32
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	461a      	mov	r2, r3
 80038e6:	21a5      	movs	r1, #165	; 0xa5
 80038e8:	f001 fd52 	bl	8005390 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038f6:	3b01      	subs	r3, #1
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f023 0307 	bic.w	r3, r3, #7
 8003904:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	617b      	str	r3, [r7, #20]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e012      	b.n	8003952 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	7819      	ldrb	r1, [r3, #0]
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	3334      	adds	r3, #52	; 0x34
 800393c:	460a      	mov	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3301      	adds	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b0f      	cmp	r3, #15
 8003956:	d9e9      	bls.n	800392c <prvInitialiseNewTask+0x5e>
 8003958:	e000      	b.n	800395c <prvInitialiseNewTask+0x8e>
		{
			break;
 800395a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2b37      	cmp	r3, #55	; 0x37
 8003968:	d901      	bls.n	800396e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800396a:	2337      	movs	r3, #55	; 0x37
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003972:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003978:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	2200      	movs	r2, #0
 800397e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	3304      	adds	r3, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f8ce 	bl	8002b26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	3318      	adds	r3, #24
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff f8c9 	bl	8002b26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003998:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	2200      	movs	r2, #0
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	69b8      	ldr	r0, [r7, #24]
 80039be:	f001 f8ef 	bl	8004ba0 <pxPortInitialiseStack>
 80039c2:	4602      	mov	r2, r0
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039e4:	f001 f9ca 	bl	8004d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <prvAddNewTaskToReadyList+0xc4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <prvAddNewTaskToReadyList+0xc4>)
 80039f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039fa:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <prvAddNewTaskToReadyList+0xc4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d110      	bne.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a08:	f000 fc16 	bl	8004238 <prvInitialiseTaskLists>
 8003a0c:	e00d      	b.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <prvAddNewTaskToReadyList+0xcc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d802      	bhi.n	8003a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <prvAddNewTaskToReadyList+0xd0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <prvAddNewTaskToReadyList+0xd0>)
 8003a32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <prvAddNewTaskToReadyList+0xd0>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <prvAddNewTaskToReadyList+0xd4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d903      	bls.n	8003a50 <prvAddNewTaskToReadyList+0x74>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <prvAddNewTaskToReadyList+0xd4>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <prvAddNewTaskToReadyList+0xd8>)
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7ff f869 	bl	8002b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a6c:	f001 f9b6 	bl	8004ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <prvAddNewTaskToReadyList+0xcc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <prvAddNewTaskToReadyList+0xc8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d207      	bcs.n	8003a96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <prvAddNewTaskToReadyList+0xdc>)
 8003a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000cbc 	.word	0x20000cbc
 8003aa4:	200007e8 	.word	0x200007e8
 8003aa8:	20000cc8 	.word	0x20000cc8
 8003aac:	20000cd8 	.word	0x20000cd8
 8003ab0:	20000cc4 	.word	0x20000cc4
 8003ab4:	200007ec 	.word	0x200007ec
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d017      	beq.n	8003afe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <vTaskDelay+0x60>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <vTaskDelay+0x30>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60bb      	str	r3, [r7, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003aec:	f000 f880 	bl	8003bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003af0:	2100      	movs	r1, #0
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fcee 	bl	80044d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003af8:	f000 f888 	bl	8003c0c <xTaskResumeAll>
 8003afc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <vTaskDelay+0x64>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000ce4 	.word	0x20000ce4
 8003b20:	e000ed04 	.word	0xe000ed04

08003b24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b32:	463a      	mov	r2, r7
 8003b34:	1d39      	adds	r1, r7, #4
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe ffa2 	bl	8002a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	9202      	str	r2, [sp, #8]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	460a      	mov	r2, r1
 8003b52:	4921      	ldr	r1, [pc, #132]	; (8003bd8 <vTaskStartScheduler+0xb4>)
 8003b54:	4821      	ldr	r0, [pc, #132]	; (8003bdc <vTaskStartScheduler+0xb8>)
 8003b56:	f7ff fe19 	bl	800378c <xTaskCreateStatic>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <vTaskStartScheduler+0xbc>)
 8003b5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b60:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <vTaskStartScheduler+0xbc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e001      	b.n	8003b72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b78:	f000 fd00 	bl	800457c <xTimerCreateTimerTask>
 8003b7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d116      	bne.n	8003bb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	613b      	str	r3, [r7, #16]
}
 8003b96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <vTaskStartScheduler+0xc0>)
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <vTaskStartScheduler+0xc4>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <vTaskStartScheduler+0xc8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bac:	f001 f874 	bl	8004c98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bb0:	e00e      	b.n	8003bd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d10a      	bne.n	8003bd0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60fb      	str	r3, [r7, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <vTaskStartScheduler+0xaa>
}
 8003bd0:	bf00      	nop
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	080053f8 	.word	0x080053f8
 8003bdc:	08004209 	.word	0x08004209
 8003be0:	20000ce0 	.word	0x20000ce0
 8003be4:	20000cdc 	.word	0x20000cdc
 8003be8:	20000cc8 	.word	0x20000cc8
 8003bec:	20000cc0 	.word	0x20000cc0

08003bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <vTaskSuspendAll+0x18>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a03      	ldr	r2, [pc, #12]	; (8003c08 <vTaskSuspendAll+0x18>)
 8003bfc:	6013      	str	r3, [r2, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000ce4 	.word	0x20000ce4

08003c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	603b      	str	r3, [r7, #0]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c38:	f001 f8a0 	bl	8004d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c46:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <xTaskResumeAll+0x118>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d162      	bne.n	8003d14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <xTaskResumeAll+0x11c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d05e      	beq.n	8003d14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c56:	e02f      	b.n	8003cb8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c58:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <xTaskResumeAll+0x120>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3318      	adds	r3, #24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ffc5 	bl	8002bf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe ffc0 	bl	8002bf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <xTaskResumeAll+0x124>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d903      	bls.n	8003c88 <xTaskResumeAll+0x7c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <xTaskResumeAll+0x124>)
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <xTaskResumeAll+0x128>)
 8003c96:	441a      	add	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7fe ff4d 	bl	8002b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <xTaskResumeAll+0x12c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <xTaskResumeAll+0x130>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <xTaskResumeAll+0x120>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1cb      	bne.n	8003c58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cc6:	f000 fb55 	bl	8004374 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <xTaskResumeAll+0x134>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cd6:	f000 f845 	bl	8003d64 <xTaskIncrementTick>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <xTaskResumeAll+0x130>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f1      	bne.n	8003cd6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <xTaskResumeAll+0x134>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <xTaskResumeAll+0x130>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xTaskResumeAll+0x138>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d14:	f001 f862 	bl	8004ddc <vPortExitCritical>

	return xAlreadyYielded;
 8003d18:	68bb      	ldr	r3, [r7, #8]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000ce4 	.word	0x20000ce4
 8003d28:	20000cbc 	.word	0x20000cbc
 8003d2c:	20000c7c 	.word	0x20000c7c
 8003d30:	20000cc4 	.word	0x20000cc4
 8003d34:	200007ec 	.word	0x200007ec
 8003d38:	200007e8 	.word	0x200007e8
 8003d3c:	20000cd0 	.word	0x20000cd0
 8003d40:	20000ccc 	.word	0x20000ccc
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <xTaskGetTickCount+0x18>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	20000cc0 	.word	0x20000cc0

08003d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d6e:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <xTaskIncrementTick+0x150>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 808e 	bne.w	8003e94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d78:	4b4f      	ldr	r3, [pc, #316]	; (8003eb8 <xTaskIncrementTick+0x154>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d80:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <xTaskIncrementTick+0x154>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d120      	bne.n	8003dce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <xTaskIncrementTick+0x158>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <xTaskIncrementTick+0x48>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	603b      	str	r3, [r7, #0]
}
 8003da8:	bf00      	nop
 8003daa:	e7fe      	b.n	8003daa <xTaskIncrementTick+0x46>
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <xTaskIncrementTick+0x158>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <xTaskIncrementTick+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a41      	ldr	r2, [pc, #260]	; (8003ebc <xTaskIncrementTick+0x158>)
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4a41      	ldr	r2, [pc, #260]	; (8003ec0 <xTaskIncrementTick+0x15c>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <xTaskIncrementTick+0x160>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	4a3f      	ldr	r2, [pc, #252]	; (8003ec4 <xTaskIncrementTick+0x160>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	f000 fad3 	bl	8004374 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <xTaskIncrementTick+0x164>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d34e      	bcc.n	8003e76 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd8:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <xTaskIncrementTick+0x158>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <xTaskIncrementTick+0x82>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <xTaskIncrementTick+0x84>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <xTaskIncrementTick+0x164>)
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295
 8003df2:	601a      	str	r2, [r3, #0]
					break;
 8003df4:	e03f      	b.n	8003e76 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <xTaskIncrementTick+0x158>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d203      	bcs.n	8003e16 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e0e:	4a2e      	ldr	r2, [pc, #184]	; (8003ec8 <xTaskIncrementTick+0x164>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6013      	str	r3, [r2, #0]
						break;
 8003e14:	e02f      	b.n	8003e76 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe feea 	bl	8002bf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fee1 	bl	8002bf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <xTaskIncrementTick+0x168>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d903      	bls.n	8003e46 <xTaskIncrementTick+0xe2>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <xTaskIncrementTick+0x168>)
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <xTaskIncrementTick+0x16c>)
 8003e54:	441a      	add	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f7fe fe6e 	bl	8002b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <xTaskIncrementTick+0x170>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3b3      	bcc.n	8003dd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e74:	e7b0      	b.n	8003dd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <xTaskIncrementTick+0x170>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4914      	ldr	r1, [pc, #80]	; (8003ed0 <xTaskIncrementTick+0x16c>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d907      	bls.n	8003e9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e004      	b.n	8003e9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <xTaskIncrementTick+0x174>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <xTaskIncrementTick+0x174>)
 8003e9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <xTaskIncrementTick+0x178>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003eaa:	697b      	ldr	r3, [r7, #20]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000ce4 	.word	0x20000ce4
 8003eb8:	20000cc0 	.word	0x20000cc0
 8003ebc:	20000c74 	.word	0x20000c74
 8003ec0:	20000c78 	.word	0x20000c78
 8003ec4:	20000cd4 	.word	0x20000cd4
 8003ec8:	20000cdc 	.word	0x20000cdc
 8003ecc:	20000cc4 	.word	0x20000cc4
 8003ed0:	200007ec 	.word	0x200007ec
 8003ed4:	200007e8 	.word	0x200007e8
 8003ed8:	20000ccc 	.word	0x20000ccc
 8003edc:	20000cd0 	.word	0x20000cd0

08003ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ee6:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <vTaskSwitchContext+0xa4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <vTaskSwitchContext+0xa8>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ef4:	e041      	b.n	8003f7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003ef6:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <vTaskSwitchContext+0xa8>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <vTaskSwitchContext+0xac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e010      	b.n	8003f26 <vTaskSwitchContext+0x46>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	607b      	str	r3, [r7, #4]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <vTaskSwitchContext+0x3e>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	491a      	ldr	r1, [pc, #104]	; (8003f90 <vTaskSwitchContext+0xb0>)
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0e4      	beq.n	8003f04 <vTaskSwitchContext+0x24>
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <vTaskSwitchContext+0xb0>)
 8003f46:	4413      	add	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <vTaskSwitchContext+0x8a>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <vTaskSwitchContext+0xb4>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <vTaskSwitchContext+0xac>)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6013      	str	r3, [r2, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	20000ce4 	.word	0x20000ce4
 8003f88:	20000cd0 	.word	0x20000cd0
 8003f8c:	20000cc4 	.word	0x20000cc4
 8003f90:	200007ec 	.word	0x200007ec
 8003f94:	200007e8 	.word	0x200007e8

08003f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <vTaskPlaceOnEventList+0x44>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fe fddc 	bl	8002b84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fcc:	2101      	movs	r1, #1
 8003fce:	6838      	ldr	r0, [r7, #0]
 8003fd0:	f000 fa80 	bl	80044d4 <prvAddCurrentTaskToDelayedList>
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200007e8 	.word	0x200007e8

08003fe0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	617b      	str	r3, [r7, #20]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <vTaskPlaceOnEventListRestricted+0x54>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3318      	adds	r3, #24
 800400e:	4619      	mov	r1, r3
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7fe fd94 	bl	8002b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295
 8004020:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	68b8      	ldr	r0, [r7, #8]
 8004026:	f000 fa55 	bl	80044d4 <prvAddCurrentTaskToDelayedList>
	}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200007e8 	.word	0x200007e8

08004038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fdc3 	bl	8002bf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <xTaskRemoveFromEventList+0xb0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11d      	bne.n	80040b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fdba 	bl	8002bf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <xTaskRemoveFromEventList+0xb4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d903      	bls.n	8004094 <xTaskRemoveFromEventList+0x5c>
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a16      	ldr	r2, [pc, #88]	; (80040ec <xTaskRemoveFromEventList+0xb4>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <xTaskRemoveFromEventList+0xb8>)
 80040a2:	441a      	add	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fe fd47 	bl	8002b3e <vListInsertEnd>
 80040b0:	e005      	b.n	80040be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	3318      	adds	r3, #24
 80040b6:	4619      	mov	r1, r3
 80040b8:	480e      	ldr	r0, [pc, #56]	; (80040f4 <xTaskRemoveFromEventList+0xbc>)
 80040ba:	f7fe fd40 	bl	8002b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <xTaskRemoveFromEventList+0xc0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d905      	bls.n	80040d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <xTaskRemoveFromEventList+0xc4>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e001      	b.n	80040dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040dc:	697b      	ldr	r3, [r7, #20]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000ce4 	.word	0x20000ce4
 80040ec:	20000cc4 	.word	0x20000cc4
 80040f0:	200007ec 	.word	0x200007ec
 80040f4:	20000c7c 	.word	0x20000c7c
 80040f8:	200007e8 	.word	0x200007e8
 80040fc:	20000cd0 	.word	0x20000cd0

08004100 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <vTaskInternalSetTimeOutState+0x24>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <vTaskInternalSetTimeOutState+0x28>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000cd4 	.word	0x20000cd4
 8004128:	20000cc0 	.word	0x20000cc0

0800412c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	613b      	str	r3, [r7, #16]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60fb      	str	r3, [r7, #12]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800416e:	f000 fe05 	bl	8004d7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <xTaskCheckForTimeOut+0xbc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d102      	bne.n	8004192 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e023      	b.n	80041da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <xTaskCheckForTimeOut+0xc0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d007      	beq.n	80041ae <xTaskCheckForTimeOut+0x82>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d302      	bcc.n	80041ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e015      	b.n	80041da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d20b      	bcs.n	80041d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff9b 	bl	8004100 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e004      	b.n	80041da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041da:	f000 fdff 	bl	8004ddc <vPortExitCritical>

	return xReturn;
 80041de:	69fb      	ldr	r3, [r7, #28]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000cc0 	.word	0x20000cc0
 80041ec:	20000cd4 	.word	0x20000cd4

080041f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <vTaskMissedYield+0x14>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000cd0 	.word	0x20000cd0

08004208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004210:	f000 f852 	bl	80042b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <prvIdleTask+0x28>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d9f9      	bls.n	8004210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <prvIdleTask+0x2c>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800422c:	e7f0      	b.n	8004210 <prvIdleTask+0x8>
 800422e:	bf00      	nop
 8004230:	200007ec 	.word	0x200007ec
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	e00c      	b.n	800425e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <prvInitialiseTaskLists+0x60>)
 8004250:	4413      	add	r3, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fc48 	bl	8002ae8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3301      	adds	r3, #1
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b37      	cmp	r3, #55	; 0x37
 8004262:	d9ef      	bls.n	8004244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004264:	480d      	ldr	r0, [pc, #52]	; (800429c <prvInitialiseTaskLists+0x64>)
 8004266:	f7fe fc3f 	bl	8002ae8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800426a:	480d      	ldr	r0, [pc, #52]	; (80042a0 <prvInitialiseTaskLists+0x68>)
 800426c:	f7fe fc3c 	bl	8002ae8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <prvInitialiseTaskLists+0x6c>)
 8004272:	f7fe fc39 	bl	8002ae8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004276:	480c      	ldr	r0, [pc, #48]	; (80042a8 <prvInitialiseTaskLists+0x70>)
 8004278:	f7fe fc36 	bl	8002ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <prvInitialiseTaskLists+0x74>)
 800427e:	f7fe fc33 	bl	8002ae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <prvInitialiseTaskLists+0x78>)
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <prvInitialiseTaskLists+0x64>)
 8004286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <prvInitialiseTaskLists+0x7c>)
 800428a:	4a05      	ldr	r2, [pc, #20]	; (80042a0 <prvInitialiseTaskLists+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200007ec 	.word	0x200007ec
 800429c:	20000c4c 	.word	0x20000c4c
 80042a0:	20000c60 	.word	0x20000c60
 80042a4:	20000c7c 	.word	0x20000c7c
 80042a8:	20000c90 	.word	0x20000c90
 80042ac:	20000ca8 	.word	0x20000ca8
 80042b0:	20000c74 	.word	0x20000c74
 80042b4:	20000c78 	.word	0x20000c78

080042b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042be:	e019      	b.n	80042f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042c0:	f000 fd5c 	bl	8004d7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <prvCheckTasksWaitingTermination+0x50>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fc8f 	bl	8002bf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3b01      	subs	r3, #1
 80042dc:	4a0b      	ldr	r2, [pc, #44]	; (800430c <prvCheckTasksWaitingTermination+0x54>)
 80042de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <prvCheckTasksWaitingTermination+0x58>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <prvCheckTasksWaitingTermination+0x58>)
 80042e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ea:	f000 fd77 	bl	8004ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f810 	bl	8004314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <prvCheckTasksWaitingTermination+0x58>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e1      	bne.n	80042c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000c90 	.word	0x20000c90
 800430c:	20000cbc 	.word	0x20000cbc
 8004310:	20000ca4 	.word	0x20000ca4

08004314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4618      	mov	r0, r3
 800432c:	f000 feea 	bl	8005104 <vPortFree>
				vPortFree( pxTCB );
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fee7 	bl	8005104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004336:	e018      	b.n	800436a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800433e:	2b01      	cmp	r3, #1
 8004340:	d103      	bne.n	800434a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fede 	bl	8005104 <vPortFree>
	}
 8004348:	e00f      	b.n	800436a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004350:	2b02      	cmp	r3, #2
 8004352:	d00a      	beq.n	800436a <prvDeleteTCB+0x56>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <prvDeleteTCB+0x54>
	}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <prvResetNextTaskUnblockTime+0x40>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <prvResetNextTaskUnblockTime+0x14>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <prvResetNextTaskUnblockTime+0x16>
 8004388:	2300      	movs	r3, #0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <prvResetNextTaskUnblockTime+0x44>)
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004396:	e008      	b.n	80043aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <prvResetNextTaskUnblockTime+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <prvResetNextTaskUnblockTime+0x44>)
 80043a8:	6013      	str	r3, [r2, #0]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	20000c74 	.word	0x20000c74
 80043b8:	20000cdc 	.word	0x20000cdc

080043bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <xTaskGetSchedulerState+0x34>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ca:	2301      	movs	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	e008      	b.n	80043e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <xTaskGetSchedulerState+0x38>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043d8:	2302      	movs	r3, #2
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	e001      	b.n	80043e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043e2:	687b      	ldr	r3, [r7, #4]
	}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000cc8 	.word	0x20000cc8
 80043f4:	20000ce4 	.word	0x20000ce4

080043f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d056      	beq.n	80044bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800440e:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <xTaskPriorityDisinherit+0xd0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d00a      	beq.n	800442e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60fb      	str	r3, [r7, #12]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60bb      	str	r3, [r7, #8]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	429a      	cmp	r2, r3
 8004460:	d02c      	beq.n	80044bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d128      	bne.n	80044bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fbc0 	bl	8002bf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <xTaskPriorityDisinherit+0xd4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d903      	bls.n	800449c <xTaskPriorityDisinherit+0xa4>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <xTaskPriorityDisinherit+0xd4>)
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <xTaskPriorityDisinherit+0xd8>)
 80044aa:	441a      	add	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f7fe fb43 	bl	8002b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044bc:	697b      	ldr	r3, [r7, #20]
	}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200007e8 	.word	0x200007e8
 80044cc:	20000cc4 	.word	0x20000cc4
 80044d0:	200007ec 	.word	0x200007ec

080044d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044de:	4b21      	ldr	r3, [pc, #132]	; (8004564 <prvAddCurrentTaskToDelayedList+0x90>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fb82 	bl	8002bf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d10a      	bne.n	800450e <prvAddCurrentTaskToDelayedList+0x3a>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4819      	ldr	r0, [pc, #100]	; (800456c <prvAddCurrentTaskToDelayedList+0x98>)
 8004508:	f7fe fb19 	bl	8002b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800450c:	e026      	b.n	800455c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	429a      	cmp	r2, r3
 8004524:	d209      	bcs.n	800453a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fe fb26 	bl	8002b84 <vListInsert>
}
 8004538:	e010      	b.n	800455c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fb1c 	bl	8002b84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	d202      	bcs.n	800455c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000cc0 	.word	0x20000cc0
 8004568:	200007e8 	.word	0x200007e8
 800456c:	20000ca8 	.word	0x20000ca8
 8004570:	20000c78 	.word	0x20000c78
 8004574:	20000c74 	.word	0x20000c74
 8004578:	20000cdc 	.word	0x20000cdc

0800457c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004586:	f000 facb 	bl	8004b20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <xTimerCreateTimerTask+0x80>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d021      	beq.n	80045d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800459a:	1d3a      	adds	r2, r7, #4
 800459c:	f107 0108 	add.w	r1, r7, #8
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe fa85 	bl	8002ab4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	9202      	str	r2, [sp, #8]
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2302      	movs	r3, #2
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	460a      	mov	r2, r1
 80045bc:	4910      	ldr	r1, [pc, #64]	; (8004600 <xTimerCreateTimerTask+0x84>)
 80045be:	4811      	ldr	r0, [pc, #68]	; (8004604 <xTimerCreateTimerTask+0x88>)
 80045c0:	f7ff f8e4 	bl	800378c <xTaskCreateStatic>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <xTimerCreateTimerTask+0x8c>)
 80045c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <xTimerCreateTimerTask+0x8c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	613b      	str	r3, [r7, #16]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000d18 	.word	0x20000d18
 8004600:	08005400 	.word	0x08005400
 8004604:	08004729 	.word	0x08004729
 8004608:	20000d1c 	.word	0x20000d1c

0800460c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	623b      	str	r3, [r7, #32]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <xTimerGenericCommand+0x98>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02a      	beq.n	8004698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b05      	cmp	r3, #5
 8004652:	dc18      	bgt.n	8004686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004654:	f7ff feb2 	bl	80043bc <xTaskGetSchedulerState>
 8004658:	4603      	mov	r3, r0
 800465a:	2b02      	cmp	r3, #2
 800465c:	d109      	bne.n	8004672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <xTimerGenericCommand+0x98>)
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	f107 0110 	add.w	r1, r7, #16
 8004666:	2300      	movs	r3, #0
 8004668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466a:	f7fe fc2d 	bl	8002ec8 <xQueueGenericSend>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24
 8004670:	e012      	b.n	8004698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <xTimerGenericCommand+0x98>)
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f107 0110 	add.w	r1, r7, #16
 800467a:	2300      	movs	r3, #0
 800467c:	2200      	movs	r2, #0
 800467e:	f7fe fc23 	bl	8002ec8 <xQueueGenericSend>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24
 8004684:	e008      	b.n	8004698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <xTimerGenericCommand+0x98>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f107 0110 	add.w	r1, r7, #16
 800468e:	2300      	movs	r3, #0
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	f7fe fd17 	bl	80030c4 <xQueueGenericSendFromISR>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800469a:	4618      	mov	r0, r3
 800469c:	3728      	adds	r7, #40	; 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000d18 	.word	0x20000d18

080046a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b2:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <prvProcessExpiredTimer+0x7c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fa97 	bl	8002bf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d122      	bne.n	8004714 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	6978      	ldr	r0, [r7, #20]
 80046dc:	f000 f8c8 	bl	8004870 <prvInsertTimerInActiveList>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	2100      	movs	r1, #0
 80046f0:	6978      	ldr	r0, [r7, #20]
 80046f2:	f7ff ff8b 	bl	800460c <xTimerGenericCommand>
 80046f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60fb      	str	r3, [r7, #12]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	6978      	ldr	r0, [r7, #20]
 800471a:	4798      	blx	r3
}
 800471c:	bf00      	nop
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000d10 	.word	0x20000d10

08004728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f857 	bl	80047e8 <prvGetNextExpireTime>
 800473a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4619      	mov	r1, r3
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f803 	bl	800474c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004746:	f000 f8d5 	bl	80048f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800474a:	e7f1      	b.n	8004730 <prvTimerTask+0x8>

0800474c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004756:	f7ff fa4b 	bl	8003bf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f866 	bl	8004830 <prvSampleTimeNow>
 8004764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d130      	bne.n	80047ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <prvProcessTimerOrBlockTask+0x3c>
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	429a      	cmp	r2, r3
 8004778:	d806      	bhi.n	8004788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800477a:	f7ff fa47 	bl	8003c0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff91 	bl	80046a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004786:	e024      	b.n	80047d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <prvProcessTimerOrBlockTask+0x90>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <prvProcessTimerOrBlockTask+0x94>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4619      	mov	r1, r3
 80047ae:	f7fe ffb9 	bl	8003724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047b2:	f7ff fa2b 	bl	8003c0c <xTaskResumeAll>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <prvProcessTimerOrBlockTask+0x98>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
}
 80047cc:	e001      	b.n	80047d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047ce:	f7ff fa1d 	bl	8003c0c <xTaskResumeAll>
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000d14 	.word	0x20000d14
 80047e0:	20000d18 	.word	0x20000d18
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <prvGetNextExpireTime+0x44>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <prvGetNextExpireTime+0x44>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000d10 	.word	0x20000d10

08004830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004838:	f7ff fa86 	bl	8003d48 <xTaskGetTickCount>
 800483c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <prvSampleTimeNow+0x3c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d205      	bcs.n	8004854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004848:	f000 f908 	bl	8004a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e002      	b.n	800485a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800485a:	4a04      	ldr	r2, [pc, #16]	; (800486c <prvSampleTimeNow+0x3c>)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000d20 	.word	0x20000d20

08004870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d812      	bhi.n	80048bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e01b      	b.n	80048e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <prvInsertTimerInActiveList+0x7c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe f965 	bl	8002b84 <vListInsert>
 80048ba:	e012      	b.n	80048e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d206      	bcs.n	80048d2 <prvInsertTimerInActiveList+0x62>
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e007      	b.n	80048e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <prvInsertTimerInActiveList+0x80>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f7fe f951 	bl	8002b84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000d14 	.word	0x20000d14
 80048f0:	20000d10 	.word	0x20000d10

080048f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	; 0x38
 80048f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048fa:	e09d      	b.n	8004a38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da18      	bge.n	8004934 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	3304      	adds	r3, #4
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	61fb      	str	r3, [r7, #28]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492a:	6850      	ldr	r0, [r2, #4]
 800492c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492e:	6892      	ldr	r2, [r2, #8]
 8004930:	4611      	mov	r1, r2
 8004932:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db7d      	blt.n	8004a36 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	3304      	adds	r3, #4
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe f952 	bl	8002bf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004950:	463b      	mov	r3, r7
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff ff6c 	bl	8004830 <prvSampleTimeNow>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b09      	cmp	r3, #9
 800495e:	d86b      	bhi.n	8004a38 <prvProcessReceivedCommands+0x144>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <prvProcessReceivedCommands+0x74>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004991 	.word	0x08004991
 800496c:	08004991 	.word	0x08004991
 8004970:	08004991 	.word	0x08004991
 8004974:	08004a39 	.word	0x08004a39
 8004978:	080049ed 	.word	0x080049ed
 800497c:	08004a25 	.word	0x08004a25
 8004980:	08004991 	.word	0x08004991
 8004984:	08004991 	.word	0x08004991
 8004988:	08004a39 	.word	0x08004a39
 800498c:	080049ed 	.word	0x080049ed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	18d1      	adds	r1, r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499e:	f7ff ff67 	bl	8004870 <prvInsertTimerInActiveList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d047      	beq.n	8004a38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d13f      	bne.n	8004a38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	441a      	add	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	2100      	movs	r1, #0
 80049c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ca:	f7ff fe1f 	bl	800460c <xTimerGenericCommand>
 80049ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d130      	bne.n	8004a38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	61bb      	str	r3, [r7, #24]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	617b      	str	r3, [r7, #20]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	18d1      	adds	r1, r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1e:	f7ff ff27 	bl	8004870 <prvInsertTimerInActiveList>
					break;
 8004a22:	e009      	b.n	8004a38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a30:	f000 fb68 	bl	8005104 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a34:	e000      	b.n	8004a38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <prvProcessReceivedCommands+0x164>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1d39      	adds	r1, r7, #4
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fbd7 	bl	80031f4 <xQueueReceive>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f af57 	bne.w	80048fc <prvProcessReceivedCommands+0x8>
	}
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	3730      	adds	r7, #48	; 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20000d18 	.word	0x20000d18

08004a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a62:	e045      	b.n	8004af0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <prvSwitchTimerLists+0xbc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	; (8004b18 <prvSwitchTimerLists+0xbc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe f8b9 	bl	8002bf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d12e      	bne.n	8004af0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d90e      	bls.n	8004ac2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <prvSwitchTimerLists+0xbc>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fe f862 	bl	8002b84 <vListInsert>
 8004ac0:	e016      	b.n	8004af0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	2100      	movs	r1, #0
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff fd9d 	bl	800460c <xTimerGenericCommand>
 8004ad2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	603b      	str	r3, [r7, #0]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <prvSwitchTimerLists+0xbc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1b4      	bne.n	8004a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <prvSwitchTimerLists+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <prvSwitchTimerLists+0xc0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <prvSwitchTimerLists+0xbc>)
 8004b06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <prvSwitchTimerLists+0xc0>)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000d10 	.word	0x20000d10
 8004b1c:	20000d14 	.word	0x20000d14

08004b20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b26:	f000 f929 	bl	8004d7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <prvCheckForValidListAndQueue+0x60>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d120      	bne.n	8004b74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b32:	4814      	ldr	r0, [pc, #80]	; (8004b84 <prvCheckForValidListAndQueue+0x64>)
 8004b34:	f7fd ffd8 	bl	8002ae8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b38:	4813      	ldr	r0, [pc, #76]	; (8004b88 <prvCheckForValidListAndQueue+0x68>)
 8004b3a:	f7fd ffd5 	bl	8002ae8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <prvCheckForValidListAndQueue+0x6c>)
 8004b40:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <prvCheckForValidListAndQueue+0x64>)
 8004b42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <prvCheckForValidListAndQueue+0x70>)
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <prvCheckForValidListAndQueue+0x68>)
 8004b48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <prvCheckForValidListAndQueue+0x74>)
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <prvCheckForValidListAndQueue+0x78>)
 8004b52:	2110      	movs	r1, #16
 8004b54:	200a      	movs	r0, #10
 8004b56:	f7fe f8df 	bl	8002d18 <xQueueGenericCreateStatic>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <prvCheckForValidListAndQueue+0x60>)
 8004b5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <prvCheckForValidListAndQueue+0x60>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <prvCheckForValidListAndQueue+0x60>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	490b      	ldr	r1, [pc, #44]	; (8004b9c <prvCheckForValidListAndQueue+0x7c>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe fdb0 	bl	80036d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b74:	f000 f932 	bl	8004ddc <vPortExitCritical>
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000d18 	.word	0x20000d18
 8004b84:	20000ce8 	.word	0x20000ce8
 8004b88:	20000cfc 	.word	0x20000cfc
 8004b8c:	20000d10 	.word	0x20000d10
 8004b90:	20000d14 	.word	0x20000d14
 8004b94:	20000dc4 	.word	0x20000dc4
 8004b98:	20000d24 	.word	0x20000d24
 8004b9c:	08005408 	.word	0x08005408

08004ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <pxPortInitialiseStack+0x54>)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b14      	subs	r3, #20
 8004bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3b20      	subs	r3, #32
 8004be6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	08004bf9 	.word	0x08004bf9

08004bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <prvTaskExitError+0x54>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d00a      	beq.n	8004c22 <prvTaskExitError+0x2a>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60fb      	str	r3, [r7, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <prvTaskExitError+0x28>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60bb      	str	r3, [r7, #8]
}
 8004c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c36:	bf00      	nop
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0fc      	beq.n	8004c38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000080 	.word	0x20000080

08004c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <pxCurrentTCBConst2>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c5a:	f380 8809 	msr	PSP, r0
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c6e:	4770      	bx	lr

08004c70 <pxCurrentTCBConst2>:
 8004c70:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c78:	4806      	ldr	r0, [pc, #24]	; (8004c94 <prvPortStartFirstTask+0x1c>)
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f380 8808 	msr	MSP, r0
 8004c82:	b662      	cpsie	i
 8004c84:	b661      	cpsie	f
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	df00      	svc	0
 8004c90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c92:	bf00      	nop
 8004c94:	e000ed08 	.word	0xe000ed08

08004c98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c9e:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <xPortStartScheduler+0xd0>)
 8004ca0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <xPortStartScheduler+0xd4>)
 8004cc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004cc8:	2207      	movs	r2, #7
 8004cca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ccc:	e009      	b.n	8004ce2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004cd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d0ef      	beq.n	8004cce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1c3 0307 	rsb	r3, r3, #7
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d00a      	beq.n	8004d10 <xPortStartScheduler+0x78>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60bb      	str	r3, [r7, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d10:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004d18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d22:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <xPortStartScheduler+0xd8>)
 8004d24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <xPortStartScheduler+0xdc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <xPortStartScheduler+0xdc>)
 8004d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <xPortStartScheduler+0xdc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <xPortStartScheduler+0xdc>)
 8004d40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d46:	f000 f8b9 	bl	8004ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <xPortStartScheduler+0xe0>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d50:	f7ff ff92 	bl	8004c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d54:	f7ff f8c4 	bl	8003ee0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d58:	f7ff ff4e 	bl	8004bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000e400 	.word	0xe000e400
 8004d6c:	20000e14 	.word	0x20000e14
 8004d70:	20000e18 	.word	0x20000e18
 8004d74:	e000ed20 	.word	0xe000ed20
 8004d78:	20000080 	.word	0x20000080

08004d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	607b      	str	r3, [r7, #4]
}
 8004d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <vPortEnterCritical+0x58>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <vPortEnterCritical+0x58>)
 8004d9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <vPortEnterCritical+0x58>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10f      	bne.n	8004dc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <vPortEnterCritical+0x5c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	603b      	str	r3, [r7, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <vPortEnterCritical+0x4a>
	}
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000080 	.word	0x20000080
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <vPortExitCritical+0x4c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <vPortExitCritical+0x24>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <vPortExitCritical+0x4c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <vPortExitCritical+0x4c>)
 8004e08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <vPortExitCritical+0x4c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <vPortExitCritical+0x42>
 8004e12:	2300      	movs	r3, #0
 8004e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f383 8811 	msr	BASEPRI, r3
}
 8004e1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr
 8004e28:	20000080 	.word	0x20000080
 8004e2c:	00000000 	.word	0x00000000

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e40:	6010      	str	r0, [r2, #0]
 8004e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e4a:	f380 8811 	msr	BASEPRI, r0
 8004e4e:	f7ff f847 	bl	8003ee0 <vTaskSwitchContext>
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8811 	msr	BASEPRI, r0
 8004e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	6808      	ldr	r0, [r1, #0]
 8004e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e66:	f380 8809 	msr	PSP, r0
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	4770      	bx	lr

08004e70 <pxCurrentTCBConst>:
 8004e70:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
}
 8004e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e92:	f7fe ff67 	bl	8003d64 <xTaskIncrementTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <xPortSysTickHandler+0x40>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <vPortSetupTimerInterrupt+0x30>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	4a08      	ldr	r2, [pc, #32]	; (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b03      	ldr	r3, [pc, #12]	; (8004eec <vPortSetupTimerInterrupt+0x30>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	e000e010 	.word	0xe000e010
 8004ef0:	e000e018 	.word	0xe000e018
 8004ef4:	20000074 	.word	0x20000074
 8004ef8:	51eb851f 	.word	0x51eb851f
 8004efc:	e000e014 	.word	0xe000e014

08004f00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f06:	f3ef 8305 	mrs	r3, IPSR
 8004f0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	d914      	bls.n	8004f3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f12:	4a16      	ldr	r2, [pc, #88]	; (8004f6c <vPortValidateInterruptPriority+0x6c>)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <vPortValidateInterruptPriority+0x70>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	7afa      	ldrb	r2, [r7, #11]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d20a      	bcs.n	8004f3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	607b      	str	r3, [r7, #4]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <vPortValidateInterruptPriority+0x74>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <vPortValidateInterruptPriority+0x78>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d90a      	bls.n	8004f62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	603b      	str	r3, [r7, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <vPortValidateInterruptPriority+0x60>
	}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr
 8004f6c:	e000e3f0 	.word	0xe000e3f0
 8004f70:	20000e14 	.word	0x20000e14
 8004f74:	e000ed0c 	.word	0xe000ed0c
 8004f78:	20000e18 	.word	0x20000e18

08004f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f88:	f7fe fe32 	bl	8003bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f8c:	4b58      	ldr	r3, [pc, #352]	; (80050f0 <pvPortMalloc+0x174>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f94:	f000 f910 	bl	80051b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f98:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <pvPortMalloc+0x178>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 808e 	bne.w	80050c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01d      	beq.n	8004fe8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fac:	2208      	movs	r2, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d014      	beq.n	8004fe8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <pvPortMalloc+0x6c>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	617b      	str	r3, [r7, #20]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d069      	beq.n	80050c2 <pvPortMalloc+0x146>
 8004fee:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <pvPortMalloc+0x17c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d864      	bhi.n	80050c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ff8:	4b40      	ldr	r3, [pc, #256]	; (80050fc <pvPortMalloc+0x180>)
 8004ffa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ffc:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <pvPortMalloc+0x180>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005002:	e004      	b.n	800500e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d903      	bls.n	8005020 <pvPortMalloc+0xa4>
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f1      	bne.n	8005004 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005020:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <pvPortMalloc+0x174>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	429a      	cmp	r2, r3
 8005028:	d04b      	beq.n	80050c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2208      	movs	r2, #8
 8005030:	4413      	add	r3, r2
 8005032:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	1ad2      	subs	r2, r2, r3
 8005044:	2308      	movs	r3, #8
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	429a      	cmp	r2, r3
 800504a:	d91f      	bls.n	800508c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800504c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <pvPortMalloc+0xf8>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	613b      	str	r3, [r7, #16]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005086:	69b8      	ldr	r0, [r7, #24]
 8005088:	f000 f8f8 	bl	800527c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <pvPortMalloc+0x17c>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <pvPortMalloc+0x17c>)
 8005098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800509a:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <pvPortMalloc+0x17c>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <pvPortMalloc+0x184>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d203      	bcs.n	80050ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <pvPortMalloc+0x17c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <pvPortMalloc+0x184>)
 80050ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <pvPortMalloc+0x178>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050c2:	f7fe fda3 	bl	8003c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <pvPortMalloc+0x16a>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <pvPortMalloc+0x168>
	return pvReturn;
 80050e6:	69fb      	ldr	r3, [r7, #28]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3728      	adds	r7, #40	; 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20001a24 	.word	0x20001a24
 80050f4:	20001a30 	.word	0x20001a30
 80050f8:	20001a28 	.word	0x20001a28
 80050fc:	20001a1c 	.word	0x20001a1c
 8005100:	20001a2c 	.word	0x20001a2c

08005104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d048      	beq.n	80051a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005116:	2308      	movs	r3, #8
 8005118:	425b      	negs	r3, r3
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <vPortFree+0xac>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <vPortFree+0x44>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60fb      	str	r3, [r7, #12]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <vPortFree+0x62>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60bb      	str	r3, [r7, #8]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <vPortFree+0xac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d019      	beq.n	80051a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d115      	bne.n	80051a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <vPortFree+0xac>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	43db      	mvns	r3, r3
 8005186:	401a      	ands	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800518c:	f7fe fd30 	bl	8003bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <vPortFree+0xb0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4413      	add	r3, r2
 800519a:	4a06      	ldr	r2, [pc, #24]	; (80051b4 <vPortFree+0xb0>)
 800519c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800519e:	6938      	ldr	r0, [r7, #16]
 80051a0:	f000 f86c 	bl	800527c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051a4:	f7fe fd32 	bl	8003c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20001a30 	.word	0x20001a30
 80051b4:	20001a28 	.word	0x20001a28

080051b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051c4:	4b27      	ldr	r3, [pc, #156]	; (8005264 <prvHeapInit+0xac>)
 80051c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3307      	adds	r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <prvHeapInit+0xac>)
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <prvHeapInit+0xb0>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051f6:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <prvHeapInit+0xb0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4413      	add	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005204:	2208      	movs	r2, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0307 	bic.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <prvHeapInit+0xb4>)
 8005218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <prvHeapInit+0xb4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005222:	4b12      	ldr	r3, [pc, #72]	; (800526c <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <prvHeapInit+0xb4>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <prvHeapInit+0xb8>)
 8005246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a09      	ldr	r2, [pc, #36]	; (8005274 <prvHeapInit+0xbc>)
 800524e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <prvHeapInit+0xc0>)
 8005252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005256:	601a      	str	r2, [r3, #0]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000e1c 	.word	0x20000e1c
 8005268:	20001a1c 	.word	0x20001a1c
 800526c:	20001a24 	.word	0x20001a24
 8005270:	20001a2c 	.word	0x20001a2c
 8005274:	20001a28 	.word	0x20001a28
 8005278:	20001a30 	.word	0x20001a30

0800527c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <prvInsertBlockIntoFreeList+0xa8>)
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e002      	b.n	8005290 <prvInsertBlockIntoFreeList+0x14>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d8f7      	bhi.n	800528a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d108      	bne.n	80052be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	441a      	add	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d118      	bne.n	8005304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b14      	ldr	r3, [pc, #80]	; (8005328 <prvInsertBlockIntoFreeList+0xac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d00d      	beq.n	80052fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e008      	b.n	800530c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <prvInsertBlockIntoFreeList+0xac>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e003      	b.n	800530c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d002      	beq.n	800531a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr
 8005324:	20001a1c 	.word	0x20001a1c
 8005328:	20001a24 	.word	0x20001a24

0800532c <__libc_init_array>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	2600      	movs	r6, #0
 8005330:	4d0c      	ldr	r5, [pc, #48]	; (8005364 <__libc_init_array+0x38>)
 8005332:	4c0d      	ldr	r4, [pc, #52]	; (8005368 <__libc_init_array+0x3c>)
 8005334:	1b64      	subs	r4, r4, r5
 8005336:	10a4      	asrs	r4, r4, #2
 8005338:	42a6      	cmp	r6, r4
 800533a:	d109      	bne.n	8005350 <__libc_init_array+0x24>
 800533c:	f000 f830 	bl	80053a0 <_init>
 8005340:	2600      	movs	r6, #0
 8005342:	4d0a      	ldr	r5, [pc, #40]	; (800536c <__libc_init_array+0x40>)
 8005344:	4c0a      	ldr	r4, [pc, #40]	; (8005370 <__libc_init_array+0x44>)
 8005346:	1b64      	subs	r4, r4, r5
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	42a6      	cmp	r6, r4
 800534c:	d105      	bne.n	800535a <__libc_init_array+0x2e>
 800534e:	bd70      	pop	{r4, r5, r6, pc}
 8005350:	f855 3b04 	ldr.w	r3, [r5], #4
 8005354:	4798      	blx	r3
 8005356:	3601      	adds	r6, #1
 8005358:	e7ee      	b.n	8005338 <__libc_init_array+0xc>
 800535a:	f855 3b04 	ldr.w	r3, [r5], #4
 800535e:	4798      	blx	r3
 8005360:	3601      	adds	r6, #1
 8005362:	e7f2      	b.n	800534a <__libc_init_array+0x1e>
 8005364:	080054ac 	.word	0x080054ac
 8005368:	080054ac 	.word	0x080054ac
 800536c:	080054ac 	.word	0x080054ac
 8005370:	080054b0 	.word	0x080054b0

08005374 <memcpy>:
 8005374:	440a      	add	r2, r1
 8005376:	4291      	cmp	r1, r2
 8005378:	f100 33ff 	add.w	r3, r0, #4294967295
 800537c:	d100      	bne.n	8005380 <memcpy+0xc>
 800537e:	4770      	bx	lr
 8005380:	b510      	push	{r4, lr}
 8005382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005386:	4291      	cmp	r1, r2
 8005388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538c:	d1f9      	bne.n	8005382 <memcpy+0xe>
 800538e:	bd10      	pop	{r4, pc}

08005390 <memset>:
 8005390:	4603      	mov	r3, r0
 8005392:	4402      	add	r2, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <_init>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr

080053ac <_fini>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr
