
physical-io.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f1c  08004f1c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004f1c  08004f1c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f1c  08004f1c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a6c  20000084  08004fa8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  08004fa8  00021af0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cfa  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030aa  00000000  00000000  00035da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00039cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018929  00000000  00000000  0003aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107de  00000000  00000000  00053369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c434  00000000  00000000  00063b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eff7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000effd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e10 	.word	0x08004e10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08004e10 	.word	0x08004e10

08000150 <gpio_write_pin>:
uint8_t debounce_buffer_1[ROW_LEN][COL_LEN];
uint8_t debounce_buffer_2[ROW_LEN][COL_LEN];
uint8_t valid_buffer[ROW_LEN][COL_LEN];
uint8_t valid_buffer_prev[ROW_LEN][COL_LEN];

static inline void gpio_write_pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	807b      	strh	r3, [r7, #2]
 800015c:	4613      	mov	r3, r2
 800015e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 8000160:	787a      	ldrb	r2, [r7, #1]
 8000162:	887b      	ldrh	r3, [r7, #2]
 8000164:	4619      	mov	r1, r3
 8000166:	6878      	ldr	r0, [r7, #4]
 8000168:	f001 f92f 	bl	80013ca <HAL_GPIO_WritePin>
}
 800016c:	bf00      	nop
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <gpio_read_pin>:

static inline GPIO_PinState gpio_read_pin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	460b      	mov	r3, r1
 800017e:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000180:	887b      	ldrh	r3, [r7, #2]
 8000182:	4619      	mov	r1, r3
 8000184:	6878      	ldr	r0, [r7, #4]
 8000186:	f001 f909 	bl	800139c <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
}
 800018c:	4618      	mov	r0, r3
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}

08000194 <btn_matrix_init>:

void btn_matrix_init(void) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
	for (int i = 0; i < ROW_LEN; i++) {
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
 800019e:	e02b      	b.n	80001f8 <btn_matrix_init+0x64>
		for (int j = 0; j < COL_LEN; j++) {
 80001a0:	2300      	movs	r3, #0
 80001a2:	603b      	str	r3, [r7, #0]
 80001a4:	e022      	b.n	80001ec <btn_matrix_init+0x58>
			debounce_buffer_1[i][j] = BUTTON_RELEASED;
 80001a6:	4a19      	ldr	r2, [pc, #100]	; (800020c <btn_matrix_init+0x78>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	441a      	add	r2, r3
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	4413      	add	r3, r2
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
			debounce_buffer_2[i][j] = BUTTON_RELEASED;
 80001b6:	4a16      	ldr	r2, [pc, #88]	; (8000210 <btn_matrix_init+0x7c>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	441a      	add	r2, r3
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	4413      	add	r3, r2
 80001c2:	2200      	movs	r2, #0
 80001c4:	701a      	strb	r2, [r3, #0]
			valid_buffer[i][j] = BUTTON_RELEASED;
 80001c6:	4a13      	ldr	r2, [pc, #76]	; (8000214 <btn_matrix_init+0x80>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	441a      	add	r2, r3
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	4413      	add	r3, r2
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
			valid_buffer_prev[i][j] = BUTTON_RELEASED;
 80001d6:	4a10      	ldr	r2, [pc, #64]	; (8000218 <btn_matrix_init+0x84>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	441a      	add	r2, r3
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	4413      	add	r3, r2
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < COL_LEN; j++) {
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	3301      	adds	r3, #1
 80001ea:	603b      	str	r3, [r7, #0]
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	ddd9      	ble.n	80001a6 <btn_matrix_init+0x12>
	for (int i = 0; i < ROW_LEN; i++) {
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	ddd0      	ble.n	80001a0 <btn_matrix_init+0xc>
		}
	}
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	200019c0 	.word	0x200019c0
 8000210:	200019c8 	.word	0x200019c8
 8000214:	200019b0 	.word	0x200019b0
 8000218:	200019b8 	.word	0x200019b8

0800021c <btn_matrix_read>:

cmd_t *btn_matrix_read(int row, int col) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < COL_LEN; i++) {
 8000226:	2300      	movs	r3, #0
 8000228:	73fb      	strb	r3, [r7, #15]
 800022a:	e00b      	b.n	8000244 <btn_matrix_read+0x28>
		gpio_write_pin(COL_PORT, out_pin_mapper[i], COL_RESET);
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	4a45      	ldr	r2, [pc, #276]	; (8000344 <btn_matrix_read+0x128>)
 8000230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	4843      	ldr	r0, [pc, #268]	; (8000348 <btn_matrix_read+0x12c>)
 800023a:	f7ff ff89 	bl	8000150 <gpio_write_pin>
	for (uint8_t i = 0; i < COL_LEN; i++) {
 800023e:	7bfb      	ldrb	r3, [r7, #15]
 8000240:	3301      	adds	r3, #1
 8000242:	73fb      	strb	r3, [r7, #15]
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d9f0      	bls.n	800022c <btn_matrix_read+0x10>
	}
	gpio_write_pin(COL_PORT, out_pin_mapper[col], COL_SET);
 800024a:	4a3e      	ldr	r2, [pc, #248]	; (8000344 <btn_matrix_read+0x128>)
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000252:	2200      	movs	r2, #0
 8000254:	4619      	mov	r1, r3
 8000256:	483c      	ldr	r0, [pc, #240]	; (8000348 <btn_matrix_read+0x12c>)
 8000258:	f7ff ff7a 	bl	8000150 <gpio_write_pin>

	debounce_buffer_2[row][col] = debounce_buffer_1[row][col];
 800025c:	4a3b      	ldr	r2, [pc, #236]	; (800034c <btn_matrix_read+0x130>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	441a      	add	r2, r3
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	4413      	add	r3, r2
 8000268:	7819      	ldrb	r1, [r3, #0]
 800026a:	4a39      	ldr	r2, [pc, #228]	; (8000350 <btn_matrix_read+0x134>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	441a      	add	r2, r3
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	4413      	add	r3, r2
 8000276:	460a      	mov	r2, r1
 8000278:	701a      	strb	r2, [r3, #0]
	debounce_buffer_1[row][col] = gpio_read_pin(ROW_PORT, in_pin_mapper[row]);
 800027a:	4a36      	ldr	r2, [pc, #216]	; (8000354 <btn_matrix_read+0x138>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000282:	4619      	mov	r1, r3
 8000284:	4830      	ldr	r0, [pc, #192]	; (8000348 <btn_matrix_read+0x12c>)
 8000286:	f7ff ff75 	bl	8000174 <gpio_read_pin>
 800028a:	4603      	mov	r3, r0
 800028c:	4619      	mov	r1, r3
 800028e:	4a2f      	ldr	r2, [pc, #188]	; (800034c <btn_matrix_read+0x130>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	441a      	add	r2, r3
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	4413      	add	r3, r2
 800029a:	460a      	mov	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	if (debounce_buffer_1[row][col] == debounce_buffer_2[row][col]) { //valid
 800029e:	4a2b      	ldr	r2, [pc, #172]	; (800034c <btn_matrix_read+0x130>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	441a      	add	r2, r3
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	781a      	ldrb	r2, [r3, #0]
 80002ac:	4928      	ldr	r1, [pc, #160]	; (8000350 <btn_matrix_read+0x134>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4419      	add	r1, r3
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	440b      	add	r3, r1
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d13d      	bne.n	800033a <btn_matrix_read+0x11e>
		valid_buffer_prev[row][col] = valid_buffer[row][col];
 80002be:	4a26      	ldr	r2, [pc, #152]	; (8000358 <btn_matrix_read+0x13c>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	441a      	add	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	7819      	ldrb	r1, [r3, #0]
 80002cc:	4a23      	ldr	r2, [pc, #140]	; (800035c <btn_matrix_read+0x140>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	441a      	add	r2, r3
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	4413      	add	r3, r2
 80002d8:	460a      	mov	r2, r1
 80002da:	701a      	strb	r2, [r3, #0]
		valid_buffer[row][col] = debounce_buffer_1[row][col];
 80002dc:	4a1b      	ldr	r2, [pc, #108]	; (800034c <btn_matrix_read+0x130>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	441a      	add	r2, r3
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	7819      	ldrb	r1, [r3, #0]
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <btn_matrix_read+0x13c>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	441a      	add	r2, r3
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	4413      	add	r3, r2
 80002f6:	460a      	mov	r2, r1
 80002f8:	701a      	strb	r2, [r3, #0]

		if (valid_buffer[row][col] == BUTTON_RELEASED && valid_buffer_prev[row][col] == BUTTON_PRESSED) {
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <btn_matrix_read+0x13c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	441a      	add	r2, r3
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d116      	bne.n	800033a <btn_matrix_read+0x11e>
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <btn_matrix_read+0x140>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	441a      	add	r2, r3
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d10d      	bne.n	800033a <btn_matrix_read+0x11e>
			return &cmd_mapper[row][col];
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4413      	add	r3, r2
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	2134      	movs	r1, #52	; 0x34
 800032e:	fb01 f202 	mul.w	r2, r1, r2
 8000332:	4413      	add	r3, r2
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <btn_matrix_read+0x144>)
 8000336:	4413      	add	r3, r2
 8000338:	e000      	b.n	800033c <btn_matrix_read+0x120>
		}
 	}

	return NULL;
 800033a:	2300      	movs	r3, #0
}
 800033c:	4618      	mov	r0, r3
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000068 	.word	0x20000068
 8000348:	40010800 	.word	0x40010800
 800034c:	200019c0 	.word	0x200019c0
 8000350:	200019c8 	.word	0x200019c8
 8000354:	20000070 	.word	0x20000070
 8000358:	200019b0 	.word	0x200019b0
 800035c:	200019b8 	.word	0x200019b8
 8000360:	20000000 	.word	0x20000000

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fbc4 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f84a 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f8fa 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000374:	f000 f8da 	bl	800052c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000378:	f000 f884 	bl	8000484 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800037c:	f000 f8ac 	bl	80004d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  btn_matrix_init();
 8000380:	f7ff ff08 	bl	8000194 <btn_matrix_init>
  rs485_init(&huart3);
 8000384:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0x70>)
 8000386:	f000 f9eb 	bl	8000760 <rs485_init>
  //memset(rx_buffer.data, 'x', BUFFER_BYTE_SIZE);
  //HAL_UART_Receive_DMA(&huart3, rx_buffer.data, BUFFER_BYTE_SIZE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800038a:	f001 fe09 	bl	8001fa0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cmd_q */
  cmd_qHandle = osMessageQueueNew (10, sizeof(cmd_t), &cmd_q_attributes);
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <main+0x74>)
 8000390:	210d      	movs	r1, #13
 8000392:	200a      	movs	r0, #10
 8000394:	f001 ff42 	bl	800221c <osMessageQueueNew>
 8000398:	4603      	mov	r3, r0
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <main+0x78>)
 800039c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of triggerup_task */
  triggerup_taskHandle = osThreadNew(trigger_uplink_handler, NULL, &triggerup_task_attributes);
 800039e:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <main+0x7c>)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4810      	ldr	r0, [pc, #64]	; (80003e4 <main+0x80>)
 80003a4:	f001 fe62 	bl	800206c <osThreadNew>
 80003a8:	4603      	mov	r3, r0
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <main+0x84>)
 80003ac:	6013      	str	r3, [r2, #0]

  /* creation of rs485_task */
  rs485_taskHandle = osThreadNew(rs485_handler, NULL, &rs485_task_attributes);
 80003ae:	4a0f      	ldr	r2, [pc, #60]	; (80003ec <main+0x88>)
 80003b0:	2100      	movs	r1, #0
 80003b2:	480f      	ldr	r0, [pc, #60]	; (80003f0 <main+0x8c>)
 80003b4:	f001 fe5a 	bl	800206c <osThreadNew>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <main+0x90>)
 80003bc:	6013      	str	r3, [r2, #0]

  /* creation of btn_task */
  btn_taskHandle = osThreadNew(btn_handler, NULL, &btn_task_attributes);
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <main+0x94>)
 80003c0:	2100      	movs	r1, #0
 80003c2:	480e      	ldr	r0, [pc, #56]	; (80003fc <main+0x98>)
 80003c4:	f001 fe52 	bl	800206c <osThreadNew>
 80003c8:	4603      	mov	r3, r0
 80003ca:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <main+0x9c>)
 80003cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003ce:	f001 fe19 	bl	8002004 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <main+0x6e>
 80003d4:	20001a18 	.word	0x20001a18
 80003d8:	08004eec 	.word	0x08004eec
 80003dc:	20001aa8 	.word	0x20001aa8
 80003e0:	08004e80 	.word	0x08004e80
 80003e4:	0800063d 	.word	0x0800063d
 80003e8:	200019d0 	.word	0x200019d0
 80003ec:	08004ea4 	.word	0x08004ea4
 80003f0:	08000679 	.word	0x08000679
 80003f4:	20001aa4 	.word	0x20001aa4
 80003f8:	08004ec8 	.word	0x08004ec8
 80003fc:	080006d1 	.word	0x080006d1
 8000400:	20001a5c 	.word	0x20001a5c

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b090      	sub	sp, #64	; 0x40
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	2228      	movs	r2, #40	; 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f004 fcf4 	bl	8004e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	2301      	movs	r3, #1
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2310      	movs	r3, #16
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000432:	2302      	movs	r3, #2
 8000434:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000436:	2300      	movs	r3, #0
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800043a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800043e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f000 ffd9 	bl	80013fc <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000450:	f000 f96c 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fa45 	bl	80018fc <HAL_RCC_ClockConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000478:	f000 f958 	bl	800072c <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3740      	adds	r7, #64	; 0x40
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_USART1_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 8000490:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004bc:	f001 fbb8 	bl	8001c30 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 f931 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20001a60 	.word	0x20001a60
 80004d4:	40013800 	.word	0x40013800

080004d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <MX_USART3_UART_Init+0x50>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_USART3_UART_Init+0x4c>)
 8000510:	f001 fb8e 	bl	8001c30 <HAL_UART_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800051a:	f000 f907 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20001a18 	.word	0x20001a18
 8000528:	40004800 	.word	0x40004800

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_DMA_Init+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <MX_DMA_Init+0x38>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_DMA_Init+0x38>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	200d      	movs	r0, #13
 8000550:	f000 fc09 	bl	8000d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000554:	200d      	movs	r0, #13
 8000556:	f000 fc22 	bl	8000d9e <HAL_NVIC_EnableIRQ>

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_GPIO_Init+0xc8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <MX_GPIO_Init+0xc8>)
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <MX_GPIO_Init+0xc8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <MX_GPIO_Init+0xc8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a25      	ldr	r2, [pc, #148]	; (8000630 <MX_GPIO_Init+0xc8>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_GPIO_Init+0xc8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	210f      	movs	r1, #15
 80005c8:	481a      	ldr	r0, [pc, #104]	; (8000634 <MX_GPIO_Init+0xcc>)
 80005ca:	f000 fefe 	bl	80013ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	4819      	ldr	r0, [pc, #100]	; (8000638 <MX_GPIO_Init+0xd0>)
 80005d4:	f000 fef9 	bl	80013ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005d8:	230f      	movs	r3, #15
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	4811      	ldr	r0, [pc, #68]	; (8000634 <MX_GPIO_Init+0xcc>)
 80005f0:	f000 fd50 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005f4:	2330      	movs	r3, #48	; 0x30
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <MX_GPIO_Init+0xcc>)
 8000608:	f000 fd44 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000610:	2311      	movs	r3, #17
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_GPIO_Init+0xd0>)
 8000624:	f000 fd36 	bl	8001094 <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800
 8000638:	40010c00 	.word	0x40010c00

0800063c <trigger_uplink_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_trigger_uplink_handler */
void trigger_uplink_handler(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (trigger_uplink_flag == 1) {
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <trigger_uplink_handler+0x34>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d1fb      	bne.n	8000644 <trigger_uplink_handler+0x8>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <trigger_uplink_handler+0x38>)
 8000652:	f000 feba 	bl	80013ca <HAL_GPIO_WritePin>
		  osDelay(pdMS_TO_TICKS(1100));
 8000656:	206e      	movs	r0, #110	; 0x6e
 8000658:	f001 fdb2 	bl	80021c0 <osDelay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <trigger_uplink_handler+0x38>)
 8000662:	f000 feb2 	bl	80013ca <HAL_GPIO_WritePin>
		  trigger_uplink_flag = 0;
 8000666:	4b02      	ldr	r3, [pc, #8]	; (8000670 <trigger_uplink_handler+0x34>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	  if (trigger_uplink_flag == 1) {
 800066c:	e7ea      	b.n	8000644 <trigger_uplink_handler+0x8>
 800066e:	bf00      	nop
 8000670:	200000a0 	.word	0x200000a0
 8000674:	40010c00 	.word	0x40010c00

08000678 <rs485_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rs485_handler */
void rs485_handler(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0ca      	sub	sp, #296	; 0x128
 800067c:	af00      	add	r7, sp, #0
 800067e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  /* Infinite loop */
	buffer_byte_t buffer;
	cmd_t cmd;
  for(;;)
  {
	  if (osMessageQueueGet(cmd_qHandle, &cmd, NULL, 0) == osOK) {
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <rs485_handler+0x50>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800068a:	2300      	movs	r3, #0
 800068c:	2200      	movs	r2, #0
 800068e:	f001 febf 	bl	8002410 <osMessageQueueGet>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f4      	bne.n	8000682 <rs485_handler+0xa>
		  buffer = rs485_compose_at_cmd(&cmd);
		  rs485_send(&buffer);
		  osDelay(pdMS_TO_TICKS(500));
			*/
		  //RS485
		  buffer = rs485_compose(&cmd);
 8000698:	463b      	mov	r3, r7
 800069a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f86b 	bl	800077c <rs485_compose>
 80006a6:	463a      	mov	r2, r7
 80006a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006ac:	4611      	mov	r1, r2
 80006ae:	2281      	movs	r2, #129	; 0x81
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fb97 	bl	8004de4 <memcpy>
		  rs485_send(&buffer);
 80006b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f8ca 	bl	8000854 <rs485_send>

		  trigger_uplink_flag = 1;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <rs485_handler+0x54>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
	  if (osMessageQueueGet(cmd_qHandle, &cmd, NULL, 0) == osOK) {
 80006c6:	e7dc      	b.n	8000682 <rs485_handler+0xa>
 80006c8:	20001aa8 	.word	0x20001aa8
 80006cc:	200000a0 	.word	0x200000a0

080006d0 <btn_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_btn_handler */
void btn_handler(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN btn_handler */
  /* Infinite loop */
  for(;;)
  {
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e01c      	b.n	8000718 <btn_handler+0x48>
		  for (uint8_t col = 0; col < COL_LEN; col++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	73bb      	strb	r3, [r7, #14]
 80006e2:	e013      	b.n	800070c <btn_handler+0x3c>
			  cmd_t *curr_cmd = btn_matrix_read(row, col);
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	7bba      	ldrb	r2, [r7, #14]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd96 	bl	800021c <btn_matrix_read>
 80006f0:	60b8      	str	r0, [r7, #8]
			  if (curr_cmd != NULL) {
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d006      	beq.n	8000706 <btn_handler+0x36>
				  osMessageQueuePut(cmd_qHandle, (void *)curr_cmd, 1, 0);
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <btn_handler+0x58>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	2201      	movs	r2, #1
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	f001 fe11 	bl	8002328 <osMessageQueuePut>
		  for (uint8_t col = 0; col < COL_LEN; col++) {
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	3301      	adds	r3, #1
 800070a:	73bb      	strb	r3, [r7, #14]
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d9e8      	bls.n	80006e4 <btn_handler+0x14>
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d9df      	bls.n	80006de <btn_handler+0xe>
			  }
		  }
	  }

	  osDelay(pdMS_TO_TICKS(DEBOUNCE_INTERVAL));
 800071e:	2001      	movs	r0, #1
 8000720:	f001 fd4e 	bl	80021c0 <osDelay>
	  for (uint8_t row = 0; row < ROW_LEN; row++) {
 8000724:	e7d8      	b.n	80006d8 <btn_handler+0x8>
 8000726:	bf00      	nop
 8000728:	20001aa8 	.word	0x20001aa8

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <uart_send>:
#include "crc.h"
#include "cmd.h"

static UART_HandleTypeDef *huart;

static inline void uart_send(buffer_byte_t *buffer) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, buffer->data, buffer->size, 10);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <uart_send+0x24>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800074c:	b29a      	uxth	r2, r3
 800074e:	230a      	movs	r3, #10
 8000750:	f001 fabb 	bl	8001cca <HAL_UART_Transmit>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000a4 	.word	0x200000a4

08000760 <rs485_init>:

static inline void uart_recv(buffer_byte_t *buffer) {
	HAL_UART_Receive(huart, buffer->data, buffer->size, 500);
}

void rs485_init(UART_HandleTypeDef *huart_ptr) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	huart = huart_ptr;
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <rs485_init+0x18>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200000a4 	.word	0x200000a4

0800077c <rs485_compose>:

buffer_byte_t rs485_compose(cmd_t *cmd) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b0a4      	sub	sp, #144	; 0x90
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	buffer_byte_t buffer;
	buffer.size = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

	buffer.data[buffer.size++] = cmd->addr;
 800078c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 8000798:	4619      	mov	r1, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007a2:	440b      	add	r3, r1
 80007a4:	f803 2c84 	strb.w	r2, [r3, #-132]
	buffer.data[buffer.size++] = cmd->func;
 80007a8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 80007b4:	4619      	mov	r1, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	785a      	ldrb	r2, [r3, #1]
 80007ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007be:	440b      	add	r3, r1
 80007c0:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uint8_t k = 0; k < cmd->data.size; k++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80007ca:	e015      	b.n	80007f8 <rs485_compose+0x7c>
		buffer.data[buffer.size++] = cmd->data.data[k];
 80007cc:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80007d0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80007d4:	1c59      	adds	r1, r3, #1
 80007d6:	b2c9      	uxtb	r1, r1
 80007d8:	f887 108c 	strb.w	r1, [r7, #140]	; 0x8c
 80007dc:	4619      	mov	r1, r3
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	789a      	ldrb	r2, [r3, #2]
 80007e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007e8:	440b      	add	r3, r1
 80007ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uint8_t k = 0; k < cmd->data.size; k++) {
 80007ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80007f2:	3301      	adds	r3, #1
 80007f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	7a9b      	ldrb	r3, [r3, #10]
 80007fc:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000800:	429a      	cmp	r2, r3
 8000802:	d3e3      	bcc.n	80007cc <rs485_compose+0x50>
	}
	buffer.data[buffer.size++] = cmd->crc[0];
 8000804:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 8000810:	4619      	mov	r1, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	7ada      	ldrb	r2, [r3, #11]
 8000816:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800081a:	440b      	add	r3, r1
 800081c:	f803 2c84 	strb.w	r2, [r3, #-132]
	buffer.data[buffer.size++] = cmd->crc[1];
 8000820:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	f887 208c 	strb.w	r2, [r7, #140]	; 0x8c
 800082c:	4619      	mov	r1, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	7b1a      	ldrb	r2, [r3, #12]
 8000832:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000836:	440b      	add	r3, r1
 8000838:	f803 2c84 	strb.w	r2, [r3, #-132]

	return buffer;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2281      	movs	r2, #129	; 0x81
 8000846:	4619      	mov	r1, r3
 8000848:	f004 facc 	bl	8004de4 <memcpy>
}
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	3790      	adds	r7, #144	; 0x90
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <rs485_send>:
	buffer.data[buffer.size++] = '\n';

	return buffer;
}

void rs485_send(buffer_byte_t *buffer) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uart_send(buffer);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff6b 	bl	8000738 <uart_send>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <HAL_MspInit+0x68>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <HAL_MspInit+0x68>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_MspInit+0x68>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x68>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_MspInit+0x68>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x68>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa5c 	bl	8000d66 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_MspInit+0x6c>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_MspInit+0x6c>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010000 	.word	0x40010000

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a4c      	ldr	r2, [pc, #304]	; (8000a28 <HAL_UART_MspInit+0x14c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d132      	bne.n	8000962 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <HAL_UART_MspInit+0x150>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a4a      	ldr	r2, [pc, #296]	; (8000a2c <HAL_UART_MspInit+0x150>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <HAL_UART_MspInit+0x150>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <HAL_UART_MspInit+0x150>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a44      	ldr	r2, [pc, #272]	; (8000a2c <HAL_UART_MspInit+0x150>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <HAL_UART_MspInit+0x150>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800092c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4619      	mov	r1, r3
 8000940:	483b      	ldr	r0, [pc, #236]	; (8000a30 <HAL_UART_MspInit+0x154>)
 8000942:	f000 fba7 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4619      	mov	r1, r3
 800095a:	4835      	ldr	r0, [pc, #212]	; (8000a30 <HAL_UART_MspInit+0x154>)
 800095c:	f000 fb9a 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000960:	e05d      	b.n	8000a1e <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART3)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a33      	ldr	r2, [pc, #204]	; (8000a34 <HAL_UART_MspInit+0x158>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d158      	bne.n	8000a1e <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART3_CLK_ENABLE();
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <HAL_UART_MspInit+0x150>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	4a2e      	ldr	r2, [pc, #184]	; (8000a2c <HAL_UART_MspInit+0x150>)
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <HAL_UART_MspInit+0x150>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_UART_MspInit+0x150>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <HAL_UART_MspInit+0x150>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HAL_UART_MspInit+0x150>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4821      	ldr	r0, [pc, #132]	; (8000a38 <HAL_UART_MspInit+0x15c>)
 80009b2:	f000 fb6f 	bl	8001094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4619      	mov	r1, r3
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x15c>)
 80009cc:	f000 fb62 	bl	8001094 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009d2:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <HAL_UART_MspInit+0x164>)
 80009d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009f6:	2220      	movs	r2, #32
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_UART_MspInit+0x160>)
 80009fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <HAL_UART_MspInit+0x160>)
 8000a04:	f000 f9e6 	bl	8000dd4 <HAL_DMA_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8000a0e:	f7ff fe8d 	bl	800072c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_UART_MspInit+0x160>)
 8000a16:	639a      	str	r2, [r3, #56]	; 0x38
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_UART_MspInit+0x160>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800
 8000a34:	40004800 	.word	0x40004800
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	200019d4 	.word	0x200019d4
 8000a40:	40020030 	.word	0x40020030

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f885 	bl	8000b80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a76:	f003 f9d9 	bl	8003e2c <xTaskGetSchedulerState>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d001      	beq.n	8000a84 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a80:	f003 ff32 	bl	80048e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <DMA1_Channel3_IRQHandler+0x10>)
 8000a8e:	f000 f9fb 	bl	8000e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200019d4 	.word	0x200019d4

08000a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ace:	f7ff ffe5 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f004 f963 	bl	8004d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fc45 	bl	8000364 <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ae4:	08004f24 	.word	0x08004f24
  ldr r2, =_sbss
 8000ae8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000aec:	20001af0 	.word	0x20001af0

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f923 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff feac 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f93b 	bl	8000dba <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f903 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000074 	.word	0x20000074
 8000b78:	2000007c 	.word	0x2000007c
 8000b7c:	20000078 	.word	0x20000078

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	2000007c 	.word	0x2000007c
 8000ba0:	20001aac 	.word	0x20001aac

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20001aac 	.word	0x20001aac

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4906      	ldr	r1, [pc, #24]	; (8000c50 <__NVIC_EnableIRQ+0x34>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff90 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff2d 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff42 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff35 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa2 	bl	8000d0c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e043      	b.n	8000e72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_DMA_Init+0xa8>)
 8000df2:	4413      	add	r3, r2
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_DMA_Init+0xac>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	091b      	lsrs	r3, r3, #4
 8000dfc:	009a      	lsls	r2, r3, #2
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <HAL_DMA_Init+0xb0>)
 8000e06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	bffdfff8 	.word	0xbffdfff8
 8000e80:	cccccccd 	.word	0xcccccccd
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d04f      	beq.n	8000f50 <HAL_DMA_IRQHandler+0xc8>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d04a      	beq.n	8000f50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0320 	and.w	r3, r3, #32
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d107      	bne.n	8000ed8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0204 	bic.w	r2, r2, #4
 8000ed6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a66      	ldr	r2, [pc, #408]	; (8001078 <HAL_DMA_IRQHandler+0x1f0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d029      	beq.n	8000f36 <HAL_DMA_IRQHandler+0xae>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a65      	ldr	r2, [pc, #404]	; (800107c <HAL_DMA_IRQHandler+0x1f4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d022      	beq.n	8000f32 <HAL_DMA_IRQHandler+0xaa>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a63      	ldr	r2, [pc, #396]	; (8001080 <HAL_DMA_IRQHandler+0x1f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01a      	beq.n	8000f2c <HAL_DMA_IRQHandler+0xa4>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a62      	ldr	r2, [pc, #392]	; (8001084 <HAL_DMA_IRQHandler+0x1fc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d012      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x9e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a60      	ldr	r2, [pc, #384]	; (8001088 <HAL_DMA_IRQHandler+0x200>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00a      	beq.n	8000f20 <HAL_DMA_IRQHandler+0x98>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a5f      	ldr	r2, [pc, #380]	; (800108c <HAL_DMA_IRQHandler+0x204>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d102      	bne.n	8000f1a <HAL_DMA_IRQHandler+0x92>
 8000f14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f18:	e00e      	b.n	8000f38 <HAL_DMA_IRQHandler+0xb0>
 8000f1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1e:	e00b      	b.n	8000f38 <HAL_DMA_IRQHandler+0xb0>
 8000f20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f24:	e008      	b.n	8000f38 <HAL_DMA_IRQHandler+0xb0>
 8000f26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2a:	e005      	b.n	8000f38 <HAL_DMA_IRQHandler+0xb0>
 8000f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f30:	e002      	b.n	8000f38 <HAL_DMA_IRQHandler+0xb0>
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	e000      	b.n	8000f38 <HAL_DMA_IRQHandler+0xb0>
 8000f36:	2304      	movs	r3, #4
 8000f38:	4a55      	ldr	r2, [pc, #340]	; (8001090 <HAL_DMA_IRQHandler+0x208>)
 8000f3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 8094 	beq.w	800106e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f4e:	e08e      	b.n	800106e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	2202      	movs	r2, #2
 8000f56:	409a      	lsls	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d056      	beq.n	800100e <HAL_DMA_IRQHandler+0x186>
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d051      	beq.n	800100e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10b      	bne.n	8000f90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 020a 	bic.w	r2, r2, #10
 8000f86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a38      	ldr	r2, [pc, #224]	; (8001078 <HAL_DMA_IRQHandler+0x1f0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d029      	beq.n	8000fee <HAL_DMA_IRQHandler+0x166>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a37      	ldr	r2, [pc, #220]	; (800107c <HAL_DMA_IRQHandler+0x1f4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d022      	beq.n	8000fea <HAL_DMA_IRQHandler+0x162>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a35      	ldr	r2, [pc, #212]	; (8001080 <HAL_DMA_IRQHandler+0x1f8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01a      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0x15c>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a34      	ldr	r2, [pc, #208]	; (8001084 <HAL_DMA_IRQHandler+0x1fc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d012      	beq.n	8000fde <HAL_DMA_IRQHandler+0x156>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a32      	ldr	r2, [pc, #200]	; (8001088 <HAL_DMA_IRQHandler+0x200>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00a      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x150>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_DMA_IRQHandler+0x204>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d102      	bne.n	8000fd2 <HAL_DMA_IRQHandler+0x14a>
 8000fcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fd0:	e00e      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x168>
 8000fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd6:	e00b      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x168>
 8000fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fdc:	e008      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x168>
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	e005      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x168>
 8000fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe8:	e002      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x168>
 8000fea:	2320      	movs	r3, #32
 8000fec:	e000      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x168>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_DMA_IRQHandler+0x208>)
 8000ff2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	2b00      	cmp	r3, #0
 8001002:	d034      	beq.n	800106e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800100c:	e02f      	b.n	800106e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2208      	movs	r2, #8
 8001014:	409a      	lsls	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d028      	beq.n	8001070 <HAL_DMA_IRQHandler+0x1e8>
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d023      	beq.n	8001070 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 020e 	bic.w	r2, r2, #14
 8001036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001040:	2101      	movs	r1, #1
 8001042:	fa01 f202 	lsl.w	r2, r1, r2
 8001046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	4798      	blx	r3
    }
  }
  return;
 800106e:	bf00      	nop
 8001070:	bf00      	nop
}
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020008 	.word	0x40020008
 800107c:	4002001c 	.word	0x4002001c
 8001080:	40020030 	.word	0x40020030
 8001084:	40020044 	.word	0x40020044
 8001088:	40020058 	.word	0x40020058
 800108c:	4002006c 	.word	0x4002006c
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b08b      	sub	sp, #44	; 0x2c
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e169      	b.n	800137c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8158 	bne.w	8001376 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a9a      	ldr	r2, [pc, #616]	; (8001334 <HAL_GPIO_Init+0x2a0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05e      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010d0:	4a98      	ldr	r2, [pc, #608]	; (8001334 <HAL_GPIO_Init+0x2a0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d875      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010d6:	4a98      	ldr	r2, [pc, #608]	; (8001338 <HAL_GPIO_Init+0x2a4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d058      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010dc:	4a96      	ldr	r2, [pc, #600]	; (8001338 <HAL_GPIO_Init+0x2a4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d86f      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010e2:	4a96      	ldr	r2, [pc, #600]	; (800133c <HAL_GPIO_Init+0x2a8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d052      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010e8:	4a94      	ldr	r2, [pc, #592]	; (800133c <HAL_GPIO_Init+0x2a8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d869      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010ee:	4a94      	ldr	r2, [pc, #592]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04c      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010f4:	4a92      	ldr	r2, [pc, #584]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d863      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010fa:	4a92      	ldr	r2, [pc, #584]	; (8001344 <HAL_GPIO_Init+0x2b0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d046      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 8001100:	4a90      	ldr	r2, [pc, #576]	; (8001344 <HAL_GPIO_Init+0x2b0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d85d      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d82a      	bhi.n	8001160 <HAL_GPIO_Init+0xcc>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d859      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <HAL_GPIO_Init+0x80>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800118f 	.word	0x0800118f
 8001118:	08001169 	.word	0x08001169
 800111c:	0800117b 	.word	0x0800117b
 8001120:	080011bd 	.word	0x080011bd
 8001124:	080011c3 	.word	0x080011c3
 8001128:	080011c3 	.word	0x080011c3
 800112c:	080011c3 	.word	0x080011c3
 8001130:	080011c3 	.word	0x080011c3
 8001134:	080011c3 	.word	0x080011c3
 8001138:	080011c3 	.word	0x080011c3
 800113c:	080011c3 	.word	0x080011c3
 8001140:	080011c3 	.word	0x080011c3
 8001144:	080011c3 	.word	0x080011c3
 8001148:	080011c3 	.word	0x080011c3
 800114c:	080011c3 	.word	0x080011c3
 8001150:	080011c3 	.word	0x080011c3
 8001154:	080011c3 	.word	0x080011c3
 8001158:	08001171 	.word	0x08001171
 800115c:	08001185 	.word	0x08001185
 8001160:	4a79      	ldr	r2, [pc, #484]	; (8001348 <HAL_GPIO_Init+0x2b4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001166:	e02c      	b.n	80011c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e029      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e024      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3308      	adds	r3, #8
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e01f      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	330c      	adds	r3, #12
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e01a      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001196:	2304      	movs	r3, #4
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e013      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	611a      	str	r2, [r3, #16]
          break;
 80011ae:	e009      	b.n	80011c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
          break;
 80011ba:	e003      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          break;
 80011c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d801      	bhi.n	80011ce <HAL_GPIO_Init+0x13a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e001      	b.n	80011d2 <HAL_GPIO_Init+0x13e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d802      	bhi.n	80011e0 <HAL_GPIO_Init+0x14c>
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x152>
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	3b08      	subs	r3, #8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	210f      	movs	r1, #15
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80b1 	beq.w	8001376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001214:	4b4d      	ldr	r3, [pc, #308]	; (800134c <HAL_GPIO_Init+0x2b8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x2b8>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_GPIO_Init+0x2b8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800122c:	4a48      	ldr	r2, [pc, #288]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a40      	ldr	r2, [pc, #256]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1ec>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1e8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3e      	ldr	r2, [pc, #248]	; (800135c <HAL_GPIO_Init+0x2c8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001270:	2303      	movs	r3, #3
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001274:	2304      	movs	r3, #4
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001280:	2300      	movs	r3, #0
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001292:	492f      	ldr	r1, [pc, #188]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	492c      	ldr	r1, [pc, #176]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4928      	ldr	r1, [pc, #160]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4918      	ldr	r1, [pc, #96]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4914      	ldr	r1, [pc, #80]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d021      	beq.n	8001368 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e021      	b.n	8001376 <HAL_GPIO_Init+0x2e2>
 8001332:	bf00      	nop
 8001334:	10320000 	.word	0x10320000
 8001338:	10310000 	.word	0x10310000
 800133c:	10220000 	.word	0x10220000
 8001340:	10210000 	.word	0x10210000
 8001344:	10120000 	.word	0x10120000
 8001348:	10110000 	.word	0x10110000
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400
 8001364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_GPIO_Init+0x304>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4909      	ldr	r1, [pc, #36]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001372:	4013      	ands	r3, r2
 8001374:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f47f ae8e 	bne.w	80010a8 <HAL_GPIO_Init+0x14>
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	372c      	adds	r7, #44	; 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e26c      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d00c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b8f      	ldr	r3, [pc, #572]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d168      	bne.n	8001528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e246      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x76>
 8001464:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a7f      	ldr	r2, [pc, #508]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e02e      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a77      	ldr	r2, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xbc>
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a71      	ldr	r2, [pc, #452]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a67      	ldr	r2, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb64 	bl	8000ba4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb60 	bl	8000ba4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1fa      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe4>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb50 	bl	8000ba4 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb4c 	bl	8000ba4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1e6      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x10c>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1ba      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4939      	ldr	r1, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_RCC_OscConfig+0x270>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb05 	bl	8000ba4 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fb01 	bl	8000ba4 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e19b      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4927      	ldr	r1, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fae4 	bl	8000ba4 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fae0 	bl	8000ba4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e17a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03a      	beq.n	8001680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x274>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fac4 	bl	8000ba4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fac0 	bl	8000ba4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e15a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fad8 	bl	8001bf4 <RCC_Delay>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_RCC_OscConfig+0x274>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff faaa 	bl	8000ba4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff faa6 	bl	8000ba4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e140      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	42420000 	.word	0x42420000
 8001670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b9e      	ldr	r3, [pc, #632]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a6 	beq.w	80017da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a93      	ldr	r2, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b8e      	ldr	r3, [pc, #568]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fa67 	bl	8000ba4 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fa63 	bl	8000ba4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	; 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0fd      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x312>
 8001700:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e02d      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x356>
 8001738:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a6c      	ldr	r2, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001752:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a66      	ldr	r2, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fa17 	bl	8000ba4 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fa13 	bl	8000ba4 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0ab      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x37e>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fa01 	bl	8000ba4 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f9fd 	bl	8000ba4 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e095      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8081 	beq.w	80018e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d061      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d146      	bne.n	8001886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff f9d1 	bl	8000ba4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f9cd 	bl	8000ba4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e067      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	492d      	ldr	r1, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	430b      	orrs	r3, r1
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f9a1 	bl	8000ba4 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff f99d 	bl	8000ba4 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e037      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x46a>
 8001884:	e02f      	b.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f98a 	bl	8000ba4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f986 	bl	8000ba4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e020      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x498>
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e013      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42420060 	.word	0x42420060

080018fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d0      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4965      	ldr	r1, [pc, #404]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800197a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d040      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d115      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e073      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06b      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4936      	ldr	r1, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f8da 	bl	8000ba4 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f8d6 	bl	8000ba4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e053      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d210      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4922      	ldr	r1, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1d0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f838 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08004f04 	.word	0x08004f04
 8001ac8:	20000074 	.word	0x20000074
 8001acc:	20000078 	.word	0x20000078

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b490      	push	{r4, r7}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ad8:	1d3c      	adds	r4, r7, #4
 8001ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae0:	f240 2301 	movw	r3, #513	; 0x201
 8001ae4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x46>
 8001b0e:	e02d      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	623b      	str	r3, [r7, #32]
      break;
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	0c9b      	lsrs	r3, r3, #18
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b22:	4413      	add	r3, r2
 8001b24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c5b      	lsrs	r3, r3, #17
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b42:	4413      	add	r3, r2
 8001b44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4e:	fb02 f203 	mul.w	r2, r2, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	e004      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	623b      	str	r3, [r7, #32]
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6e:	623b      	str	r3, [r7, #32]
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc90      	pop	{r4, r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	08004e58 	.word	0x08004e58
 8001b84:	40021000 	.word	0x40021000
 8001b88:	007a1200 	.word	0x007a1200
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000074 	.word	0x20000074

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff2 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08004f14 	.word	0x08004f14

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08004f14 	.word	0x08004f14

08001bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <RCC_Delay+0x34>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <RCC_Delay+0x38>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c10:	bf00      	nop
  }
  while (Delay --);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <RCC_Delay+0x1c>
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000074 	.word	0x20000074
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e03f      	b.n	8001cc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fe40 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	; 0x24
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f905 	bl	8001e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b08a      	sub	sp, #40	; 0x28
 8001cce:	af02      	add	r7, sp, #8
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d17c      	bne.n	8001de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_UART_Transmit+0x2c>
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e075      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_UART_Transmit+0x3e>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e06e      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2221      	movs	r2, #33	; 0x21
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d1e:	f7fe ff41 	bl	8000ba4 <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d38:	d108      	bne.n	8001d4c <HAL_UART_Transmit+0x82>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	e003      	b.n	8001d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d5c:	e02a      	b.n	8001db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f840 	bl	8001dee <UART_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e036      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	3302      	adds	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e007      	b.n	8001da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1cf      	bne.n	8001d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f810 	bl	8001dee <UART_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e006      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dfe:	e02c      	b.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d028      	beq.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e0e:	f7fe fec9 	bl	8000ba4 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d21d      	bcs.n	8001e5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e00f      	b.n	8001e7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4013      	ands	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d0c3      	beq.n	8001e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ebe:	f023 030c 	bic.w	r3, r3, #12
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <UART_SetConfig+0x114>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d103      	bne.n	8001ef4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001eec:	f7ff fe6e 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	e002      	b.n	8001efa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ef4:	f7ff fe56 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <UART_SetConfig+0x118>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	0119      	lsls	r1, r3, #4
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009a      	lsls	r2, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <UART_SetConfig+0x118>)
 8001f32:	fba3 0302 	umull	r0, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2064      	movs	r0, #100	; 0x64
 8001f3a:	fb00 f303 	mul.w	r3, r0, r3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	3332      	adds	r3, #50	; 0x32
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <UART_SetConfig+0x118>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f50:	4419      	add	r1, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009a      	lsls	r2, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <UART_SetConfig+0x118>)
 8001f6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2064      	movs	r0, #100	; 0x64
 8001f72:	fb00 f303 	mul.w	r3, r0, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	3332      	adds	r3, #50	; 0x32
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <UART_SetConfig+0x118>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	440a      	add	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	51eb851f 	.word	0x51eb851f

08001fa0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fa6:	f3ef 8305 	mrs	r3, IPSR
 8001faa:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb6:	607b      	str	r3, [r7, #4]
  return(result);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <osKernelInitialize+0x32>
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <osKernelInitialize+0x60>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d109      	bne.n	8001fda <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8001fca:	603b      	str	r3, [r7, #0]
  return(result);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001fd2:	f06f 0305 	mvn.w	r3, #5
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e00c      	b.n	8001ff4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <osKernelInitialize+0x60>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <osKernelInitialize+0x60>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e002      	b.n	8001ff4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	200000a8 	.word	0x200000a8

08002004 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200a:	f3ef 8305 	mrs	r3, IPSR
 800200e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002010:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002016:	f3ef 8310 	mrs	r3, PRIMASK
 800201a:	607b      	str	r3, [r7, #4]
  return(result);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <osKernelStart+0x32>
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <osKernelStart+0x64>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d109      	bne.n	800203e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800202a:	f3ef 8311 	mrs	r3, BASEPRI
 800202e:	603b      	str	r3, [r7, #0]
  return(result);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002036:	f06f 0305 	mvn.w	r3, #5
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e00e      	b.n	800205c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <osKernelStart+0x64>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <osKernelStart+0x64>)
 8002048:	2202      	movs	r2, #2
 800204a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800204c:	f001 faa2 	bl	8003594 <vTaskStartScheduler>
      stat = osOK;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e002      	b.n	800205c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000a8 	.word	0x200000a8

0800206c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b092      	sub	sp, #72	; 0x48
 8002070:	af04      	add	r7, sp, #16
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800207c:	f3ef 8305 	mrs	r3, IPSR
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 8094 	bne.w	80021b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8310 	mrs	r3, PRIMASK
 800208e:	623b      	str	r3, [r7, #32]
  return(result);
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 808d 	bne.w	80021b2 <osThreadNew+0x146>
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <osThreadNew+0x150>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d106      	bne.n	80020ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020a0:	f3ef 8311 	mrs	r3, BASEPRI
 80020a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 8082 	bne.w	80021b2 <osThreadNew+0x146>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d07e      	beq.n	80021b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80020b8:	2318      	movs	r3, #24
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80020bc:	2300      	movs	r3, #0
 80020be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80020c0:	f107 031b 	add.w	r3, r7, #27
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d045      	beq.n	800215e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <osThreadNew+0x74>
        name = attr->name;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <osThreadNew+0x9a>
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	2b38      	cmp	r3, #56	; 0x38
 80020f8:	d805      	bhi.n	8002106 <osThreadNew+0x9a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <osThreadNew+0x9e>
        return (NULL);
 8002106:	2300      	movs	r3, #0
 8002108:	e054      	b.n	80021b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00e      	beq.n	8002140 <osThreadNew+0xd4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b5b      	cmp	r3, #91	; 0x5b
 8002128:	d90a      	bls.n	8002140 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <osThreadNew+0xd4>
        mem = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
 800213e:	e010      	b.n	8002162 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10c      	bne.n	8002162 <osThreadNew+0xf6>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <osThreadNew+0xf6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d104      	bne.n	8002162 <osThreadNew+0xf6>
          mem = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
 800215c:	e001      	b.n	8002162 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	2b01      	cmp	r3, #1
 8002166:	d110      	bne.n	800218a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002170:	9202      	str	r2, [sp, #8]
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f001 f83c 	bl	80031fc <xTaskCreateStatic>
 8002184:	4603      	mov	r3, r0
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	e013      	b.n	80021b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d110      	bne.n	80021b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	b29a      	uxth	r2, r3
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f001 f886 	bl	80032b4 <xTaskCreate>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <osThreadNew+0x146>
          hTask = NULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021b2:	697b      	ldr	r3, [r7, #20]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3738      	adds	r7, #56	; 0x38
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200000a8 	.word	0x200000a8

080021c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021c8:	f3ef 8305 	mrs	r3, IPSR
 80021cc:	613b      	str	r3, [r7, #16]
  return(result);
 80021ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10f      	bne.n	80021f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d4:	f3ef 8310 	mrs	r3, PRIMASK
 80021d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <osDelay+0x34>
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <osDelay+0x58>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d109      	bne.n	80021fc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021e8:	f3ef 8311 	mrs	r3, BASEPRI
 80021ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <osDelay+0x3c>
    stat = osErrorISR;
 80021f4:	f06f 0305 	mvn.w	r3, #5
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e007      	b.n	800220c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f990 	bl	800352c <vTaskDelay>
    }
  }

  return (stat);
 800220c:	697b      	ldr	r3, [r7, #20]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200000a8 	.word	0x200000a8

0800221c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800222c:	f3ef 8305 	mrs	r3, IPSR
 8002230:	61bb      	str	r3, [r7, #24]
  return(result);
 8002232:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002234:	2b00      	cmp	r3, #0
 8002236:	d16f      	bne.n	8002318 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	617b      	str	r3, [r7, #20]
  return(result);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d169      	bne.n	8002318 <osMessageQueueNew+0xfc>
 8002244:	4b37      	ldr	r3, [pc, #220]	; (8002324 <osMessageQueueNew+0x108>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d105      	bne.n	8002258 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800224c:	f3ef 8311 	mrs	r3, BASEPRI
 8002250:	613b      	str	r3, [r7, #16]
  return(result);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d15f      	bne.n	8002318 <osMessageQueueNew+0xfc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d05c      	beq.n	8002318 <osMessageQueueNew+0xfc>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d059      	beq.n	8002318 <osMessageQueueNew+0xfc>
    mem = -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d029      	beq.n	80022c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <osMessageQueueNew+0x82>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b4f      	cmp	r3, #79	; 0x4f
 800227e:	d90e      	bls.n	800229e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <osMessageQueueNew+0x82>
        mem = 1;
 8002298:	2301      	movs	r3, #1
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	e014      	b.n	80022c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d110      	bne.n	80022c8 <osMessageQueueNew+0xac>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <osMessageQueueNew+0xac>
          mem = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	e001      	b.n	80022c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10b      	bne.n	80022e6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2100      	movs	r1, #0
 80022d8:	9100      	str	r1, [sp, #0]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa53 	bl	8002788 <xQueueGenericCreateStatic>
 80022e2:	6278      	str	r0, [r7, #36]	; 0x24
 80022e4:	e008      	b.n	80022f8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80022ec:	2200      	movs	r2, #0
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fac0 	bl	8002876 <xQueueGenericCreate>
 80022f6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e001      	b.n	8002310 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002310:	69f9      	ldr	r1, [r7, #28]
 8002312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002314:	f000 ff16 	bl	8003144 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800231a:	4618      	mov	r0, r3
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200000a8 	.word	0x200000a8

08002328 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002340:	f3ef 8305 	mrs	r3, IPSR
 8002344:	61fb      	str	r3, [r7, #28]
  return(result);
 8002346:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234c:	f3ef 8310 	mrs	r3, PRIMASK
 8002350:	61bb      	str	r3, [r7, #24]
  return(result);
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <osMessageQueuePut+0x44>
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <osMessageQueuePut+0xe0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d12e      	bne.n	80023be <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002360:	f3ef 8311 	mrs	r3, BASEPRI
 8002364:	617b      	str	r3, [r7, #20]
  return(result);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d028      	beq.n	80023be <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <osMessageQueuePut+0x56>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <osMessageQueuePut+0x56>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800237e:	f06f 0303 	mvn.w	r3, #3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002384:	e039      	b.n	80023fa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800238a:	f107 0210 	add.w	r2, r7, #16
 800238e:	2300      	movs	r3, #0
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6a38      	ldr	r0, [r7, #32]
 8002394:	f000 fbce 	bl	8002b34 <xQueueGenericSendFromISR>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d003      	beq.n	80023a6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800239e:	f06f 0302 	mvn.w	r3, #2
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023a4:	e029      	b.n	80023fa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d026      	beq.n	80023fa <osMessageQueuePut+0xd2>
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <osMessageQueuePut+0xe4>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023bc:	e01d      	b.n	80023fa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <osMessageQueuePut+0xa2>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80023ca:	f06f 0303 	mvn.w	r3, #3
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
 80023d0:	e014      	b.n	80023fc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	6a38      	ldr	r0, [r7, #32]
 80023da:	f000 faad 	bl	8002938 <xQueueGenericSend>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d00b      	beq.n	80023fc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80023ea:	f06f 0301 	mvn.w	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	e004      	b.n	80023fc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80023f2:	f06f 0302 	mvn.w	r3, #2
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	e000      	b.n	80023fc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80023fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200000a8 	.word	0x200000a8
 800240c:	e000ed04 	.word	0xe000ed04

08002410 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002426:	f3ef 8305 	mrs	r3, IPSR
 800242a:	61fb      	str	r3, [r7, #28]
  return(result);
 800242c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8310 	mrs	r3, PRIMASK
 8002436:	61bb      	str	r3, [r7, #24]
  return(result);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <osMessageQueueGet+0x42>
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <osMessageQueueGet+0xdc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d12e      	bne.n	80024a4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002446:	f3ef 8311 	mrs	r3, BASEPRI
 800244a:	617b      	str	r3, [r7, #20]
  return(result);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d028      	beq.n	80024a4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <osMessageQueueGet+0x54>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <osMessageQueueGet+0x54>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002464:	f06f 0303 	mvn.w	r3, #3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800246a:	e038      	b.n	80024de <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	461a      	mov	r2, r3
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	6a38      	ldr	r0, [r7, #32]
 800247a:	f000 fcd3 	bl	8002e24 <xQueueReceiveFromISR>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d003      	beq.n	800248c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002484:	f06f 0302 	mvn.w	r3, #2
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800248a:	e028      	b.n	80024de <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d025      	beq.n	80024de <osMessageQueueGet+0xce>
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <osMessageQueueGet+0xe0>)
 8002494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80024a2:	e01c      	b.n	80024de <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <osMessageQueueGet+0xa0>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80024b0:	f06f 0303 	mvn.w	r3, #3
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
 80024b6:	e013      	b.n	80024e0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	6a38      	ldr	r0, [r7, #32]
 80024be:	f000 fbd1 	bl	8002c64 <xQueueReceive>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d00b      	beq.n	80024e0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80024ce:	f06f 0301 	mvn.w	r3, #1
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	e004      	b.n	80024e0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80024d6:	f06f 0302 	mvn.w	r3, #2
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	e000      	b.n	80024e0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80024de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200000a8 	.word	0x200000a8
 80024f0:	e000ed04 	.word	0xe000ed04

080024f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <vApplicationGetIdleTaskMemory+0x28>)
 8002504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <vApplicationGetIdleTaskMemory+0x2c>)
 800250a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	200000ac 	.word	0x200000ac
 8002520:	20000108 	.word	0x20000108

08002524 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <vApplicationGetTimerTaskMemory+0x2c>)
 8002534:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <vApplicationGetTimerTaskMemory+0x30>)
 800253a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000308 	.word	0x20000308
 8002554:	20000364 	.word	0x20000364

08002558 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0208 	add.w	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f103 0208 	add.w	r2, r3, #8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0208 	add.w	r2, r3, #8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d103      	bne.n	8002614 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e00c      	b.n	800262e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3308      	adds	r3, #8
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	e002      	b.n	8002622 <vListInsert+0x2e>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d2f6      	bcs.n	800261c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	601a      	str	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6892      	ldr	r2, [r2, #8]
 800267a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6852      	ldr	r2, [r2, #4]
 8002684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d103      	bne.n	8002698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026e2:	f002 f883 	bl	80047ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	441a      	add	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	3b01      	subs	r3, #1
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	441a      	add	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d114      	bne.n	8002762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01a      	beq.n	8002776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3310      	adds	r3, #16
 8002744:	4618      	mov	r0, r3
 8002746:	f001 f9af 	bl	8003aa8 <xTaskRemoveFromEventList>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <xQueueGenericReset+0xcc>)
 8002752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	e009      	b.n	8002776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3310      	adds	r3, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fef6 	bl	8002558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3324      	adds	r3, #36	; 0x24
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fef1 	bl	8002558 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002776:	f002 f869 	bl	800484c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08e      	sub	sp, #56	; 0x38
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <xQueueGenericCreateStatic+0x52>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <xQueueGenericCreateStatic+0x56>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <xQueueGenericCreateStatic+0x58>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	623b      	str	r3, [r7, #32]
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <xQueueGenericCreateStatic+0x7e>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <xQueueGenericCreateStatic+0x82>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <xQueueGenericCreateStatic+0x84>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	61fb      	str	r3, [r7, #28]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002826:	2350      	movs	r3, #80	; 0x50
 8002828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d00a      	beq.n	8002846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	61bb      	str	r3, [r7, #24]
}
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002858:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f843 	bl	80028f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800286e:	4618      	mov	r0, r3
 8002870:	3730      	adds	r7, #48	; 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002876:	b580      	push	{r7, lr}
 8002878:	b08a      	sub	sp, #40	; 0x28
 800287a:	af02      	add	r7, sp, #8
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	613b      	str	r3, [r7, #16]
}
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	e004      	b.n	80028b6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3350      	adds	r3, #80	; 0x50
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 f896 	bl	80049ec <pvPortMalloc>
 80028c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00f      	beq.n	80028e8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	3350      	adds	r3, #80	; 0x50
 80028cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028d6:	79fa      	ldrb	r2, [r7, #7]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f805 	bl	80028f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028e8:	69bb      	ldr	r3, [r7, #24]
	}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e002      	b.n	8002914 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002920:	2101      	movs	r1, #1
 8002922:	69b8      	ldr	r0, [r7, #24]
 8002924:	f7ff fec8 	bl	80026b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericSend+0x32>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <xQueueGenericSend+0x40>
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <xQueueGenericSend+0x44>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <xQueueGenericSend+0x46>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <xQueueGenericSend+0x60>
	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002994:	bf00      	nop
 8002996:	e7fe      	b.n	8002996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d103      	bne.n	80029a6 <xQueueGenericSend+0x6e>
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <xQueueGenericSend+0x72>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <xQueueGenericSend+0x74>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	623b      	str	r3, [r7, #32]
}
 80029c2:	bf00      	nop
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029c6:	f001 fa31 	bl	8003e2c <xTaskGetSchedulerState>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <xQueueGenericSend+0x9e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <xQueueGenericSend+0xa2>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <xQueueGenericSend+0xa4>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	61fb      	str	r3, [r7, #28]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029f6:	f001 fef9 	bl	80047ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <xQueueGenericSend+0xd4>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d129      	bne.n	8002a60 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a12:	f000 fa87 	bl	8002f24 <prvCopyDataToQueue>
 8002a16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f83f 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <xQueueGenericSend+0x1f8>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	e00a      	b.n	8002a58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a48:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <xQueueGenericSend+0x1f8>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a58:	f001 fef8 	bl	800484c <vPortExitCritical>
				return pdPASS;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e063      	b.n	8002b28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a66:	f001 fef1 	bl	800484c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e05c      	b.n	8002b28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f879 	bl	8003b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a82:	f001 fee3 	bl	800484c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a86:	f000 fdeb 	bl	8003660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a8a:	f001 feaf 	bl	80047ec <vPortEnterCritical>
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d103      	bne.n	8002aa4 <xQueueGenericSend+0x16c>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSend+0x182>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aba:	f001 fec7 	bl	800484c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002abe:	1d3a      	adds	r2, r7, #4
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f868 	bl	8003b9c <xTaskCheckForTimeOut>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d124      	bne.n	8002b1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad4:	f000 fb1e 	bl	8003114 <prvIsQueueFull>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d018      	beq.n	8002b10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ff8e 	bl	8003a08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aee:	f000 faa9 	bl	8003044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002af2:	f000 fdc3 	bl	800367c <xTaskResumeAll>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f af7c 	bne.w	80029f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <xQueueGenericSend+0x1f8>)
 8002b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	e772      	b.n	80029f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b12:	f000 fa97 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b16:	f000 fdb1 	bl	800367c <xTaskResumeAll>
 8002b1a:	e76c      	b.n	80029f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b1e:	f000 fa91 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b22:	f000 fdab 	bl	800367c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b26:	2300      	movs	r3, #0
		}
	}
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3738      	adds	r7, #56	; 0x38
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <xQueueGenericSendFromISR+0x3c>
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <xQueueGenericSendFromISR+0x40>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <xQueueGenericSendFromISR+0x42>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	623b      	str	r3, [r7, #32]
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d103      	bne.n	8002b9e <xQueueGenericSendFromISR+0x6a>
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x6e>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericSendFromISR+0x70>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	61fb      	str	r3, [r7, #28]
}
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bbe:	f001 fed7 	bl	8004970 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	61ba      	str	r2, [r7, #24]
 8002bd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <xQueueGenericSendFromISR+0xbc>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d12c      	bne.n	8002c4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c00:	f000 f990 	bl	8002f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d112      	bne.n	8002c34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 ff44 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	b25a      	sxtb	r2, r3
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c44:	2301      	movs	r3, #1
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c48:	e001      	b.n	8002c4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3738      	adds	r7, #56	; 0x38
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <xQueueReceive+0x30>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	623b      	str	r3, [r7, #32]
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <xQueueReceive+0x3e>
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <xQueueReceive+0x42>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueReceive+0x44>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueReceive+0x5e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61fb      	str	r3, [r7, #28]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cc2:	f001 f8b3 	bl	8003e2c <xTaskGetSchedulerState>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xQueueReceive+0x6e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueReceive+0x72>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueReceive+0x74>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueReceive+0x8e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61bb      	str	r3, [r7, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cf2:	f001 fd7b 	bl	80047ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f000 f977 	bl	8002ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00f      	beq.n	8002d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fec2 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <xQueueReceive+0x1bc>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d3a:	f001 fd87 	bl	800484c <vPortExitCritical>
				return pdPASS;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e069      	b.n	8002e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d48:	f001 fd80 	bl	800484c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e062      	b.n	8002e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 ff08 	bl	8003b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d64:	f001 fd72 	bl	800484c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d68:	f000 fc7a 	bl	8003660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d6c:	f001 fd3e 	bl	80047ec <vPortEnterCritical>
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d103      	bne.n	8002d86 <xQueueReceive+0x122>
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d103      	bne.n	8002d9c <xQueueReceive+0x138>
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d9c:	f001 fd56 	bl	800484c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da0:	1d3a      	adds	r2, r7, #4
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fef7 	bl	8003b9c <xTaskCheckForTimeOut>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d123      	bne.n	8002dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db6:	f000 f997 	bl	80030e8 <prvIsQueueEmpty>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d017      	beq.n	8002df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fe1d 	bl	8003a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd0:	f000 f938 	bl	8003044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dd4:	f000 fc52 	bl	800367c <xTaskResumeAll>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d189      	bne.n	8002cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <xQueueReceive+0x1bc>)
 8002de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	e780      	b.n	8002cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df2:	f000 f927 	bl	8003044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002df6:	f000 fc41 	bl	800367c <xTaskResumeAll>
 8002dfa:	e77a      	b.n	8002cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 f921 	bl	8003044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e02:	f000 fc3b 	bl	800367c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e08:	f000 f96e 	bl	80030e8 <prvIsQueueEmpty>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f43f af6f 	beq.w	8002cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3730      	adds	r7, #48	; 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	623b      	str	r3, [r7, #32]
}
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <xQueueReceiveFromISR+0x3a>
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <xQueueReceiveFromISR+0x3e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueReceiveFromISR+0x40>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61fb      	str	r3, [r7, #28]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7e:	f001 fd77 	bl	8004970 <vPortValidateInterruptPriority>
	__asm volatile
 8002e82:	f3ef 8211 	mrs	r2, BASEPRI
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	61ba      	str	r2, [r7, #24]
 8002e98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002e9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02f      	beq.n	8002f0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb8:	f000 f89e 	bl	8002ff8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002ec4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d112      	bne.n	8002ef4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	3310      	adds	r3, #16
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fde4 	bl	8003aa8 <xTaskRemoveFromEventList>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00e      	beq.n	8002f04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e007      	b.n	8002f04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef8:	3301      	adds	r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	b25a      	sxtb	r2, r3
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002f04:	2301      	movs	r3, #1
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
 8002f08:	e001      	b.n	8002f0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f383 8811 	msr	BASEPRI, r3
}
 8002f18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3738      	adds	r7, #56	; 0x38
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14d      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 ff8a 	bl	8003e68 <xTaskPriorityDisinherit>
 8002f54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	e043      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d119      	bne.n	8002f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6898      	ldr	r0, [r3, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	f001 ff38 	bl	8004de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d32b      	bcc.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	e026      	b.n	8002fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68d8      	ldr	r0, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f001 ff1e 	bl	8004de4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	425b      	negs	r3, r3
 8002fce:	441a      	add	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d105      	bne.n	8002fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fee:	697b      	ldr	r3, [r7, #20]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d303      	bcc.n	800302c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	461a      	mov	r2, r3
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f001 fed4 	bl	8004de4 <memcpy>
	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800304c:	f001 fbce 	bl	80047ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003058:	e011      	b.n	800307e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3324      	adds	r3, #36	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fd1e 	bl	8003aa8 <xTaskRemoveFromEventList>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003072:	f000 fdf5 	bl	8003c60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3b01      	subs	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	dce9      	bgt.n	800305a <prvUnlockQueue+0x16>
 8003086:	e000      	b.n	800308a <prvUnlockQueue+0x46>
					break;
 8003088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003092:	f001 fbdb 	bl	800484c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003096:	f001 fba9 	bl	80047ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a2:	e011      	b.n	80030c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fcf9 	bl	8003aa8 <xTaskRemoveFromEventList>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030bc:	f000 fdd0 	bl	8003c60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c0:	7bbb      	ldrb	r3, [r7, #14]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dce9      	bgt.n	80030a4 <prvUnlockQueue+0x60>
 80030d0:	e000      	b.n	80030d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	22ff      	movs	r2, #255	; 0xff
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030dc:	f001 fbb6 	bl	800484c <vPortExitCritical>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f0:	f001 fb7c 	bl	80047ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e001      	b.n	8003106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003106:	f001 fba1 	bl	800484c <vPortExitCritical>

	return xReturn;
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800311c:	f001 fb66 	bl	80047ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	429a      	cmp	r2, r3
 800312a:	d102      	bne.n	8003132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e001      	b.n	8003136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003136:	f001 fb89 	bl	800484c <vPortExitCritical>

	return xReturn;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e014      	b.n	800317e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <vQueueAddToRegistry+0x4c>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003160:	490b      	ldr	r1, [pc, #44]	; (8003190 <vQueueAddToRegistry+0x4c>)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <vQueueAddToRegistry+0x4c>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003176:	e006      	b.n	8003186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9e7      	bls.n	8003154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	20001ab0 	.word	0x20001ab0

08003194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031a4:	f001 fb22 	bl	80047ec <vPortEnterCritical>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d103      	bne.n	80031be <vQueueWaitForMessageRestricted+0x2a>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c4:	b25b      	sxtb	r3, r3
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d103      	bne.n	80031d4 <vQueueWaitForMessageRestricted+0x40>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d4:	f001 fb3a 	bl	800484c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3324      	adds	r3, #36	; 0x24
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fc31 	bl	8003a50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff28 	bl	8003044 <prvUnlockQueue>
	}
 80031f4:	bf00      	nop
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08e      	sub	sp, #56	; 0x38
 8003200:	af04      	add	r7, sp, #16
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	623b      	str	r3, [r7, #32]
}
 8003222:	bf00      	nop
 8003224:	e7fe      	b.n	8003224 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xTaskCreateStatic+0x46>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61fb      	str	r3, [r7, #28]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003242:	235c      	movs	r3, #92	; 0x5c
 8003244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b5c      	cmp	r3, #92	; 0x5c
 800324a:	d00a      	beq.n	8003262 <xTaskCreateStatic+0x66>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61bb      	str	r3, [r7, #24]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01e      	beq.n	80032a6 <xTaskCreateStatic+0xaa>
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01b      	beq.n	80032a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800326e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003276:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003280:	2300      	movs	r3, #0
 8003282:	9303      	str	r3, [sp, #12]
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f850 	bl	800333e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032a0:	f000 f8d4 	bl	800344c <prvAddNewTaskToReadyList>
 80032a4:	e001      	b.n	80032aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032aa:	697b      	ldr	r3, [r7, #20]
	}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08c      	sub	sp, #48	; 0x30
 80032b8:	af04      	add	r7, sp, #16
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 fb8f 	bl	80049ec <pvPortMalloc>
 80032ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032d6:	205c      	movs	r0, #92	; 0x5c
 80032d8:	f001 fb88 	bl	80049ec <pvPortMalloc>
 80032dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ea:	e005      	b.n	80032f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ec:	6978      	ldr	r0, [r7, #20]
 80032ee:	f001 fc41 	bl	8004b74 <vPortFree>
 80032f2:	e001      	b.n	80032f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d017      	beq.n	800332e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	2300      	movs	r3, #0
 800330a:	9303      	str	r3, [sp, #12]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	9302      	str	r3, [sp, #8]
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f80e 	bl	800333e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003322:	69f8      	ldr	r0, [r7, #28]
 8003324:	f000 f892 	bl	800344c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003328:	2301      	movs	r3, #1
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e002      	b.n	8003334 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003334:	69bb      	ldr	r3, [r7, #24]
	}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b088      	sub	sp, #32
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	461a      	mov	r2, r3
 8003356:	21a5      	movs	r1, #165	; 0xa5
 8003358:	f001 fd52 	bl	8004e00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003366:	3b01      	subs	r3, #1
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f023 0307 	bic.w	r3, r3, #7
 8003374:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	617b      	str	r3, [r7, #20]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e012      	b.n	80033c2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	7819      	ldrb	r1, [r3, #0]
 80033a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	3334      	adds	r3, #52	; 0x34
 80033ac:	460a      	mov	r2, r1
 80033ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	3301      	adds	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d9e9      	bls.n	800339c <prvInitialiseNewTask+0x5e>
 80033c8:	e000      	b.n	80033cc <prvInitialiseNewTask+0x8e>
		{
			break;
 80033ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	2b37      	cmp	r3, #55	; 0x37
 80033d8:	d901      	bls.n	80033de <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033da:	2337      	movs	r3, #55	; 0x37
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	2200      	movs	r2, #0
 80033ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f8ce 	bl	8002596 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	3318      	adds	r3, #24
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f8c9 	bl	8002596 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003408:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	69b8      	ldr	r0, [r7, #24]
 800342e:	f001 f8ef 	bl	8004610 <pxPortInitialiseStack>
 8003432:	4602      	mov	r2, r0
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003444:	bf00      	nop
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003454:	f001 f9ca 	bl	80047ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <prvAddNewTaskToReadyList+0xc4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <prvAddNewTaskToReadyList+0xc4>)
 8003460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800346a:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <prvAddNewTaskToReadyList+0xc4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d110      	bne.n	800349a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003478:	f000 fc16 	bl	8003ca8 <prvInitialiseTaskLists>
 800347c:	e00d      	b.n	800349a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <prvAddNewTaskToReadyList+0xcc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	429a      	cmp	r2, r3
 8003492:	d802      	bhi.n	800349a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <prvAddNewTaskToReadyList+0xd0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a1e      	ldr	r2, [pc, #120]	; (800351c <prvAddNewTaskToReadyList+0xd0>)
 80034a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <prvAddNewTaskToReadyList+0xd0>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <prvAddNewTaskToReadyList+0xd4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d903      	bls.n	80034c0 <prvAddNewTaskToReadyList+0x74>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	4a18      	ldr	r2, [pc, #96]	; (8003520 <prvAddNewTaskToReadyList+0xd4>)
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <prvAddNewTaskToReadyList+0xd8>)
 80034ce:	441a      	add	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f7ff f869 	bl	80025ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034dc:	f001 f9b6 	bl	800484c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <prvAddNewTaskToReadyList+0xcc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <prvAddNewTaskToReadyList+0xc8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d207      	bcs.n	8003506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <prvAddNewTaskToReadyList+0xdc>)
 80034f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000c38 	.word	0x20000c38
 8003514:	20000764 	.word	0x20000764
 8003518:	20000c44 	.word	0x20000c44
 800351c:	20000c54 	.word	0x20000c54
 8003520:	20000c40 	.word	0x20000c40
 8003524:	20000768 	.word	0x20000768
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d017      	beq.n	800356e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <vTaskDelay+0x60>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <vTaskDelay+0x30>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	60bb      	str	r3, [r7, #8]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800355c:	f000 f880 	bl	8003660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003560:	2100      	movs	r1, #0
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fcee 	bl	8003f44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003568:	f000 f888 	bl	800367c <xTaskResumeAll>
 800356c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <vTaskDelay+0x64>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000c60 	.word	0x20000c60
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035a2:	463a      	mov	r2, r7
 80035a4:	1d39      	adds	r1, r7, #4
 80035a6:	f107 0308 	add.w	r3, r7, #8
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ffa2 	bl	80024f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	9202      	str	r2, [sp, #8]
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	460a      	mov	r2, r1
 80035c2:	4921      	ldr	r1, [pc, #132]	; (8003648 <vTaskStartScheduler+0xb4>)
 80035c4:	4821      	ldr	r0, [pc, #132]	; (800364c <vTaskStartScheduler+0xb8>)
 80035c6:	f7ff fe19 	bl	80031fc <xTaskCreateStatic>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a20      	ldr	r2, [pc, #128]	; (8003650 <vTaskStartScheduler+0xbc>)
 80035ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035d0:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <vTaskStartScheduler+0xbc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80035d8:	2301      	movs	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e001      	b.n	80035e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d102      	bne.n	80035ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035e8:	f000 fd00 	bl	8003fec <xTimerCreateTimerTask>
 80035ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d116      	bne.n	8003622 <vTaskStartScheduler+0x8e>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	613b      	str	r3, [r7, #16]
}
 8003606:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <vTaskStartScheduler+0xc0>)
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
 800360e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <vTaskStartScheduler+0xc4>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <vTaskStartScheduler+0xc8>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800361c:	f001 f874 	bl	8004708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003620:	e00e      	b.n	8003640 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d10a      	bne.n	8003640 <vTaskStartScheduler+0xac>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60fb      	str	r3, [r7, #12]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <vTaskStartScheduler+0xaa>
}
 8003640:	bf00      	nop
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	08004e68 	.word	0x08004e68
 800364c:	08003c79 	.word	0x08003c79
 8003650:	20000c5c 	.word	0x20000c5c
 8003654:	20000c58 	.word	0x20000c58
 8003658:	20000c44 	.word	0x20000c44
 800365c:	20000c3c 	.word	0x20000c3c

08003660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <vTaskSuspendAll+0x18>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a03      	ldr	r2, [pc, #12]	; (8003678 <vTaskSuspendAll+0x18>)
 800366c:	6013      	str	r3, [r2, #0]
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000c60 	.word	0x20000c60

0800367c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <xTaskResumeAll+0x118>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	603b      	str	r3, [r7, #0]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036a8:	f001 f8a0 	bl	80047ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <xTaskResumeAll+0x118>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	4a38      	ldr	r2, [pc, #224]	; (8003794 <xTaskResumeAll+0x118>)
 80036b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <xTaskResumeAll+0x118>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d162      	bne.n	8003784 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <xTaskResumeAll+0x11c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d05e      	beq.n	8003784 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036c6:	e02f      	b.n	8003728 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <xTaskResumeAll+0x120>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3318      	adds	r3, #24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe ffc5 	bl	8002664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe ffc0 	bl	8002664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <xTaskResumeAll+0x124>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d903      	bls.n	80036f8 <xTaskResumeAll+0x7c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <xTaskResumeAll+0x124>)
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <xTaskResumeAll+0x128>)
 8003706:	441a      	add	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f7fe ff4d 	bl	80025ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <xTaskResumeAll+0x12c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <xTaskResumeAll+0x130>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <xTaskResumeAll+0x120>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1cb      	bne.n	80036c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003736:	f000 fb55 	bl	8003de4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <xTaskResumeAll+0x134>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003746:	f000 f845 	bl	80037d4 <xTaskIncrementTick>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <xTaskResumeAll+0x130>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3b01      	subs	r3, #1
 800375a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f1      	bne.n	8003746 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <xTaskResumeAll+0x134>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <xTaskResumeAll+0x130>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <xTaskResumeAll+0x138>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003784:	f001 f862 	bl	800484c <vPortExitCritical>

	return xAlreadyYielded;
 8003788:	68bb      	ldr	r3, [r7, #8]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000c60 	.word	0x20000c60
 8003798:	20000c38 	.word	0x20000c38
 800379c:	20000bf8 	.word	0x20000bf8
 80037a0:	20000c40 	.word	0x20000c40
 80037a4:	20000768 	.word	0x20000768
 80037a8:	20000764 	.word	0x20000764
 80037ac:	20000c4c 	.word	0x20000c4c
 80037b0:	20000c48 	.word	0x20000c48
 80037b4:	e000ed04 	.word	0xe000ed04

080037b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <xTaskGetTickCount+0x18>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037c4:	687b      	ldr	r3, [r7, #4]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000c3c 	.word	0x20000c3c

080037d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037de:	4b51      	ldr	r3, [pc, #324]	; (8003924 <xTaskIncrementTick+0x150>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 808e 	bne.w	8003904 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <xTaskIncrementTick+0x154>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037f0:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <xTaskIncrementTick+0x154>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d120      	bne.n	800383e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037fc:	4b4b      	ldr	r3, [pc, #300]	; (800392c <xTaskIncrementTick+0x158>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <xTaskIncrementTick+0x48>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	603b      	str	r3, [r7, #0]
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <xTaskIncrementTick+0x46>
 800381c:	4b43      	ldr	r3, [pc, #268]	; (800392c <xTaskIncrementTick+0x158>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b43      	ldr	r3, [pc, #268]	; (8003930 <xTaskIncrementTick+0x15c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a41      	ldr	r2, [pc, #260]	; (800392c <xTaskIncrementTick+0x158>)
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4a41      	ldr	r2, [pc, #260]	; (8003930 <xTaskIncrementTick+0x15c>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b40      	ldr	r3, [pc, #256]	; (8003934 <xTaskIncrementTick+0x160>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	4a3f      	ldr	r2, [pc, #252]	; (8003934 <xTaskIncrementTick+0x160>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	f000 fad3 	bl	8003de4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800383e:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <xTaskIncrementTick+0x164>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d34e      	bcc.n	80038e6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003848:	4b38      	ldr	r3, [pc, #224]	; (800392c <xTaskIncrementTick+0x158>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <xTaskIncrementTick+0x82>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xTaskIncrementTick+0x84>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <xTaskIncrementTick+0x164>)
 800385e:	f04f 32ff 	mov.w	r2, #4294967295
 8003862:	601a      	str	r2, [r3, #0]
					break;
 8003864:	e03f      	b.n	80038e6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003866:	4b31      	ldr	r3, [pc, #196]	; (800392c <xTaskIncrementTick+0x158>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d203      	bcs.n	8003886 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800387e:	4a2e      	ldr	r2, [pc, #184]	; (8003938 <xTaskIncrementTick+0x164>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6013      	str	r3, [r2, #0]
						break;
 8003884:	e02f      	b.n	80038e6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe feea 	bl	8002664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3318      	adds	r3, #24
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fee1 	bl	8002664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4b25      	ldr	r3, [pc, #148]	; (800393c <xTaskIncrementTick+0x168>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d903      	bls.n	80038b6 <xTaskIncrementTick+0xe2>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	4a22      	ldr	r2, [pc, #136]	; (800393c <xTaskIncrementTick+0x168>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <xTaskIncrementTick+0x16c>)
 80038c4:	441a      	add	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f7fe fe6e 	bl	80025ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <xTaskIncrementTick+0x170>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3b3      	bcc.n	8003848 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e4:	e7b0      	b.n	8003848 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038e6:	4b17      	ldr	r3, [pc, #92]	; (8003944 <xTaskIncrementTick+0x170>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	4914      	ldr	r1, [pc, #80]	; (8003940 <xTaskIncrementTick+0x16c>)
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d907      	bls.n	800390e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e004      	b.n	800390e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <xTaskIncrementTick+0x174>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <xTaskIncrementTick+0x174>)
 800390c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <xTaskIncrementTick+0x178>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000c60 	.word	0x20000c60
 8003928:	20000c3c 	.word	0x20000c3c
 800392c:	20000bf0 	.word	0x20000bf0
 8003930:	20000bf4 	.word	0x20000bf4
 8003934:	20000c50 	.word	0x20000c50
 8003938:	20000c58 	.word	0x20000c58
 800393c:	20000c40 	.word	0x20000c40
 8003940:	20000768 	.word	0x20000768
 8003944:	20000764 	.word	0x20000764
 8003948:	20000c48 	.word	0x20000c48
 800394c:	20000c4c 	.word	0x20000c4c

08003950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <vTaskSwitchContext+0xa4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <vTaskSwitchContext+0xa8>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003964:	e041      	b.n	80039ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <vTaskSwitchContext+0xa8>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <vTaskSwitchContext+0xac>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e010      	b.n	8003996 <vTaskSwitchContext+0x46>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <vTaskSwitchContext+0x40>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	607b      	str	r3, [r7, #4]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <vTaskSwitchContext+0x3e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	491a      	ldr	r1, [pc, #104]	; (8003a00 <vTaskSwitchContext+0xb0>)
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0e4      	beq.n	8003974 <vTaskSwitchContext+0x24>
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <vTaskSwitchContext+0xb0>)
 80039b6:	4413      	add	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3308      	adds	r3, #8
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d104      	bne.n	80039da <vTaskSwitchContext+0x8a>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <vTaskSwitchContext+0xb4>)
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4a05      	ldr	r2, [pc, #20]	; (80039fc <vTaskSwitchContext+0xac>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6013      	str	r3, [r2, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	20000c60 	.word	0x20000c60
 80039f8:	20000c4c 	.word	0x20000c4c
 80039fc:	20000c40 	.word	0x20000c40
 8003a00:	20000768 	.word	0x20000768
 8003a04:	20000764 	.word	0x20000764

08003a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60fb      	str	r3, [r7, #12]
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <vTaskPlaceOnEventList+0x44>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3318      	adds	r3, #24
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe fddc 	bl	80025f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	6838      	ldr	r0, [r7, #0]
 8003a40:	f000 fa80 	bl	8003f44 <prvAddCurrentTaskToDelayedList>
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000764 	.word	0x20000764

08003a50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	617b      	str	r3, [r7, #20]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7fe fd94 	bl	80025ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	68b8      	ldr	r0, [r7, #8]
 8003a96:	f000 fa55 	bl	8003f44 <prvAddCurrentTaskToDelayedList>
	}
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000764 	.word	0x20000764

08003aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60fb      	str	r3, [r7, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3318      	adds	r3, #24
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fdc3 	bl	8002664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <xTaskRemoveFromEventList+0xb0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11d      	bne.n	8003b22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fdba 	bl	8002664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <xTaskRemoveFromEventList+0xb4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d903      	bls.n	8003b04 <xTaskRemoveFromEventList+0x5c>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <xTaskRemoveFromEventList+0xb4>)
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <xTaskRemoveFromEventList+0xb8>)
 8003b12:	441a      	add	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7fe fd47 	bl	80025ae <vListInsertEnd>
 8003b20:	e005      	b.n	8003b2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3318      	adds	r3, #24
 8003b26:	4619      	mov	r1, r3
 8003b28:	480e      	ldr	r0, [pc, #56]	; (8003b64 <xTaskRemoveFromEventList+0xbc>)
 8003b2a:	f7fe fd40 	bl	80025ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <xTaskRemoveFromEventList+0xc0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d905      	bls.n	8003b48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <xTaskRemoveFromEventList+0xc4>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e001      	b.n	8003b4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b4c:	697b      	ldr	r3, [r7, #20]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000c60 	.word	0x20000c60
 8003b5c:	20000c40 	.word	0x20000c40
 8003b60:	20000768 	.word	0x20000768
 8003b64:	20000bf8 	.word	0x20000bf8
 8003b68:	20000764 	.word	0x20000764
 8003b6c:	20000c4c 	.word	0x20000c4c

08003b70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <vTaskInternalSetTimeOutState+0x24>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <vTaskInternalSetTimeOutState+0x28>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000c50 	.word	0x20000c50
 8003b98:	20000c3c 	.word	0x20000c3c

08003b9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	613b      	str	r3, [r7, #16]
}
 8003bbe:	bf00      	nop
 8003bc0:	e7fe      	b.n	8003bc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	60fb      	str	r3, [r7, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bde:	f000 fe05 	bl	80047ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <xTaskCheckForTimeOut+0xbc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d102      	bne.n	8003c02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	e023      	b.n	8003c4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <xTaskCheckForTimeOut+0xc0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d007      	beq.n	8003c1e <xTaskCheckForTimeOut+0x82>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	e015      	b.n	8003c4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d20b      	bcs.n	8003c40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff9b 	bl	8003b70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e004      	b.n	8003c4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c4a:	f000 fdff 	bl	800484c <vPortExitCritical>

	return xReturn;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000c3c 	.word	0x20000c3c
 8003c5c:	20000c50 	.word	0x20000c50

08003c60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <vTaskMissedYield+0x14>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000c4c 	.word	0x20000c4c

08003c78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c80:	f000 f852 	bl	8003d28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <prvIdleTask+0x28>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d9f9      	bls.n	8003c80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <prvIdleTask+0x2c>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c9c:	e7f0      	b.n	8003c80 <prvIdleTask+0x8>
 8003c9e:	bf00      	nop
 8003ca0:	20000768 	.word	0x20000768
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	e00c      	b.n	8003cce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <prvInitialiseTaskLists+0x60>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fc48 	bl	8002558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b37      	cmp	r3, #55	; 0x37
 8003cd2:	d9ef      	bls.n	8003cb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cd4:	480d      	ldr	r0, [pc, #52]	; (8003d0c <prvInitialiseTaskLists+0x64>)
 8003cd6:	f7fe fc3f 	bl	8002558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cda:	480d      	ldr	r0, [pc, #52]	; (8003d10 <prvInitialiseTaskLists+0x68>)
 8003cdc:	f7fe fc3c 	bl	8002558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ce0:	480c      	ldr	r0, [pc, #48]	; (8003d14 <prvInitialiseTaskLists+0x6c>)
 8003ce2:	f7fe fc39 	bl	8002558 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ce6:	480c      	ldr	r0, [pc, #48]	; (8003d18 <prvInitialiseTaskLists+0x70>)
 8003ce8:	f7fe fc36 	bl	8002558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cec:	480b      	ldr	r0, [pc, #44]	; (8003d1c <prvInitialiseTaskLists+0x74>)
 8003cee:	f7fe fc33 	bl	8002558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <prvInitialiseTaskLists+0x78>)
 8003cf4:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <prvInitialiseTaskLists+0x64>)
 8003cf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <prvInitialiseTaskLists+0x7c>)
 8003cfa:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <prvInitialiseTaskLists+0x68>)
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000768 	.word	0x20000768
 8003d0c:	20000bc8 	.word	0x20000bc8
 8003d10:	20000bdc 	.word	0x20000bdc
 8003d14:	20000bf8 	.word	0x20000bf8
 8003d18:	20000c0c 	.word	0x20000c0c
 8003d1c:	20000c24 	.word	0x20000c24
 8003d20:	20000bf0 	.word	0x20000bf0
 8003d24:	20000bf4 	.word	0x20000bf4

08003d28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d2e:	e019      	b.n	8003d64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d30:	f000 fd5c 	bl	80047ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <prvCheckTasksWaitingTermination+0x50>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fc8f 	bl	8002664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <prvCheckTasksWaitingTermination+0x54>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	4a0b      	ldr	r2, [pc, #44]	; (8003d7c <prvCheckTasksWaitingTermination+0x54>)
 8003d4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <prvCheckTasksWaitingTermination+0x58>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <prvCheckTasksWaitingTermination+0x58>)
 8003d58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d5a:	f000 fd77 	bl	800484c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f810 	bl	8003d84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <prvCheckTasksWaitingTermination+0x58>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e1      	bne.n	8003d30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000c0c 	.word	0x20000c0c
 8003d7c:	20000c38 	.word	0x20000c38
 8003d80:	20000c20 	.word	0x20000c20

08003d84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d108      	bne.n	8003da8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 feea 	bl	8004b74 <vPortFree>
				vPortFree( pxTCB );
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fee7 	bl	8004b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003da6:	e018      	b.n	8003dda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d103      	bne.n	8003dba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fede 	bl	8004b74 <vPortFree>
	}
 8003db8:	e00f      	b.n	8003dda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d00a      	beq.n	8003dda <prvDeleteTCB+0x56>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	60fb      	str	r3, [r7, #12]
}
 8003dd6:	bf00      	nop
 8003dd8:	e7fe      	b.n	8003dd8 <prvDeleteTCB+0x54>
	}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <prvResetNextTaskUnblockTime+0x40>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <prvResetNextTaskUnblockTime+0x14>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <prvResetNextTaskUnblockTime+0x16>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <prvResetNextTaskUnblockTime+0x44>)
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e06:	e008      	b.n	8003e1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <prvResetNextTaskUnblockTime+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <prvResetNextTaskUnblockTime+0x44>)
 8003e18:	6013      	str	r3, [r2, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	20000bf0 	.word	0x20000bf0
 8003e28:	20000c58 	.word	0x20000c58

08003e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <xTaskGetSchedulerState+0x34>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	e008      	b.n	8003e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <xTaskGetSchedulerState+0x38>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e001      	b.n	8003e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e52:	687b      	ldr	r3, [r7, #4]
	}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000c44 	.word	0x20000c44
 8003e64:	20000c60 	.word	0x20000c60

08003e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d056      	beq.n	8003f2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <xTaskPriorityDisinherit+0xd0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d00a      	beq.n	8003e9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	60fb      	str	r3, [r7, #12]
}
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	60bb      	str	r3, [r7, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d02c      	beq.n	8003f2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d128      	bne.n	8003f2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fbc0 	bl	8002664 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <xTaskPriorityDisinherit+0xd4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d903      	bls.n	8003f0c <xTaskPriorityDisinherit+0xa4>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <xTaskPriorityDisinherit+0xd4>)
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <xTaskPriorityDisinherit+0xd8>)
 8003f1a:	441a      	add	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f7fe fb43 	bl	80025ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f2c:	697b      	ldr	r3, [r7, #20]
	}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000764 	.word	0x20000764
 8003f3c:	20000c40 	.word	0x20000c40
 8003f40:	20000768 	.word	0x20000768

08003f44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fb82 	bl	8002664 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d10a      	bne.n	8003f7e <prvAddCurrentTaskToDelayedList+0x3a>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4819      	ldr	r0, [pc, #100]	; (8003fdc <prvAddCurrentTaskToDelayedList+0x98>)
 8003f78:	f7fe fb19 	bl	80025ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f7c:	e026      	b.n	8003fcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d209      	bcs.n	8003faa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7fe fb26 	bl	80025f4 <vListInsert>
}
 8003fa8:	e010      	b.n	8003fcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fe fb1c 	bl	80025f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d202      	bcs.n	8003fcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000c3c 	.word	0x20000c3c
 8003fd8:	20000764 	.word	0x20000764
 8003fdc:	20000c24 	.word	0x20000c24
 8003fe0:	20000bf4 	.word	0x20000bf4
 8003fe4:	20000bf0 	.word	0x20000bf0
 8003fe8:	20000c58 	.word	0x20000c58

08003fec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ff6:	f000 facb 	bl	8004590 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <xTimerCreateTimerTask+0x80>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d021      	beq.n	8004046 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800400a:	1d3a      	adds	r2, r7, #4
 800400c:	f107 0108 	add.w	r1, r7, #8
 8004010:	f107 030c 	add.w	r3, r7, #12
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fa85 	bl	8002524 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	9202      	str	r2, [sp, #8]
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	2302      	movs	r3, #2
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	2300      	movs	r3, #0
 800402a:	460a      	mov	r2, r1
 800402c:	4910      	ldr	r1, [pc, #64]	; (8004070 <xTimerCreateTimerTask+0x84>)
 800402e:	4811      	ldr	r0, [pc, #68]	; (8004074 <xTimerCreateTimerTask+0x88>)
 8004030:	f7ff f8e4 	bl	80031fc <xTaskCreateStatic>
 8004034:	4603      	mov	r3, r0
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <xTimerCreateTimerTask+0x8c>)
 8004038:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800403a:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <xTimerCreateTimerTask+0x8c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004042:	2301      	movs	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000c94 	.word	0x20000c94
 8004070:	08004e70 	.word	0x08004e70
 8004074:	08004199 	.word	0x08004199
 8004078:	20000c98 	.word	0x20000c98

0800407c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	623b      	str	r3, [r7, #32]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <xTimerGenericCommand+0x98>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d02a      	beq.n	8004108 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	dc18      	bgt.n	80040f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040c4:	f7ff feb2 	bl	8003e2c <xTaskGetSchedulerState>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d109      	bne.n	80040e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <xTimerGenericCommand+0x98>)
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	f107 0110 	add.w	r1, r7, #16
 80040d6:	2300      	movs	r3, #0
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	f7fe fc2d 	bl	8002938 <xQueueGenericSend>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24
 80040e0:	e012      	b.n	8004108 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <xTimerGenericCommand+0x98>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	f107 0110 	add.w	r1, r7, #16
 80040ea:	2300      	movs	r3, #0
 80040ec:	2200      	movs	r2, #0
 80040ee:	f7fe fc23 	bl	8002938 <xQueueGenericSend>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24
 80040f4:	e008      	b.n	8004108 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040f6:	4b07      	ldr	r3, [pc, #28]	; (8004114 <xTimerGenericCommand+0x98>)
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f107 0110 	add.w	r1, r7, #16
 80040fe:	2300      	movs	r3, #0
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	f7fe fd17 	bl	8002b34 <xQueueGenericSendFromISR>
 8004106:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800410a:	4618      	mov	r0, r3
 800410c:	3728      	adds	r7, #40	; 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000c94 	.word	0x20000c94

08004118 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af02      	add	r7, sp, #8
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <prvProcessExpiredTimer+0x7c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3304      	adds	r3, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fa97 	bl	8002664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d122      	bne.n	8004184 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	18d1      	adds	r1, r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	6978      	ldr	r0, [r7, #20]
 800414c:	f000 f8c8 	bl	80042e0 <prvInsertTimerInActiveList>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004156:	2300      	movs	r3, #0
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	2100      	movs	r1, #0
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7ff ff8b 	bl	800407c <xTimerGenericCommand>
 8004166:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	60fb      	str	r3, [r7, #12]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	4798      	blx	r3
}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000c8c 	.word	0x20000c8c

08004198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f857 	bl	8004258 <prvGetNextExpireTime>
 80041aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4619      	mov	r1, r3
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f803 	bl	80041bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041b6:	f000 f8d5 	bl	8004364 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ba:	e7f1      	b.n	80041a0 <prvTimerTask+0x8>

080041bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041c6:	f7ff fa4b 	bl	8003660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f866 	bl	80042a0 <prvSampleTimeNow>
 80041d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d130      	bne.n	800423e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <prvProcessTimerOrBlockTask+0x3c>
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d806      	bhi.n	80041f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041ea:	f7ff fa47 	bl	800367c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff91 	bl	8004118 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041f6:	e024      	b.n	8004242 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <prvProcessTimerOrBlockTask+0x90>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <prvProcessTimerOrBlockTask+0x94>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	f7fe ffb9 	bl	8003194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004222:	f7ff fa2b 	bl	800367c <xTaskResumeAll>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <prvProcessTimerOrBlockTask+0x98>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
}
 800423c:	e001      	b.n	8004242 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800423e:	f7ff fa1d 	bl	800367c <xTaskResumeAll>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000c90 	.word	0x20000c90
 8004250:	20000c94 	.word	0x20000c94
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <prvGetNextExpireTime+0x44>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <prvGetNextExpireTime+0x44>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e001      	b.n	800428e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800428e:	68fb      	ldr	r3, [r7, #12]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000c8c 	.word	0x20000c8c

080042a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042a8:	f7ff fa86 	bl	80037b8 <xTaskGetTickCount>
 80042ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <prvSampleTimeNow+0x3c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d205      	bcs.n	80042c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042b8:	f000 f908 	bl	80044cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e002      	b.n	80042ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042ca:	4a04      	ldr	r2, [pc, #16]	; (80042dc <prvSampleTimeNow+0x3c>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042d0:	68fb      	ldr	r3, [r7, #12]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000c9c 	.word	0x20000c9c

080042e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d812      	bhi.n	800432c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e01b      	b.n	8004352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <prvInsertTimerInActiveList+0x7c>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7fe f965 	bl	80025f4 <vListInsert>
 800432a:	e012      	b.n	8004352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d206      	bcs.n	8004342 <prvInsertTimerInActiveList+0x62>
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e007      	b.n	8004352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <prvInsertTimerInActiveList+0x80>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fe f951 	bl	80025f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004352:	697b      	ldr	r3, [r7, #20]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000c90 	.word	0x20000c90
 8004360:	20000c8c 	.word	0x20000c8c

08004364 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08e      	sub	sp, #56	; 0x38
 8004368:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800436a:	e09d      	b.n	80044a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da18      	bge.n	80043a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	3304      	adds	r3, #4
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61fb      	str	r3, [r7, #28]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439a:	6850      	ldr	r0, [r2, #4]
 800439c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439e:	6892      	ldr	r2, [r2, #8]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db7d      	blt.n	80044a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	3304      	adds	r3, #4
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe f952 	bl	8002664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043c0:	463b      	mov	r3, r7
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff ff6c 	bl	80042a0 <prvSampleTimeNow>
 80043c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d86b      	bhi.n	80044a8 <prvProcessReceivedCommands+0x144>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <prvProcessReceivedCommands+0x74>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	08004401 	.word	0x08004401
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004401 	.word	0x08004401
 80043e4:	080044a9 	.word	0x080044a9
 80043e8:	0800445d 	.word	0x0800445d
 80043ec:	08004495 	.word	0x08004495
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004401 	.word	0x08004401
 80043f8:	080044a9 	.word	0x080044a9
 80043fc:	0800445d 	.word	0x0800445d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	18d1      	adds	r1, r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440e:	f7ff ff67 	bl	80042e0 <prvInsertTimerInActiveList>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d047      	beq.n	80044a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d13f      	bne.n	80044a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	441a      	add	r2, r3
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	2100      	movs	r1, #0
 8004438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800443a:	f7ff fe1f 	bl	800407c <xTimerGenericCommand>
 800443e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d130      	bne.n	80044a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	61bb      	str	r3, [r7, #24]
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	617b      	str	r3, [r7, #20]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	18d1      	adds	r1, r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800448e:	f7ff ff27 	bl	80042e0 <prvInsertTimerInActiveList>
					break;
 8004492:	e009      	b.n	80044a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d104      	bne.n	80044a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800449e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044a0:	f000 fb68 	bl	8004b74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044a4:	e000      	b.n	80044a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <prvProcessReceivedCommands+0x164>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	1d39      	adds	r1, r7, #4
 80044ae:	2200      	movs	r2, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fbd7 	bl	8002c64 <xQueueReceive>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f47f af57 	bne.w	800436c <prvProcessReceivedCommands+0x8>
	}
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	3730      	adds	r7, #48	; 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000c94 	.word	0x20000c94

080044cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044d2:	e045      	b.n	8004560 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044d4:	4b2c      	ldr	r3, [pc, #176]	; (8004588 <prvSwitchTimerLists+0xbc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <prvSwitchTimerLists+0xbc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe f8b9 	bl	8002664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d12e      	bne.n	8004560 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d90e      	bls.n	8004532 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <prvSwitchTimerLists+0xbc>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7fe f862 	bl	80025f4 <vListInsert>
 8004530:	e016      	b.n	8004560 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	2300      	movs	r3, #0
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	2100      	movs	r1, #0
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fd9d 	bl	800407c <xTimerGenericCommand>
 8004542:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <prvSwitchTimerLists+0x94>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	603b      	str	r3, [r7, #0]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <prvSwitchTimerLists+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1b4      	bne.n	80044d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <prvSwitchTimerLists+0xbc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <prvSwitchTimerLists+0xc0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a04      	ldr	r2, [pc, #16]	; (8004588 <prvSwitchTimerLists+0xbc>)
 8004576:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <prvSwitchTimerLists+0xc0>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000c8c 	.word	0x20000c8c
 800458c:	20000c90 	.word	0x20000c90

08004590 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004596:	f000 f929 	bl	80047ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <prvCheckForValidListAndQueue+0x60>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d120      	bne.n	80045e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045a2:	4814      	ldr	r0, [pc, #80]	; (80045f4 <prvCheckForValidListAndQueue+0x64>)
 80045a4:	f7fd ffd8 	bl	8002558 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045a8:	4813      	ldr	r0, [pc, #76]	; (80045f8 <prvCheckForValidListAndQueue+0x68>)
 80045aa:	f7fd ffd5 	bl	8002558 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045ae:	4b13      	ldr	r3, [pc, #76]	; (80045fc <prvCheckForValidListAndQueue+0x6c>)
 80045b0:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <prvCheckForValidListAndQueue+0x64>)
 80045b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <prvCheckForValidListAndQueue+0x70>)
 80045b6:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <prvCheckForValidListAndQueue+0x68>)
 80045b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <prvCheckForValidListAndQueue+0x74>)
 80045c0:	4a11      	ldr	r2, [pc, #68]	; (8004608 <prvCheckForValidListAndQueue+0x78>)
 80045c2:	2110      	movs	r1, #16
 80045c4:	200a      	movs	r0, #10
 80045c6:	f7fe f8df 	bl	8002788 <xQueueGenericCreateStatic>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <prvCheckForValidListAndQueue+0x60>)
 80045ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <prvCheckForValidListAndQueue+0x60>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <prvCheckForValidListAndQueue+0x60>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	490b      	ldr	r1, [pc, #44]	; (800460c <prvCheckForValidListAndQueue+0x7c>)
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fdb0 	bl	8003144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045e4:	f000 f932 	bl	800484c <vPortExitCritical>
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000c94 	.word	0x20000c94
 80045f4:	20000c64 	.word	0x20000c64
 80045f8:	20000c78 	.word	0x20000c78
 80045fc:	20000c8c 	.word	0x20000c8c
 8004600:	20000c90 	.word	0x20000c90
 8004604:	20000d40 	.word	0x20000d40
 8004608:	20000ca0 	.word	0x20000ca0
 800460c:	08004e78 	.word	0x08004e78

08004610 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3b04      	subs	r3, #4
 8004620:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b04      	subs	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3b04      	subs	r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004640:	4a08      	ldr	r2, [pc, #32]	; (8004664 <pxPortInitialiseStack+0x54>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3b14      	subs	r3, #20
 800464a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b20      	subs	r3, #32
 8004656:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004658:	68fb      	ldr	r3, [r7, #12]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr
 8004664:	08004669 	.word	0x08004669

08004668 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800466e:	2300      	movs	r3, #0
 8004670:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <prvTaskExitError+0x54>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d00a      	beq.n	8004692 <prvTaskExitError+0x2a>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60fb      	str	r3, [r7, #12]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <prvTaskExitError+0x28>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
}
 80046a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046a6:	bf00      	nop
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0fc      	beq.n	80046a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000080 	.word	0x20000080

080046c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <pxCurrentTCBConst2>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	6808      	ldr	r0, [r1, #0]
 80046c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ca:	f380 8809 	msr	PSP, r0
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8811 	msr	BASEPRI, r0
 80046da:	f04e 0e0d 	orr.w	lr, lr, #13
 80046de:	4770      	bx	lr

080046e0 <pxCurrentTCBConst2>:
 80046e0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80046e8:	4806      	ldr	r0, [pc, #24]	; (8004704 <prvPortStartFirstTask+0x1c>)
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	6800      	ldr	r0, [r0, #0]
 80046ee:	f380 8808 	msr	MSP, r0
 80046f2:	b662      	cpsie	i
 80046f4:	b661      	cpsie	f
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	df00      	svc	0
 8004700:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004702:	bf00      	nop
 8004704:	e000ed08 	.word	0xe000ed08

08004708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800470e:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <xPortStartScheduler+0xd0>)
 8004710:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	22ff      	movs	r2, #255	; 0xff
 800471e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <xPortStartScheduler+0xd4>)
 8004734:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004736:	4b2a      	ldr	r3, [pc, #168]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004738:	2207      	movs	r2, #7
 800473a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473c:	e009      	b.n	8004752 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004746:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d0ef      	beq.n	800473e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1c3 0307 	rsb	r3, r3, #7
 8004766:	2b04      	cmp	r3, #4
 8004768:	d00a      	beq.n	8004780 <xPortStartScheduler+0x78>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60bb      	str	r3, [r7, #8]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004780:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	4a16      	ldr	r2, [pc, #88]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004788:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <xPortStartScheduler+0xd8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <xPortStartScheduler+0xd8>)
 8004794:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <xPortStartScheduler+0xdc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a10      	ldr	r2, [pc, #64]	; (80047e4 <xPortStartScheduler+0xdc>)
 80047a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <xPortStartScheduler+0xdc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <xPortStartScheduler+0xdc>)
 80047b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047b6:	f000 f8b9 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <xPortStartScheduler+0xe0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047c0:	f7ff ff92 	bl	80046e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047c4:	f7ff f8c4 	bl	8003950 <vTaskSwitchContext>
	prvTaskExitError();
 80047c8:	f7ff ff4e 	bl	8004668 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000e400 	.word	0xe000e400
 80047dc:	20000d90 	.word	0x20000d90
 80047e0:	20000d94 	.word	0x20000d94
 80047e4:	e000ed20 	.word	0xe000ed20
 80047e8:	20000080 	.word	0x20000080

080047ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
}
 8004804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <vPortEnterCritical+0x58>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <vPortEnterCritical+0x58>)
 800480e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <vPortEnterCritical+0x58>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10f      	bne.n	8004838 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <vPortEnterCritical+0x5c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <vPortEnterCritical+0x4c>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	603b      	str	r3, [r7, #0]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <vPortEnterCritical+0x4a>
	}
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000080 	.word	0x20000080
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <vPortExitCritical+0x4c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <vPortExitCritical+0x24>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <vPortExitCritical+0x4c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	4a08      	ldr	r2, [pc, #32]	; (8004898 <vPortExitCritical+0x4c>)
 8004878:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <vPortExitCritical+0x4c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <vPortExitCritical+0x42>
 8004882:	2300      	movs	r3, #0
 8004884:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f383 8811 	msr	BASEPRI, r3
}
 800488c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	20000080 	.word	0x20000080
 800489c:	00000000 	.word	0x00000000

080048a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048a0:	f3ef 8009 	mrs	r0, PSP
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <pxCurrentTCBConst>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048b0:	6010      	str	r0, [r2, #0]
 80048b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048ba:	f380 8811 	msr	BASEPRI, r0
 80048be:	f7ff f847 	bl	8003950 <vTaskSwitchContext>
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8811 	msr	BASEPRI, r0
 80048ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	6808      	ldr	r0, [r1, #0]
 80048d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048d6:	f380 8809 	msr	PSP, r0
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	4770      	bx	lr

080048e0 <pxCurrentTCBConst>:
 80048e0:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
}
 8004900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004902:	f7fe ff67 	bl	80037d4 <xTaskIncrementTick>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <xPortSysTickHandler+0x40>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <vPortSetupTimerInterrupt+0x30>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <vPortSetupTimerInterrupt+0x38>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a09      	ldr	r2, [pc, #36]	; (8004968 <vPortSetupTimerInterrupt+0x3c>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <vPortSetupTimerInterrupt+0x40>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b03      	ldr	r3, [pc, #12]	; (800495c <vPortSetupTimerInterrupt+0x30>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	e000e010 	.word	0xe000e010
 8004960:	e000e018 	.word	0xe000e018
 8004964:	20000074 	.word	0x20000074
 8004968:	51eb851f 	.word	0x51eb851f
 800496c:	e000e014 	.word	0xe000e014

08004970 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004976:	f3ef 8305 	mrs	r3, IPSR
 800497a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	d914      	bls.n	80049ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004982:	4a16      	ldr	r2, [pc, #88]	; (80049dc <vPortValidateInterruptPriority+0x6c>)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <vPortValidateInterruptPriority+0x70>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	7afa      	ldrb	r2, [r7, #11]
 8004992:	429a      	cmp	r2, r3
 8004994:	d20a      	bcs.n	80049ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	607b      	str	r3, [r7, #4]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <vPortValidateInterruptPriority+0x74>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <vPortValidateInterruptPriority+0x78>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d90a      	bls.n	80049d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	603b      	str	r3, [r7, #0]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <vPortValidateInterruptPriority+0x60>
	}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	e000e3f0 	.word	0xe000e3f0
 80049e0:	20000d90 	.word	0x20000d90
 80049e4:	e000ed0c 	.word	0xe000ed0c
 80049e8:	20000d94 	.word	0x20000d94

080049ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049f8:	f7fe fe32 	bl	8003660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049fc:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <pvPortMalloc+0x174>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a04:	f000 f910 	bl	8004c28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a08:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <pvPortMalloc+0x178>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 808e 	bne.w	8004b32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01d      	beq.n	8004a58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d014      	beq.n	8004a58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	3308      	adds	r3, #8
 8004a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <pvPortMalloc+0x6c>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	617b      	str	r3, [r7, #20]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d069      	beq.n	8004b32 <pvPortMalloc+0x146>
 8004a5e:	4b42      	ldr	r3, [pc, #264]	; (8004b68 <pvPortMalloc+0x17c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d864      	bhi.n	8004b32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a68:	4b40      	ldr	r3, [pc, #256]	; (8004b6c <pvPortMalloc+0x180>)
 8004a6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <pvPortMalloc+0x180>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a72:	e004      	b.n	8004a7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d903      	bls.n	8004a90 <pvPortMalloc+0xa4>
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f1      	bne.n	8004a74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a90:	4b33      	ldr	r3, [pc, #204]	; (8004b60 <pvPortMalloc+0x174>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d04b      	beq.n	8004b32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	4413      	add	r3, r2
 8004aa2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad2      	subs	r2, r2, r3
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d91f      	bls.n	8004afc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <pvPortMalloc+0xf8>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	613b      	str	r3, [r7, #16]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004af6:	69b8      	ldr	r0, [r7, #24]
 8004af8:	f000 f8f8 	bl	8004cec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004afc:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <pvPortMalloc+0x17c>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <pvPortMalloc+0x17c>)
 8004b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <pvPortMalloc+0x17c>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <pvPortMalloc+0x184>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d203      	bcs.n	8004b1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <pvPortMalloc+0x17c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <pvPortMalloc+0x184>)
 8004b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <pvPortMalloc+0x178>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b32:	f7fe fda3 	bl	800367c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <pvPortMalloc+0x16a>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60fb      	str	r3, [r7, #12]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <pvPortMalloc+0x168>
	return pvReturn;
 8004b56:	69fb      	ldr	r3, [r7, #28]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3728      	adds	r7, #40	; 0x28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	200019a0 	.word	0x200019a0
 8004b64:	200019ac 	.word	0x200019ac
 8004b68:	200019a4 	.word	0x200019a4
 8004b6c:	20001998 	.word	0x20001998
 8004b70:	200019a8 	.word	0x200019a8

08004b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d048      	beq.n	8004c18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b86:	2308      	movs	r3, #8
 8004b88:	425b      	negs	r3, r3
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <vPortFree+0xac>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <vPortFree+0x44>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60fb      	str	r3, [r7, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <vPortFree+0x62>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60bb      	str	r3, [r7, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <vPortFree+0xac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d115      	bne.n	8004c18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vPortFree+0xac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bfc:	f7fe fd30 	bl	8003660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <vPortFree+0xb0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <vPortFree+0xb0>)
 8004c0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c0e:	6938      	ldr	r0, [r7, #16]
 8004c10:	f000 f86c 	bl	8004cec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c14:	f7fe fd32 	bl	800367c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	200019ac 	.word	0x200019ac
 8004c24:	200019a4 	.word	0x200019a4

08004c28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <prvHeapInit+0xac>)
 8004c36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00c      	beq.n	8004c5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3307      	adds	r3, #7
 8004c46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0307 	bic.w	r3, r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <prvHeapInit+0xac>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <prvHeapInit+0xb0>)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c66:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <prvHeapInit+0xb0>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4413      	add	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c74:	2208      	movs	r2, #8
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0307 	bic.w	r3, r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <prvHeapInit+0xb4>)
 8004c88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <prvHeapInit+0xb4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <prvHeapInit+0xb4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <prvHeapInit+0xb4>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <prvHeapInit+0xb8>)
 8004cb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <prvHeapInit+0xbc>)
 8004cbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <prvHeapInit+0xc0>)
 8004cc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000d98 	.word	0x20000d98
 8004cd8:	20001998 	.word	0x20001998
 8004cdc:	200019a0 	.word	0x200019a0
 8004ce0:	200019a8 	.word	0x200019a8
 8004ce4:	200019a4 	.word	0x200019a4
 8004ce8:	200019ac 	.word	0x200019ac

08004cec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <prvInsertBlockIntoFreeList+0xa8>)
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e002      	b.n	8004d00 <prvInsertBlockIntoFreeList+0x14>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d8f7      	bhi.n	8004cfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4413      	add	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d108      	bne.n	8004d2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	441a      	add	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d118      	bne.n	8004d74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <prvInsertBlockIntoFreeList+0xac>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d00d      	beq.n	8004d6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e008      	b.n	8004d7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <prvInsertBlockIntoFreeList+0xac>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e003      	b.n	8004d7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d002      	beq.n	8004d8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	20001998 	.word	0x20001998
 8004d98:	200019a0 	.word	0x200019a0

08004d9c <__libc_init_array>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	2600      	movs	r6, #0
 8004da0:	4d0c      	ldr	r5, [pc, #48]	; (8004dd4 <__libc_init_array+0x38>)
 8004da2:	4c0d      	ldr	r4, [pc, #52]	; (8004dd8 <__libc_init_array+0x3c>)
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	42a6      	cmp	r6, r4
 8004daa:	d109      	bne.n	8004dc0 <__libc_init_array+0x24>
 8004dac:	f000 f830 	bl	8004e10 <_init>
 8004db0:	2600      	movs	r6, #0
 8004db2:	4d0a      	ldr	r5, [pc, #40]	; (8004ddc <__libc_init_array+0x40>)
 8004db4:	4c0a      	ldr	r4, [pc, #40]	; (8004de0 <__libc_init_array+0x44>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	42a6      	cmp	r6, r4
 8004dbc:	d105      	bne.n	8004dca <__libc_init_array+0x2e>
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc4:	4798      	blx	r3
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7ee      	b.n	8004da8 <__libc_init_array+0xc>
 8004dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dce:	4798      	blx	r3
 8004dd0:	3601      	adds	r6, #1
 8004dd2:	e7f2      	b.n	8004dba <__libc_init_array+0x1e>
 8004dd4:	08004f1c 	.word	0x08004f1c
 8004dd8:	08004f1c 	.word	0x08004f1c
 8004ddc:	08004f1c 	.word	0x08004f1c
 8004de0:	08004f20 	.word	0x08004f20

08004de4 <memcpy>:
 8004de4:	440a      	add	r2, r1
 8004de6:	4291      	cmp	r1, r2
 8004de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dec:	d100      	bne.n	8004df0 <memcpy+0xc>
 8004dee:	4770      	bx	lr
 8004df0:	b510      	push	{r4, lr}
 8004df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004df6:	4291      	cmp	r1, r2
 8004df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dfc:	d1f9      	bne.n	8004df2 <memcpy+0xe>
 8004dfe:	bd10      	pop	{r4, pc}

08004e00 <memset>:
 8004e00:	4603      	mov	r3, r0
 8004e02:	4402      	add	r2, r0
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d100      	bne.n	8004e0a <memset+0xa>
 8004e08:	4770      	bx	lr
 8004e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0e:	e7f9      	b.n	8004e04 <memset+0x4>

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
