<!DOCTYPE html>
<html lang="en">
<head>

    <title>LoraWAN TestBed - <%=title%></title>
    <script src="https://unpkg.com/mqtt@4.2.8/dist/mqtt.min.js"></script>
    <!-- <link rel="stylesheet" href="./../../public/stylesheets/dashboard.css"> -->
    <!-- Global level stylesheet -->
    
    <%- include('../partials/libs.ejs') %>

    <!-- Custom styles for this page -->
    <link href="vendor/datatables/dataTables.bootstrap4.min.css" rel="stylesheet">

</head>

<body id="page-top">

    <!-- Page Wrapper -->
    <div id="wrapper">


        <%- include('../partials/navbar.ejs') %>

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">

            <!-- Main Content -->
            <div id="content">

                <!-- Topbar -->
                <%- include('../partials/header.ejs') %>
                <!-- End of Topbar -->

                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Page Heading -->
                    <h1 class="h3 mb-2 text-gray-800"><%= __('Device') %></h1>

                    <!-- DataTales Example -->
                    <div class="card shadow mb-4">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary"><%= __('Device List') %></h6>
                            <span class="float-right">
                                <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#addDeviceModal">
                                    <i class="fas fa-plus fa-sm text-white-50"></i>&nbsp;<%= __('Add device') %>
                                </button>
                            </span>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table dt-responsive nowrap" id="dataTable" width="100%" cellspacing="0">
                                    <thead>
                                        <tr>
                                            <th><%= __('Device name') %></th>
                                            <th><%= __('No. sensors') %></th>
                                            <th><%= __('Data') %></th>
                                            <th id="battery"><i class="fas fa-battery-three-quarters fa-lg fa-fw mr-2"></i></th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        
                                        <% for(let i=0; i< sensor.length; i++){%>
                                        <tr>
                                            <!-- Device name -->
                                            <td class="align-middle"><%=sensor[i].dev_id%></td>                                
                                            <!-- Number of sensors -->
                                            <td class="align-middle"><%=sensor[i].sensor_key_arr.length%></td>
                                            <!-- Data -->
                                            <td class="align-middle">     
                                                <div class="row row-cols-md-2 no-gutters">
                                                    <% let ss_batv = 0;%>
                                                    <% let ss_key = sensor[i].sensor_key_arr;%>
                                                    <% for(let j=0; j< ss_key.length; j++){
                                                        if(ss_key[j] == 'BatV'){
                                                            ss_batv=ss_key[j];
                                                        }
                                                        else{%>
                                                    <div class="col-md-5"><%=ss_key[j]%>: <p id="payload-data-<%=sensor[i].dev_id%>-<%=ss_key[j]%>">[Blank]</p></div>
                                                        <%}%>
                                                    <%}%>
                                                </div>
                                            </td>
                                            <!-- Battery -->
                                            <td class="align-middle" id="payload-data-<%=sensor[i].dev_id%>-<%=ss_batv%>">[Blank]</td>
                                            <!-- Configure button -->
                                            <td class="align-middle">
                                                <button type="button" id="<%=sensor[i].dev_id%>" class="btn btn-light btn-sm"
                                                        onclick="openUniqueDeviceModal('<%=sensor[i].dev_id%>')" data-toggle="modal" data-target="#configureDeviceModal">
                                                    <%= __('Configure') %>
                                                </button>
                                            </td>
                                        </tr>
                                        <%};%>
  
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                </div>
                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->
            
            <!-- Footer -->
            <%- include ('../partials/footer.ejs') %>
            <!-- End of Footer -->

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    
    <!-- Global Modals-->

    <div class="modal fade" id="configureDeviceModal" tabindex="-1" role="dialog" aria-labelledby="configureDeviceModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- Modal header -->
                <div class="modal-header">
                    <h5 class="modal-title" id="configureDeviceModalLabel"><%= __('Configure device') %></h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <!-- Modal body -->
                <div class="modal-body">
                    <p id="device_id">Device ID: temp</p>
                    <hr>
                    <!-- action="device/configure" -->
                    <form method="post" action="" class="user">
                        <!-- Input type Text -->
                        <input type="hidden" class="form-control form-control-user" id='configure-device_id' value="">
                        <label for="device_name"><%= __('Device name') %></label>
                        <div class="form-group">
                            <input type="text" class="form-control form-control-user"
                                id="configureDeviceName" aria-describedby="device_name"
                                placeholder="Enter Device name" name="enddev_name">
                        </div>
                        <!-- Nếu có làm option đổi board, thì ở controller trả về thêm biến board
                        trước khi render page device, sau đó list các board ra ở tag select này-->
                        <!-- Input type Select -->
                        <label for="configureDeviceGroup"><%= __('Dashboard') %></label>
                        <select class="form-control mb-4" id="configureDeviceGroup">
                            <option selected value="1">Garden 1</option>
                            <option value="2">Garden 2</option>
                            <option value="3">Garden 3</option>
                        </select>
                        <input type="submit" id="configure_device" value="Confirm changes" class="btn btn-primary btn-user btn-block" style="font-size: .8rem !important;">
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal"><%= __('Cancel') %></button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function openUniqueDeviceModal(device_id) {
            var str = "Device ID: " + device_id;
            $("#device_id").html(str);
            document.getElementById(`configure-device_id`).value = device_id;
        }
    </script>

    <!-- Add Device Modal-->
    <div class="modal fade" id="addDeviceModal" tabindex="-1" role="dialog" aria-labelledby="addDeviceModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- Modal header -->
                <div class="modal-header">
                    <h5 class="modal-title" id="addDeviceModalLabel"><%= __('Add device') %></h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <!-- Modal body -->
                <div class="modal-body">
                    <form method="post" action="device/add" class="user">
                        <div class="form-group">
                            <input type="text" class="form-control form-control-user"
                                id="InputDeviceID" aria-describedby="device_ID"
                                placeholder="Enter Device ID..." name="enddev_id">
                        </div>
                        <div class="form-group">
                            <input type="password" class="form-control form-control-user"
                                id="InputDevicePassword" placeholder="Enter activation code..." name="act_code">
                        </div>
                        <!-- Submit button to add device to database-->
                        <input type="submit" id="add_device" value="Add device" class="btn btn-primary btn-user btn-block">
                    </form>
                </div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal"><%= __('Cancel') %></button>
                </div>
            </div>
        </div>
    </div>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="logoutModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!-- Modal header -->
                <div class="modal-header">
                    <h5 class="modal-title" id="logoutModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <!-- Modal body -->
                <div class="modal-body"><%=__('Select Logout below if you are ready to end your current session')%></div>
                <!-- Modal footer -->
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <form action="../login/logout" method="post">
                        <!-- <a  onclick="this.parentNode.submit();">Logout</a> -->
                        <input type="submit" class="btn btn-primary" onclick='clientStorage.removeItem(STORAGE_KEY);' value="<%= __('Logout')%>">
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Global level plugins --> 
    <%- include('../partials/script.ejs') %>

    <!-- Page level plugins -->
    <script src="vendor/datatables/jquery.dataTables.min.js"></script>
    <script src="vendor/datatables/dataTables.bootstrap4.min.js"></script>

    <!-- Page level custom scripts -->
    <script src="js/visuals/datatables-demo.js"></script>

    <script>
        const streaming_broker_protocol = "ws"; //pass from server
        const streaming_broker_addr = '<%= broker.addr %>'; //pass from server
        const streaming_broker_port = '<%= broker.port %>'; //pass from server

        const STORAGE_KEY = 'payload-storage';
        const MAX_SESSION_STORAGE_LENGTH= 20;

        const devices = '<%= dev_list %>'.split(",");
        //pass from server
        const streaming_broker_options = {
            clientId: '<%= client_id %>',
            username: '<%= broker.id %>',
            password: '<%= broker.psw %>',
            keepalive: 120,
            protocolVersion: 5,
            clean: false,
            properties: {  // MQTT 5.0
                sessionExpiryInterval: 60
            }
            // resubscribe: false
        }

        const sub_topics = [];
        devices.forEach((device_id) => {
            sub_topics.push({
                'topic': `devices/${device_id}/up/payload`,
                'options': {
                    'qos': 0
                }
            });
        });
            
        const streaming_broker_mqttclient = mqtt.connect(
            `${streaming_broker_protocol}://${streaming_broker_addr}:${streaming_broker_port}/mqtt`, 
            streaming_broker_options
        );

        streaming_broker_mqttclient.on('connect', streaming_broker_connect_handler);
        streaming_broker_mqttclient.on('error', streaming_broker_error_handler);
        streaming_broker_mqttclient.on('message', streaming_broker_message_handler);
        
        //create browser storage instance
        const clientStorage = localStorage;

        //handle incoming connect
        function streaming_broker_connect_handler(connack)
        {
            try {
                console.log(`streaming broker connected? ${streaming_broker_mqttclient.connected}`);
                if(connack.sessionPresent==false){
                    clientStorage.removeItem(STORAGE_KEY);
                    sub_topics.forEach((topic) => {
                        streaming_broker_mqttclient.subscribe(topic['topic'], topic['options']);
                    });
                } else {
                    var new_dev_id = '<%=new_dev_id%>';
                    if(new_dev_id){
                        streaming_broker_mqttclient.subscribe(`devices/${new_dev_id}/up/payload`, {'qos': 0});
                        console.log('OK');
                    }
                    
                    let storage = clientStorage.getItem(STORAGE_KEY);
                    let length_flag = 0;
                    if(storage){
                        storage = JSON.parse(storage);
                    }else{
                        return;
                    }

                    for(let i in storage.payload){
                        
                        for(let j in storage.payload[i].payload_data){
                            document.querySelectorAll(`[id^=payload-data-${i}-${j}]`).forEach((item)=>{
                                item.innerHTML = storage.payload[i].payload_data[j].at(-1);                                  
                            });
                            document.querySelectorAll(`[id^=chart-payload-data-${i}-${j}]`).forEach((item)=>{
                                var graph = $(item).data('graph');
                                graph.data.labels=storage.payload[i].recv_timestamp;
                                graph.data.datasets[0].data=storage.payload[i].payload_data[j];
                                graph.update();
                            });
                        }
                    }
                }
            } catch (err) {
                console.log(err);
            }
        }
        
        //MESSAGE SEND HERE
        function streaming_broker_message_handler(topic, message, packet)
        {
            try {
                var recv_topic = topic.split('/');
                var dev_id = recv_topic[1];
                console.log(topic);

                if (topic == `devices/${dev_id}/up/payload`) {
                    //parse msg
                    let parsed_message = JSON.parse(message);

                    console.log(topic);
                    console.log('parsed_message', parsed_message.payload_data);

                    let storage = clientStorage.getItem(STORAGE_KEY);
                    let length_flag = 0;
                    if(storage){
                        storage = JSON.parse(storage);
                    }else{
                        storage = {
                            payload: {}
                        }
                    }
                    if(!storage.payload[recv_topic]){
                        storage.payload[recv_topic] = {};
                        storage.payload[recv_topic].recv_timestamp = [];
                        storage.payload[recv_topic].payload_data = {};
                        length_flag = 1;
                    }else if(storage.payload[recv_topic].recv_timestamp.length > MAX_SESSION_STORAGE_LENGTH){
                        storage.payload[recv_topic].recv_timestamp.shift();
                        length_flag = 2;
                    }
                    parsed_message.recv_timestamp = timestamp_format(parsed_message.recv_timestamp);
                    storage.payload[recv_topic].recv_timestamp.push(parsed_message.recv_timestamp);

                    for(var i in parsed_message.payload_data){
                        if(length_flag==1){
                            storage.payload[recv_topic].payload_data[i] = [];
                        }else if(length_flag==2){
                            storage.payload[recv_topic].payload_data[i].shift();
                        }
                        storage.payload[recv_topic].payload_data[i].push(parsed_message.payload_data[i]);
                        clientStorage.setItem(STORAGE_KEY, JSON.stringify(storage));
                        document.getElementById(`payload-data-${recv_topic}-${i}`).innerHTML = parsed_message.payload_data[i];
                    }
                    clientStorage.setItem(STORAGE_KEY, JSON.stringify(storage));
                }
            } catch (err) {
                console.log(err);
            }
        }

        // handle error
        function streaming_broker_error_handler(error)
        {
            console.log("Can't connect to streaming broker" + error);
            //process.exit(1);
        }

        function timestamp_format(str){
            var arr = new Date(str).toLocaleString(NaN,{ hour12: false }).split(', ');
            arr[0] = arr[0].split('/');
            arr[0].pop();
            arr[0] = `${arr[0][0]}/${arr[0][1]}`
            arr[1] = arr[1].slice(0, 5);
            return `${arr[0]} ${arr[1]}`
        }
    </script>
</body>

</html>